# Load necessary libraries
if (!require(pacman)) install.packages("pacman")
library(pacman)

# Use p_load function from 'pacman' to load required packages
p_load(gdtools, epiR, ggplot2, dplyr, gdtools, gridExtra, scales)


#2.1 GLOBAL SENSITIVITY ANALYSIS: REPRODUCTION NUMBER

#We estimate R0 function using 1000 randoms  values for each parameter to subsequently perform partial rank correlation coefficients

generate_uniform_values <- function(mean, n) {
  lower_bound <- mean * 0.8
  upper_bound <- mean * 1.2
  runif(n, lower_bound, upper_bound)
}

generate_uniform_values_2 <- function(mean, n) {
  lower_bound <- mean * 0.8
  upper_bound <- 1
  runif(n, lower_bound, upper_bound)
}

num_simulations <- 1000  # Number of simulations to perfom 

PRCC_parameters <- list(
  d = generate_uniform_values(0.0003996096, num_simulations),
  x = generate_uniform_values(0.7, num_simulations),
  a = generate_uniform_values(0.32, num_simulations),
  e = generate_uniform_values(0.12, num_simulations),
  v = generate_uniform_values(1/4, num_simulations),
  l = generate_uniform_values(76, num_simulations),
  n = generate_uniform_values(0.08, num_simulations),
  pi = generate_uniform_values(0.005, num_simulations),
  m = generate_uniform_values(0.12, num_simulations),
  z = generate_uniform_values(0.22, num_simulations),
  p_1 = generate_uniform_values(1/6, num_simulations),
  p_2 = generate_uniform_values(1/6, num_simulations),
  p_3 = generate_uniform_values(1/6, num_simulations),
  p_4 = generate_uniform_values(1/12, num_simulations),
  h_1 = generate_uniform_values(1/5, num_simulations),
  h_2 = generate_uniform_values(1/5, num_simulations),
  g_1 = generate_uniform_values(0.5, num_simulations),
  g_2 = generate_uniform_values(0, num_simulations),
  f_2 = generate_uniform_values(0, num_simulations),
  f_1 = generate_uniform_values_2(0.90, num_simulations),
  j = generate_uniform_values(0, num_simulations),
  s_1 = generate_uniform_values(0.7, num_simulations),
  s_2 = generate_uniform_values(0, num_simulations)
)

View(PRCC_parameters)


#Reproduction number fuction obtained by next generation matrix method 
#(for more informationsee Script - Matlab 1: Reproduction number function)

R_formula = expression((d*l*(a + p_1*z)*(p_3^5*p_4^2*x + f_2^2*p_3^3*p_4^2*x + j^2*p_3^3*p_4^2*x + p_3^2*p_4^2*v^3*x + 3*p_3^3*p_4^2*v^2*x + e*f_1*p_3^5*v + e*h_1*p_3^5*v + f_1*h_1*p_3^5*x + e*p_3^5*p_4*v + f_1*p_3^5*p_4*x + h_1*p_3^5*p_4*x + e*f_1*p_3^3*v^3 + 2*e*f_1*p_3^4*v^2 + e*h_1*p_3^3*v^3 + 2*e*h_1*p_3^4*v^2 + e*p_3^3*p_4*v^3 + 2*e*p_3^4*p_4*v^2 + 2*f_2*p_3^4*p_4^2*x + 2*j*p_3^4*p_4^2*x + 3*p_3^4*p_4^2*v*x + h_2^2*p_3^3*p_4^2*s_2^2*x + e*f_1*f_2*p_3^2*v^3 + 3*e*f_1*f_2*p_3^3*v^2 + e*f_1*f_2^2*p_3^3*v - e*f_1*g_1*p_3^3*v^3 - 2*e*f_1*g_1*p_3^4*v^2 + e*f_2*h_1*p_3^2*v^3 + 2*e*f_2*h_1*p_3^3*v^2 + e*f_1*j*p_3^2*v^3 + 3*e*f_1*j*p_3^3*v^2 + e*f_1*j^2*p_3^3*v + f_1*f_2^2*h_1*p_3^3*x + e*h_1*j*p_3^2*v^3 + 2*e*h_1*j*p_3^3*v^2 + f_1*h_1*j^2*p_3^3*x + e*f_2*p_3^2*p_4*v^3 + 3*e*f_2*p_3^3*p_4*v^2 + e*f_2^2*p_3^3*p_4*v + f_1*f_2^2*p_3^3*p_4*x + e*j*p_3^2*p_4*v^3 + 3*e*j*p_3^3*p_4*v^2 + e*j^2*p_3^3*p_4*v - f_2*g_2*p_3^4*p_4^2*x + f_2^2*h_1*p_3^3*p_4*x + f_1*j^2*p_3^3*p_4*x + 2*f_2*j*p_3^3*p_4^2*x + h_1*j^2*p_3^3*p_4*x + f_1*h_1*p_3^2*v^3*x + 3*f_1*h_1*p_3^3*v^2*x - e*p_3^4*p_4^2*v*x + 2*h_2*p_3^4*p_4^2*s_2*x + f_1*p_3^2*p_4*v^3*x + 3*f_1*p_3^3*p_4*v^2*x + f_2*p_3*p_4^2*v^3*x + 5*f_2*p_3^3*p_4^2*v*x + h_1*p_3^2*p_4*v^3*x + 3*h_1*p_3^3*p_4*v^2*x + j*p_3*p_4^2*v^3*x + 5*j*p_3^3*p_4^2*v*x + e*f_1*f_2^2*p_3^2*v^2 + e*f_1*j^2*p_3^2*v^2 + e*f_2^2*p_3^2*p_4*v^2 + e*j^2*p_3^2*p_4*v^2 - f_2^2*g_2*p_3^3*p_4^2*x - e*p_3^2*p_4^2*v^3*x - 2*e*p_3^3*p_4^2*v^2*x + 4*f_2*p_3^2*p_4^2*v^2*x + f_2^2*p_3*p_4^2*v^2*x + 2*f_2^2*p_3^2*p_4^2*v*x + 4*j*p_3^2*p_4^2*v^2*x + j^2*p_3*p_4^2*v^2*x + 2*j^2*p_3^2*p_4^2*v*x + 2*e*f_1*f_2*p_3^4*v - e*f_1*g_1*p_3^5*v + e*f_2*h_1*p_3^4*v + 2*e*f_1*j*p_3^4*v + 2*f_1*f_2*h_1*p_3^4*x + e*h_1*j*p_3^4*v + 2*f_1*h_1*j*p_3^4*x + 
                                           2*e*f_2*p_3^4*p_4*v + 2*f_1*f_2*p_3^4*p_4*x + 2*e*j*p_3^4*p_4*v + 2*f_2*h_1*p_3^4*p_4*x + 2*f_1*j*p_3^4*p_4*x + 2*h_1*j*p_3^4*p_4*x + 3*f_1*h_1*p_3^4*v*x + 3*f_1*p_3^4*p_4*v*x + 3*h_1*p_3^4*p_4*v*x - e*f_1*g_1*j^2*p_3^2*v^2 - e*f_2^2*g_1*p_3^2*p_4*v^2 - e*g_1*j^2*p_3^2*p_4*v^2 + e*f_1*h_2^2*p_3^3*s_2^2*v + e*h_1*h_2^2*p_3^3*s_2^2*v + f_1*h_1*h_2^2*p_3^3*s_2^2*x + e*h_2^2*p_3^3*p_4*s_2^2*v - 3*e*f_2*p_3^2*p_4^2*v^2*x - e*f_2^2*p_3*p_4^2*v^2*x - e*f_2^2*p_3^2*p_4^2*v*x + f_1*h_2^2*p_3^3*p_4*s_2^2*x + 2*f_2^2*h_2*p_3^2*p_4^2*s_2*x - 3*f_2*g_2*p_3^2*p_4^2*v^2*x - f_2^2*g_2*p_3*p_4^2*v^2*x - 2*f_2^2*g_2*p_3^2*p_4^2*v*x + h_1*h_2^2*p_3^3*p_4*s_2^2*x - 3*e*j*p_3^2*p_4^2*v^2*x - e*j^2*p_3*p_4^2*v^2*x - e*j^2*p_3^2*p_4^2*v*x + h_2*j^2*p_3^2*p_4^2*s_2*x + f_2^2*h_2*p_4^2*s_2*v^2*x + 4*h_2*p_3^2*p_4^2*s_2*v^2*x - 2*e*f_1*f_2*g_1*p_3^4*v + 2*e*f_1*f_2*j*p_3^3*v - 2*e*f_1*g_1*j*p_3^4*v - f_1*f_2*g_2*h_1*p_3^4*x + 2*f_1*f_2*h_1*j*p_3^3*x - e*f_2*g_1*p_3^4*p_4*v + 2*e*f_2*j*p_3^3*p_4*v - f_1*f_2*g_2*p_3^4*p_4*x - e*g_1*j*p_3^4*p_4*v + 2*e*f_1*h_2*p_3^4*s_2*v - f_2*g_2*h_1*p_3^4*p_4*x + 2*e*h_1*h_2*p_3^4*s_2*v + 2*f_1*f_2*j*p_3^3*p_4*x + 2*f_2*h_1*j*p_3^3*p_4*x + 2*f_1*h_1*h_2*p_3^4*s_2*x + f_1*f_2*h_1*p_3*v^3*x + 5*f_1*f_2*h_1*p_3^3*v*x + f_1*h_1*j*p_3*v^3*x + 5*f_1*h_1*j*p_3^3*v*x + 2*e*h_2*p_3^4*p_4*s_2*v - e*f_1*p_3^4*p_4*v*x + 2*f_1*h_2*p_3^4*p_4*s_2*x + f_1*f_2*p_3*p_4*v^3*x + 5*f_1*f_2*p_3^3*p_4*v*x - e*h_1*p_3^4*p_4*v*x + 2*h_1*h_2*p_3^4*p_4*s_2*x + f_2*h_1*p_3*p_4*v^3*x + 5*f_2*h_1*p_3^3*p_4*v*x + f_1*j*p_3*p_4*v^3*x + 5*f_1*j*p_3^3*p_4*v*x + h_1*j*p_3*p_4*v^3*x + 5*h_1*j*p_3^3*p_4*v*x + e*f_1*h_2^2*p_3^2*s_2^2*v^2 + e*h_1*h_2^2*p_3^2*s_2^2*v^2 + e*h_2^2*p_3^2*p_4*s_2^2*v^2 + 
                                           2*f_2*h_2^2*p_3^2*p_4^2*s_2^2*x + f_2^2*h_2^2*p_3*p_4^2*s_2^2*x + h_2^2*j*p_3^2*p_4^2*s_2^2*x + f_2*h_2^2*p_4^2*s_2^2*v^2*x + f_2^2*h_2^2*p_4^2*s_2^2*v*x + h_2^2*p_3*p_4^2*s_2^2*v^2*x + 2*h_2^2*p_3^2*p_4^2*s_2^2*v*x - e*f_1*f_2*g_1*p_3^2*v^3 - 3*e*f_1*f_2*g_1*p_3^3*v^2 - e*f_1*f_2^2*g_1*p_3^3*v + 2*e*f_1*f_2*j*p_3^2*v^2 - e*f_1*g_1*j*p_3^2*v^3 - 3*e*f_1*g_1*j*p_3^3*v^2 - e*f_1*g_1*j^2*p_3^3*v - f_1*f_2^2*g_2*h_1*p_3^3*x - e*f_2*g_1*p_3^3*p_4*v^2 - e*f_2^2*g_1*p_3^3*p_4*v + 2*e*f_2*j*p_3^2*p_4*v^2 - f_1*f_2^2*g_2*p_3^3*p_4*x - e*g_1*j*p_3^3*p_4*v^2 - e*g_1*j^2*p_3^3*p_4*v + e*f_1*h_2*p_3^2*s_2*v^3 + 3*e*f_1*h_2*p_3^3*s_2*v^2 - f_2^2*g_2*h_1*p_3^3*p_4*x + e*h_1*h_2*p_3^2*s_2*v^3 + 3*e*h_1*h_2*p_3^3*s_2*v^2 - f_2*g_2*j*p_3^3*p_4^2*x + 4*f_1*f_2*h_1*p_3^2*v^2*x + f_1*f_2^2*h_1*p_3*v^2*x + 2*f_1*f_2^2*h_1*p_3^2*v*x + 4*f_1*h_1*j*p_3^2*v^2*x + f_1*h_1*j^2*p_3*v^2*x + 2*f_1*h_1*j^2*p_3^2*v*x + e*h_2*p_3^2*p_4*s_2*v^3 + 3*e*h_2*p_3^3*p_4*s_2*v^2 - e*f_1*p_3^2*p_4*v^3*x - 2*e*f_1*p_3^3*p_4*v^2*x - e*f_2*p_3*p_4^2*v^3*x - 2*e*f_2*p_3^3*p_4^2*v*x + 4*f_2*h_2*p_3^3*p_4^2*s_2*x + 4*f_1*f_2*p_3^2*p_4*v^2*x + f_1*f_2^2*p_3*p_4*v^2*x + 2*f_1*f_2^2*p_3^2*p_4*v*x - e*h_1*p_3^2*p_4*v^3*x - 2*e*h_1*p_3^3*p_4*v^2*x - f_2*g_2*p_3*p_4^2*v^3*x - 3*f_2*g_2*p_3^3*p_4^2*v*x + 4*f_2*h_1*p_3^2*p_4*v^2*x + f_2^2*h_1*p_3*p_4*v^2*x + 2*f_2^2*h_1*p_3^2*p_4*v*x - e*j*p_3*p_4^2*v^3*x - 2*e*j*p_3^3*p_4^2*v*x + 3*h_2*j*p_3^3*p_4^2*s_2*x + 4*f_1*j*p_3^2*p_4*v^2*x + f_1*j^2*p_3*p_4*v^2*x + 2*f_1*j^2*p_3^2*p_4*v*x + 2*f_2*j*p_3*p_4^2*v^2*x + 4*f_2*j*p_3^2*p_4^2*v*x + f_2*h_2*p_4^2*s_2*v^3*x + 4*h_1*j*p_3^2*p_4*v^2*x + h_1*j^2*p_3*p_4*v^2*x + 2*h_1*j^2*p_3^2*p_4*v*x + h_2*p_3*p_4^2*s_2*v^3*x + 5*h_2*p_3^3*p_4^2*s_2*v*x - 
                                           e*f_1*f_2^2*g_1*p_3^2*v^2 - 2*e*f_1*f_2*g_1*j*p_3^2*v^2 - 2*e*f_2*g_1*j*p_3^2*p_4*v^2 + 4*e*f_1*f_2*h_2*p_3^2*s_2*v^2 + e*f_1*f_2^2*h_2*p_3*s_2*v^2 + 2*e*f_1*f_2^2*h_2*p_3^2*s_2*v - e*f_1*g_1*h_2*p_3^2*s_2*v^3 - 3*e*f_1*g_1*h_2*p_3^3*s_2*v^2 + 3*e*f_2*h_1*h_2*p_3^2*s_2*v^2 + 4*e*f_1*h_2*j*p_3^2*s_2*v^2 + e*f_1*h_2*j^2*p_3*s_2*v^2 + e*f_1*h_2*j^2*p_3^2*s_2*v + 2*f_1*f_2^2*h_1*h_2*p_3^2*s_2*x + 3*e*h_1*h_2*j*p_3^2*s_2*v^2 - 3*f_1*f_2*g_2*h_1*p_3^2*v^2*x - f_1*f_2^2*g_2*h_1*p_3*v^2*x - 2*f_1*f_2^2*g_2*h_1*p_3^2*v*x + f_1*h_1*h_2*j^2*p_3^2*s_2*x + 4*e*f_2*h_2*p_3^2*p_4*s_2*v^2 + e*f_2^2*h_2*p_3*p_4*s_2*v^2 + 2*e*f_2^2*h_2*p_3^2*p_4*s_2*v + f_1*f_2^2*h_1*h_2*s_2*v^2*x - 3*e*f_1*f_2*p_3^2*p_4*v^2*x - e*f_1*f_2^2*p_3*p_4*v^2*x - e*f_1*f_2^2*p_3^2*p_4*v*x + 2*f_1*f_2^2*h_2*p_3^2*p_4*s_2*x + 4*e*h_2*j*p_3^2*p_4*s_2*v^2 + e*h_2*j^2*p_3*p_4*s_2*v^2 + e*h_2*j^2*p_3^2*p_4*s_2*v + e*f_2*g_2*p_3*p_4^2*v^3*x + 2*e*f_2*g_2*p_3^3*p_4^2*v*x - 2*f_2*g_2*h_2*p_3^3*p_4^2*s_2*x - 2*e*f_2*h_1*p_3^2*p_4*v^2*x - 3*f_1*f_2*g_2*p_3^2*p_4*v^2*x - f_1*f_2^2*g_2*p_3*p_4*v^2*x - 2*f_1*f_2^2*g_2*p_3^2*p_4*v*x + 2*f_2^2*h_1*h_2*p_3^2*p_4*s_2*x - 3*e*f_1*j*p_3^2*p_4*v^2*x - e*f_1*j^2*p_3*p_4*v^2*x - e*f_1*j^2*p_3^2*p_4*v*x - 2*e*f_2*j*p_3*p_4^2*v^2*x - 2*e*f_2*j*p_3^2*p_4^2*v*x + f_1*h_2*j^2*p_3^2*p_4*s_2*x - 3*f_2*g_2*h_1*p_3^2*p_4*v^2*x - f_2^2*g_2*h_1*p_3*p_4*v^2*x - 2*f_2^2*g_2*h_1*p_3^2*p_4*v*x + 3*f_2*h_2*j*p_3^2*p_4^2*s_2*x - e*f_1*h_1*p_3^2*s_1*v^3*x - 2*e*f_1*h_1*p_3^3*s_1*v^2*x - e*f_2*h_2*p_4^2*s_2*v^3*x - 2*e*h_1*j*p_3^2*p_4*v^2*x - f_2*g_2*j*p_3*p_4^2*v^2*x - 2*f_2*g_2*j*p_3^2*p_4^2*v*x + f_1*f_2^2*h_2*p_4*s_2*v^2*x + h_1*h_2*j^2*p_3^2*p_4*s_2*x - f_2*g_2*h_2*p_4^2*s_2*v^3*x + 4*f_1*h_1*h_2*p_3^2*s_2*v^2*x + 
                                           f_2^2*h_1*h_2*p_4*s_2*v^2*x + f_2*h_2*j*p_4^2*s_2*v^2*x - e*h_2*p_3*p_4^2*s_2*v^3*x - 2*e*h_2*p_3^3*p_4^2*s_2*v*x + 4*f_1*h_2*p_3^2*p_4*s_2*v^2*x + 5*f_2*h_2*p_3*p_4^2*s_2*v^2*x + 8*f_2*h_2*p_3^2*p_4^2*s_2*v*x + 3*f_2^2*h_2*p_3*p_4^2*s_2*v*x + 4*h_1*h_2*p_3^2*p_4*s_2*v^2*x + 2*h_2*j*p_3*p_4^2*s_2*v^2*x + 5*h_2*j*p_3^2*p_4^2*s_2*v*x + h_2*j^2*p_3*p_4^2*s_2*v*x + e*f_1*f_2*h_2^2*p_3*s_2^2*v^2 + 2*e*f_1*f_2*h_2^2*p_3^2*s_2^2*v + e*f_1*f_2^2*h_2^2*p_3*s_2^2*v - e*f_1*g_1*h_2^2*p_3^3*s_2^2*v + e*f_2*h_1*h_2^2*p_3*s_2^2*v^2 + e*f_2*h_1*h_2^2*p_3^2*s_2^2*v + e*f_1*h_2^2*j*p_3*s_2^2*v^2 + e*f_1*h_2^2*j*p_3^2*s_2^2*v + 2*f_1*f_2*h_1*h_2^2*p_3^2*s_2^2*x + f_1*f_2^2*h_1*h_2^2*p_3*s_2^2*x + e*h_1*h_2^2*j*p_3*s_2^2*v^2 + e*h_1*h_2^2*j*p_3^2*s_2^2*v + f_1*h_1*h_2^2*j*p_3^2*s_2^2*x + e*f_2*h_2^2*p_3*p_4*s_2^2*v^2 + 2*e*f_2*h_2^2*p_3^2*p_4*s_2^2*v + e*f_2^2*h_2^2*p_3*p_4*s_2^2*v + f_1*f_2*h_1*h_2^2*s_2^2*v^2*x + f_1*f_2^2*h_1*h_2^2*s_2^2*v*x + 2*f_1*f_2*h_2^2*p_3^2*p_4*s_2^2*x + f_1*f_2^2*h_2^2*p_3*p_4*s_2^2*x + 3*e*f_2*g_2*p_3^2*p_4^2*v^2*x + e*f_2^2*g_2*p_3*p_4^2*v^2*x + e*f_2^2*g_2*p_3^2*p_4^2*v*x + e*h_2^2*j*p_3*p_4*s_2^2*v^2 + e*h_2^2*j*p_3^2*p_4*s_2^2*v - 2*f_2^2*g_2*h_2*p_3^2*p_4^2*s_2*x + 2*f_2*h_1*h_2^2*p_3^2*p_4*s_2^2*x + f_2^2*h_1*h_2^2*p_3*p_4*s_2^2*x + f_1*h_2^2*j*p_3^2*p_4*s_2^2*x + f_2*h_2^2*j*p_3*p_4^2*s_2^2*x - e*f_2^2*h_2*p_4^2*s_2*v^2*x + f_1*f_2*h_2^2*p_4*s_2^2*v^2*x + f_1*f_2^2*h_2^2*p_4*s_2^2*v*x + h_1*h_2^2*j*p_3^2*p_4*s_2^2*x - f_2^2*g_2*h_2*p_4^2*s_2*v^2*x + f_1*h_1*h_2^2*p_3*s_2^2*v^2*x + 2*f_1*h_1*h_2^2*p_3^2*s_2^2*v*x + f_2*h_1*h_2^2*p_4*s_2^2*v^2*x + f_2^2*h_1*h_2^2*p_4*s_2^2*v*x + f_2*h_2^2*j*p_4^2*s_2^2*v*x - 3*e*h_2*p_3^2*p_4^2*s_2*v^2*x + f_1*h_2^2*p_3*p_4*s_2^2*v^2*x + 
                                           2*f_1*h_2^2*p_3^2*p_4*s_2^2*v*x + 3*f_2*h_2^2*p_3*p_4^2*s_2^2*v*x + h_1*h_2^2*p_3*p_4*s_2^2*v^2*x + 2*h_1*h_2^2*p_3^2*p_4*s_2^2*v*x + h_2^2*j*p_3*p_4^2*s_2^2*v*x - 2*e*f_1*f_2*g_1*j*p_3^3*v - f_1*f_2*g_2*h_1*j*p_3^3*x - 2*e*f_2*g_1*j*p_3^3*p_4*v + e*f_1*f_2*h_2*p_3*s_2*v^3 + 4*e*f_1*f_2*h_2*p_3^3*s_2*v - 2*e*f_1*g_1*h_2*p_3^4*s_2*v + e*f_2*h_1*h_2*p_3*s_2*v^3 + 2*e*f_2*h_1*h_2*p_3^3*s_2*v - f_1*f_2*g_2*j*p_3^3*p_4*x + e*f_1*h_2*j*p_3*s_2*v^3 + 3*e*f_1*h_2*j*p_3^3*s_2*v - f_2*g_2*h_1*j*p_3^3*p_4*x + 4*f_1*f_2*h_1*h_2*p_3^3*s_2*x + e*h_1*h_2*j*p_3*s_2*v^3 + 2*e*h_1*h_2*j*p_3^3*s_2*v - f_1*f_2*g_2*h_1*p_3*v^3*x - 3*f_1*f_2*g_2*h_1*p_3^3*v*x + 3*f_1*h_1*h_2*j*p_3^3*s_2*x + 2*f_1*f_2*h_1*j*p_3*v^2*x + 4*f_1*f_2*h_1*j*p_3^2*v*x + e*f_2*h_2*p_3*p_4*s_2*v^3 + 4*e*f_2*h_2*p_3^3*p_4*s_2*v + f_1*f_2*h_1*h_2*s_2*v^3*x - e*f_1*f_2*p_3*p_4*v^3*x - 2*e*f_1*f_2*p_3^3*p_4*v*x + 4*f_1*f_2*h_2*p_3^3*p_4*s_2*x + e*h_2*j*p_3*p_4*s_2*v^3 + 3*e*h_2*j*p_3^3*p_4*s_2*v - e*f_2*h_1*p_3*p_4*v^3*x - e*f_2*h_1*p_3^3*p_4*v*x - f_1*f_2*g_2*p_3*p_4*v^3*x - 3*f_1*f_2*g_2*p_3^3*p_4*v*x + 4*f_2*h_1*h_2*p_3^3*p_4*s_2*x - e*f_1*j*p_3*p_4*v^3*x - 2*e*f_1*j*p_3^3*p_4*v*x + 3*f_1*h_2*j*p_3^3*p_4*s_2*x - f_2*g_2*h_1*p_3*p_4*v^3*x - 3*f_2*g_2*h_1*p_3^3*p_4*v*x - e*f_1*h_1*p_3^4*s_1*v*x + 2*f_1*f_2*j*p_3*p_4*v^2*x + 4*f_1*f_2*j*p_3^2*p_4*v*x - e*h_1*j*p_3*p_4*v^3*x - e*h_1*j*p_3^3*p_4*v*x + f_1*f_2*h_2*p_4*s_2*v^3*x + 3*h_1*h_2*j*p_3^3*p_4*s_2*x + 2*f_2*h_1*j*p_3*p_4*v^2*x + 4*f_2*h_1*j*p_3^2*p_4*v*x + f_1*h_1*h_2*p_3*s_2*v^3*x + 5*f_1*h_1*h_2*p_3^3*s_2*v*x + f_2*h_1*h_2*p_4*s_2*v^3*x + f_1*h_2*p_3*p_4*s_2*v^3*x + 5*f_1*h_2*p_3^3*p_4*s_2*v*x + h_1*h_2*p_3*p_4*s_2*v^3*x + 5*h_1*h_2*p_3^3*p_4*s_2*v*x - e*f_1*g_1*h_2^2*p_3^2*s_2^2*v^2 - 
                                           f_2*g_2*h_2^2*p_3^2*p_4^2*s_2^2*x - f_2^2*g_2*h_2^2*p_3*p_4^2*s_2^2*x - e*f_2*h_2^2*p_4^2*s_2^2*v^2*x - e*f_2^2*h_2^2*p_4^2*s_2^2*v*x - f_2*g_2*h_2^2*p_4^2*s_2^2*v^2*x - f_2^2*g_2*h_2^2*p_4^2*s_2^2*v*x - e*h_2^2*p_3*p_4^2*s_2^2*v^2*x - e*h_2^2*p_3^2*p_4^2*s_2^2*v*x - e*f_1*f_2*g_1*h_2*p_3*s_2*v^3 - 4*e*f_1*f_2*g_1*h_2*p_3^3*s_2*v + 2*e*f_1*f_2*h_2*j*p_3*s_2*v^2 + 3*e*f_1*f_2*h_2*j*p_3^2*s_2*v - e*f_1*g_1*h_2*j*p_3*s_2*v^3 - 3*e*f_1*g_1*h_2*j*p_3^3*s_2*v + e*f_1*f_2*g_2*h_1*p_3^3*v*x - 2*f_1*f_2*g_2*h_1*h_2*p_3^3*s_2*x + 3*f_1*f_2*h_1*h_2*j*p_3^2*s_2*x - f_1*f_2*g_2*h_1*j*p_3*v^2*x - 2*f_1*f_2*g_2*h_1*j*p_3^2*v*x - 2*e*f_2*g_1*h_2*p_3^3*p_4*s_2*v - f_1*f_2*g_2*h_1*h_2*s_2*v^3*x + e*f_1*f_2*g_2*p_3*p_4*v^3*x + 2*e*f_1*f_2*g_2*p_3^3*p_4*v*x + 2*e*f_2*h_2*j*p_3*p_4*s_2*v^2 + 3*e*f_2*h_2*j*p_3^2*p_4*s_2*v - 2*f_1*f_2*g_2*h_2*p_3^3*p_4*s_2*x + f_1*f_2*h_1*h_2*j*s_2*v^2*x - e*g_1*h_2*j*p_3^3*p_4*s_2*v + e*f_2*g_2*h_1*p_3*p_4*v^3*x + 2*e*f_2*g_2*h_1*p_3^3*p_4*v*x - 2*e*f_1*f_2*j*p_3*p_4*v^2*x - 2*e*f_1*f_2*j*p_3^2*p_4*v*x - 2*f_2*g_2*h_1*h_2*p_3^3*p_4*s_2*x + 3*f_1*f_2*h_2*j*p_3^2*p_4*s_2*x - e*f_1*f_2*h_1*p_3*s_1*v^3*x - 2*e*f_1*f_2*h_1*p_3^3*s_1*v*x - e*f_1*f_2*h_2*p_4*s_2*v^3*x - f_1*f_2*g_2*j*p_3*p_4*v^2*x - 2*f_1*f_2*g_2*j*p_3^2*p_4*v*x + 3*f_2*h_1*h_2*j*p_3^2*p_4*s_2*x - e*f_2*h_1*h_2*p_4*s_2*v^3*x - f_1*f_2*g_2*h_2*p_4*s_2*v^3*x - f_2*g_2*h_1*j*p_3*p_4*v^2*x - 2*f_2*g_2*h_1*j*p_3^2*p_4*v*x + 5*f_1*f_2*h_1*h_2*p_3*s_2*v^2*x + 8*f_1*f_2*h_1*h_2*p_3^2*s_2*v*x + 3*f_1*f_2^2*h_1*h_2*p_3*s_2*v*x - e*f_1*h_1*j*p_3*s_1*v^3*x - 2*e*f_1*h_1*j*p_3^3*s_1*v*x - f_2*g_2*h_1*h_2*p_4*s_2*v^3*x + f_1*f_2*h_2*j*p_4*s_2*v^2*x + 2*f_1*h_1*h_2*j*p_3*s_2*v^2*x + 5*f_1*h_1*h_2*j*p_3^2*s_2*v*x + 
                                           f_1*h_1*h_2*j^2*p_3*s_2*v*x + f_2*h_1*h_2*j*p_4*s_2*v^2*x - e*f_2*h_1*p_3^3*p_4*s_1*v*x - e*f_1*h_2*p_3*p_4*s_2*v^3*x - 2*e*f_1*h_2*p_3^3*p_4*s_2*v*x + 5*f_1*f_2*h_2*p_3*p_4*s_2*v^2*x + 8*f_1*f_2*h_2*p_3^2*p_4*s_2*v*x + 3*f_1*f_2^2*h_2*p_3*p_4*s_2*v*x - e*h_1*h_2*p_3*p_4*s_2*v^3*x - 2*e*h_1*h_2*p_3^3*p_4*s_2*v*x + 5*f_2*h_1*h_2*p_3*p_4*s_2*v^2*x + 8*f_2*h_1*h_2*p_3^2*p_4*s_2*v*x + 3*f_2^2*h_1*h_2*p_3*p_4*s_2*v*x - e*h_1*j*p_3^3*p_4*s_1*v*x + 2*f_1*h_2*j*p_3*p_4*s_2*v^2*x + 5*f_1*h_2*j*p_3^2*p_4*s_2*v*x + f_1*h_2*j^2*p_3*p_4*s_2*v*x + 4*f_2*h_2*j*p_3*p_4^2*s_2*v*x + 2*h_1*h_2*j*p_3*p_4*s_2*v^2*x + 5*h_1*h_2*j*p_3^2*p_4*s_2*v*x + h_1*h_2*j^2*p_3*p_4*s_2*v*x + e*f_2*g_2*h_2^2*p_4^2*s_2^2*v^2*x + e*f_2^2*g_2*h_2^2*p_4^2*s_2^2*v*x - 4*e*f_1*f_2*g_1*h_2*p_3^2*s_2*v^2 - e*f_1*f_2^2*g_1*h_2*p_3*s_2*v^2 - 2*e*f_1*f_2^2*g_1*h_2*p_3^2*s_2*v + e*f_1*f_2*h_2^2*j*p_3*s_2^2*v - 4*e*f_1*g_1*h_2*j*p_3^2*s_2*v^2 - e*f_1*g_1*h_2*j^2*p_3*s_2*v^2 - e*f_1*g_1*h_2*j^2*p_3^2*s_2*v + e*f_1*f_2*g_2*h_1*p_3^2*v^2*x - 2*f_1*f_2^2*g_2*h_1*h_2*p_3^2*s_2*x + f_1*f_2*h_1*h_2^2*j*p_3*s_2^2*x - e*f_2*g_1*h_2*p_3^2*p_4*s_2*v^2 - e*f_2^2*g_1*h_2*p_3*p_4*s_2*v^2 - 2*e*f_2^2*g_1*h_2*p_3^2*p_4*s_2*v - f_1*f_2^2*g_2*h_1*h_2*s_2*v^2*x + 3*e*f_1*f_2*g_2*p_3^2*p_4*v^2*x + e*f_1*f_2^2*g_2*p_3*p_4*v^2*x + e*f_1*f_2^2*g_2*p_3^2*p_4*v*x + e*f_2*h_2^2*j*p_3*p_4*s_2^2*v - 2*f_1*f_2^2*g_2*h_2*p_3^2*p_4*s_2*x + f_1*f_2*h_1*h_2^2*j*s_2^2*v*x - e*g_1*h_2*j*p_3^2*p_4*s_2*v^2 - e*g_1*h_2*j^2*p_3*p_4*s_2*v^2 - e*g_1*h_2*j^2*p_3^2*p_4*s_2*v + 3*e*f_2*g_2*h_1*p_3^2*p_4*v^2*x - 2*f_2^2*g_2*h_1*h_2*p_3^2*p_4*s_2*x + f_1*f_2*h_2^2*j*p_3*p_4*s_2^2*x + e*f_2*g_2*j*p_3*p_4^2*v^2*x + e*f_2*g_2*j*p_3^2*p_4^2*v*x - 3*e*f_1*f_2*h_1*p_3^2*s_1*v^2*x - 
                                           e*f_1*f_2^2*h_1*p_3*s_1*v^2*x - e*f_1*f_2^2*h_1*p_3^2*s_1*v*x - e*f_1*f_2^2*h_2*p_4*s_2*v^2*x - 2*f_2*g_2*h_2*j*p_3^2*p_4^2*s_2*x + e*f_2*g_2*h_2*p_4^2*s_2*v^3*x + f_2*h_1*h_2^2*j*p_3*p_4*s_2^2*x - f_1*f_2^2*g_2*h_2*p_4*s_2*v^2*x + 3*f_1*f_2*h_1*h_2^2*p_3*s_2^2*v*x - 3*e*f_1*h_1*j*p_3^2*s_1*v^2*x - e*f_1*h_1*j^2*p_3*s_1*v^2*x - e*f_1*h_1*j^2*p_3^2*s_1*v*x - e*f_2*h_2*j*p_4^2*s_2*v^2*x - f_2^2*g_2*h_1*h_2*p_4*s_2*v^2*x + f_1*f_2*h_2^2*j*p_4*s_2^2*v*x - f_2*g_2*h_2*j*p_4^2*s_2*v^2*x + f_1*h_1*h_2^2*j*p_3*s_2^2*v*x + f_2*h_1*h_2^2*j*p_4*s_2^2*v*x - e*f_2*h_1*p_3^2*p_4*s_1*v^2*x - e*f_2^2*h_1*p_3*p_4*s_1*v^2*x - e*f_2^2*h_1*p_3^2*p_4*s_1*v*x - 3*e*f_1*h_2*p_3^2*p_4*s_2*v^2*x - 4*e*f_2*h_2*p_3*p_4^2*s_2*v^2*x - 4*e*f_2*h_2*p_3^2*p_4^2*s_2*v*x - 2*e*f_2^2*h_2*p_3*p_4^2*s_2*v*x + 3*f_1*f_2*h_2^2*p_3*p_4*s_2^2*v*x - 3*e*h_1*h_2*p_3^2*p_4*s_2*v^2*x - 4*f_2*g_2*h_2*p_3*p_4^2*s_2*v^2*x - 5*f_2*g_2*h_2*p_3^2*p_4^2*s_2*v*x - 3*f_2^2*g_2*h_2*p_3*p_4^2*s_2*v*x + 3*f_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - e*h_1*j*p_3^2*p_4*s_1*v^2*x - e*h_1*j^2*p_3*p_4*s_1*v^2*x - e*h_1*j^2*p_3^2*p_4*s_1*v*x - e*h_2*j*p_3*p_4^2*s_2*v^2*x - e*h_2*j*p_3^2*p_4^2*s_2*v*x + f_1*h_2^2*j*p_3*p_4*s_2^2*v*x + h_1*h_2^2*j*p_3*p_4*s_2^2*v*x - e*f_1*f_2*g_1*h_2^2*p_3*s_2^2*v^2 - 2*e*f_1*f_2*g_1*h_2^2*p_3^2*s_2^2*v - e*f_1*f_2^2*g_1*h_2^2*p_3*s_2^2*v - e*f_1*g_1*h_2^2*j*p_3*s_2^2*v^2 - e*f_1*g_1*h_2^2*j*p_3^2*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*p_3^2*s_2^2*x - f_1*f_2^2*g_2*h_1*h_2^2*p_3*s_2^2*x - e*f_2*g_1*h_2^2*p_3^2*p_4*s_2^2*v - e*f_2^2*g_1*h_2^2*p_3*p_4*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*s_2^2*v^2*x - f_1*f_2^2*g_2*h_1*h_2^2*s_2^2*v*x - f_1*f_2*g_2*h_2^2*p_3^2*p_4*s_2^2*x - f_1*f_2^2*g_2*h_2^2*p_3*p_4*s_2^2*x - f_2*g_2*h_1*h_2^2*p_3^2*p_4*s_2^2*x - 
                                           f_2^2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*x - e*f_1*f_2*h_2^2*p_4*s_2^2*v^2*x - e*f_1*f_2^2*h_2^2*p_4*s_2^2*v*x - f_2*g_2*h_2^2*j*p_3*p_4^2*s_2^2*x + e*f_2^2*g_2*h_2*p_4^2*s_2*v^2*x - e*f_2*h_1*h_2^2*p_4*s_2^2*v^2*x - f_1*f_2*g_2*h_2^2*p_4*s_2^2*v^2*x - f_1*f_2^2*g_2*h_2^2*p_4*s_2^2*v*x - e*f_2*h_2^2*j*p_4^2*s_2^2*v*x - f_2*g_2*h_1*h_2^2*p_4*s_2^2*v^2*x - f_2^2*g_2*h_1*h_2^2*p_4*s_2^2*v*x - f_2*g_2*h_2^2*j*p_4^2*s_2^2*v*x - e*f_1*h_2^2*p_3*p_4*s_2^2*v^2*x - e*f_1*h_2^2*p_3^2*p_4*s_2^2*v*x - 2*e*f_2*h_2^2*p_3*p_4^2*s_2^2*v*x - e*h_1*h_2^2*p_3*p_4*s_2^2*v^2*x - e*h_1*h_2^2*p_3^2*p_4*s_2^2*v*x - 2*f_2*g_2*h_2^2*p_3*p_4^2*s_2^2*v*x + 4*f_1*f_2*h_1*h_2*j*p_3*s_2*v*x + 4*f_1*f_2*h_2*j*p_3*p_4*s_2*v*x + 4*f_2*h_1*h_2*j*p_3*p_4*s_2*v*x + e*f_1*f_2*g_2*h_2^2*p_4*s_2^2*v^2*x + e*f_1*f_2^2*g_2*h_2^2*p_4*s_2^2*v*x + e*f_2*g_2*h_1*h_2^2*p_4*s_2^2*v^2*x + e*f_2*g_2*h_2^2*j*p_4^2*s_2^2*v*x - e*f_1*f_2*h_1*h_2^2*s_1*s_2^2*v^2*x - e*f_1*f_2^2*h_1*h_2^2*s_1*s_2^2*v*x + 2*e*f_2*g_2*h_2^2*p_3*p_4^2*s_2^2*v*x - e*f_1*h_1*h_2^2*p_3*s_1*s_2^2*v^2*x - e*f_1*h_1*h_2^2*p_3^2*s_1*s_2^2*v*x - e*f_2^2*h_1*h_2^2*p_4*s_1*s_2^2*v*x - 2*e*f_1*f_2*g_1*h_2*j*p_3*s_2*v^2 - 3*e*f_1*f_2*g_1*h_2*j*p_3^2*s_2*v - 2*f_1*f_2*g_2*h_1*h_2*j*p_3^2*s_2*x - 2*e*f_2*g_1*h_2*j*p_3*p_4*s_2*v^2 - 3*e*f_2*g_1*h_2*j*p_3^2*p_4*s_2*v - f_1*f_2*g_2*h_1*h_2*j*s_2*v^2*x + e*f_1*f_2*g_2*j*p_3*p_4*v^2*x + e*f_1*f_2*g_2*j*p_3^2*p_4*v*x - 2*f_1*f_2*g_2*h_2*j*p_3^2*p_4*s_2*x + e*f_1*f_2*g_2*h_1*p_3*s_1*v^3*x + e*f_1*f_2*g_2*h_1*p_3^3*s_1*v*x + e*f_1*f_2*g_2*h_2*p_4*s_2*v^3*x - 2*f_2*g_2*h_1*h_2*j*p_3^2*p_4*s_2*x + e*f_2*g_2*h_1*h_2*p_4*s_2*v^3*x - 2*e*f_1*f_2*h_1*j*p_3*s_1*v^2*x - 2*e*f_1*f_2*h_1*j*p_3^2*s_1*v*x - e*f_1*f_2*h_2*j*p_4*s_2*v^2*x - 4*f_1*f_2*g_2*h_1*h_2*p_3*s_2*v^2*x - 
                                           5*f_1*f_2*g_2*h_1*h_2*p_3^2*s_2*v*x - 3*f_1*f_2^2*g_2*h_1*h_2*p_3*s_2*v*x - e*f_1*f_2*h_1*h_2*s_1*s_2*v^3*x + e*f_1*h_1*h_2*j*p_3*s_2*v^2*x + e*f_1*h_1*h_2*j*p_3^2*s_2*v*x - f_1*f_2*g_2*h_2*j*p_4*s_2*v^2*x - f_2*g_2*h_1*h_2*j*p_4*s_2*v^2*x - 4*e*f_1*f_2*h_2*p_3*p_4*s_2*v^2*x - 4*e*f_1*f_2*h_2*p_3^2*p_4*s_2*v*x - 2*e*f_1*f_2^2*h_2*p_3*p_4*s_2*v*x - 3*e*f_2*h_1*h_2*p_3*p_4*s_2*v^2*x - 2*e*f_2*h_1*h_2*p_3^2*p_4*s_2*v*x - 4*f_1*f_2*g_2*h_2*p_3*p_4*s_2*v^2*x - 5*f_1*f_2*g_2*h_2*p_3^2*p_4*s_2*v*x - 3*f_1*f_2^2*g_2*h_2*p_3*p_4*s_2*v*x - 2*e*f_2*h_1*j*p_3*p_4*s_1*v^2*x - 2*e*f_2*h_1*j*p_3^2*p_4*s_1*v*x - e*f_1*h_2*j*p_3*p_4*s_2*v^2*x - e*f_1*h_2*j*p_3^2*p_4*s_2*v*x - 2*e*f_2*h_2*j*p_3*p_4^2*s_2*v*x - 4*f_2*g_2*h_1*h_2*p_3*p_4*s_2*v^2*x - 5*f_2*g_2*h_1*h_2*p_3^2*p_4*s_2*v*x - 3*f_2^2*g_2*h_1*h_2*p_3*p_4*s_2*v*x - e*f_1*h_1*h_2*p_3*s_1*s_2*v^3*x - 2*e*f_1*h_1*h_2*p_3^3*s_1*s_2*v*x - 3*f_2*g_2*h_2*j*p_3*p_4^2*s_2*v*x - e*f_1*f_2*g_1*h_2^2*j*p_3*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*j*p_3*s_2^2*x - e*f_1*f_2*h_1*h_2^2*j*s_2^2*v*x - e*f_2*g_1*h_2^2*j*p_3*p_4*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*j*s_2^2*v*x - f_1*f_2*g_2*h_2^2*j*p_3*p_4*s_2^2*x + 2*e*f_1*f_2*g_2*h_1*p_3^2*s_1*v^2*x + e*f_1*f_2^2*g_2*h_1*p_3*s_1*v^2*x + e*f_1*f_2^2*g_2*h_1*p_3^2*s_1*v*x + e*f_1*f_2^2*g_2*h_2*p_4*s_2*v^2*x - f_2*g_2*h_1*h_2^2*j*p_3*p_4*s_2^2*x - e*f_1*f_2*h_2^2*j*p_4*s_2^2*v*x - 2*f_1*f_2*g_2*h_1*h_2^2*p_3*s_2^2*v*x + e*f_2*g_2*h_2*j*p_4^2*s_2*v^2*x - e*f_1*f_2^2*h_1*h_2*s_1*s_2*v^2*x - e*f_2*h_1*h_2^2*j*p_4*s_2^2*v*x - f_1*f_2*g_2*h_2^2*j*p_4*s_2^2*v*x - f_2*g_2*h_1*h_2^2*j*p_4*s_2^2*v*x - 2*e*f_1*f_2*h_2^2*p_3*p_4*s_2^2*v*x + e*f_2^2*g_2*h_1*p_3*p_4*s_1*v^2*x + e*f_2^2*g_2*h_1*p_3^2*p_4*s_1*v*x + 4*e*f_2*g_2*h_2*p_3*p_4^2*s_2*v^2*x + 
                                           4*e*f_2*g_2*h_2*p_3^2*p_4^2*s_2*v*x + 2*e*f_2^2*g_2*h_2*p_3*p_4^2*s_2*v*x - e*f_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 2*f_1*f_2*g_2*h_2^2*p_3*p_4*s_2^2*v*x - 2*f_2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 3*e*f_1*h_1*h_2*p_3^2*s_1*s_2*v^2*x - e*f_2^2*h_1*h_2*p_4*s_1*s_2*v^2*x - e*f_1*f_2*h_1*h_2*j*s_1*s_2*v^2*x + 4*e*f_1*f_2*g_2*h_2*p_3*p_4*s_2*v^2*x + 4*e*f_1*f_2*g_2*h_2*p_3^2*p_4*s_2*v*x + 2*e*f_1*f_2^2*g_2*h_2*p_3*p_4*s_2*v*x + 4*e*f_2*g_2*h_1*h_2*p_3*p_4*s_2*v^2*x + 4*e*f_2*g_2*h_1*h_2*p_3^2*p_4*s_2*v*x + e*f_2*g_2*h_1*j*p_3*p_4*s_1*v^2*x + e*f_2*g_2*h_1*j*p_3^2*p_4*s_1*v*x + 2*e*f_2*g_2*h_2*j*p_3*p_4^2*s_2*v*x - 4*e*f_1*f_2*h_1*h_2*p_3*s_1*s_2*v^2*x - 4*e*f_1*f_2*h_1*h_2*p_3^2*s_1*s_2*v*x - 2*e*f_1*f_2^2*h_1*h_2*p_3*s_1*s_2*v*x - 2*e*f_1*h_1*h_2*j*p_3*s_1*s_2*v^2*x - 2*e*f_1*h_1*h_2*j*p_3^2*s_1*s_2*v*x - e*f_2*h_1*h_2*j*p_4*s_1*s_2*v^2*x - e*f_2*h_1*h_2*p_3*p_4*s_1*s_2*v^2*x - 2*e*f_2*h_1*h_2*p_3^2*p_4*s_1*s_2*v*x - 2*e*f_2^2*h_1*h_2*p_3*p_4*s_1*s_2*v*x - e*h_1*h_2*j*p_3*p_4*s_1*s_2*v^2*x - e*h_1*h_2*j*p_3^2*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*j*s_2^2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*p_3*s_2^2*v*x + e*f_1*f_2*g_2*h_2^2*j*p_4*s_2^2*v*x + e*f_1*f_2^2*g_2*h_1*h_2*s_1*s_2*v^2*x + e*f_2*g_2*h_1*h_2^2*j*p_4*s_2^2*v*x + 2*e*f_1*f_2*g_2*h_2^2*p_3*p_4*s_2^2*v*x + 2*e*f_2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 2*e*f_1*f_2*h_1*h_2^2*p_3*s_1*s_2^2*v*x + e*f_2^2*g_2*h_1*h_2*p_4*s_1*s_2*v^2*x - e*f_2*h_1*h_2^2*p_3*p_4*s_1*s_2^2*v*x - 3*f_1*f_2*g_2*h_1*h_2*j*p_3*s_2*v*x - 2*e*f_1*f_2*h_2*j*p_3*p_4*s_2*v*x - 3*f_1*f_2*g_2*h_2*j*p_3*p_4*s_2*v*x - 3*f_2*g_2*h_1*h_2*j*p_3*p_4*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*s_1*s_2^2*v^2*x + e*f_1*f_2^2*g_2*h_1*h_2^2*s_1*s_2^2*v*x + e*f_2^2*g_2*h_1*h_2^2*p_4*s_1*s_2^2*v*x + 
                                           e*f_1*f_2*g_2*h_1*h_2*p_3*s_2*v^2*x + 2*e*f_1*f_2*g_2*h_1*h_2*p_3^2*s_2*v*x + e*f_1*f_2*g_2*h_1*j*p_3*s_1*v^2*x + e*f_1*f_2*g_2*h_1*j*p_3^2*s_1*v*x + e*f_1*f_2*g_2*h_2*j*p_4*s_2*v^2*x + e*f_1*f_2*g_2*h_1*h_2*s_1*s_2*v^3*x + e*f_1*f_2*g_2*h_1*h_2*j*p_3*s_2*v*x + 2*e*f_1*f_2*g_2*h_2*j*p_3*p_4*s_2*v*x + e*f_2*g_2*h_1*h_2*j*p_3*p_4*s_2*v*x - 2*e*f_1*f_2*h_1*h_2*j*p_3*s_1*s_2*v*x - 2*e*f_2*h_1*h_2*j*p_3*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2*j*s_1*s_2*v^2*x + 3*e*f_1*f_2*g_2*h_1*h_2*p_3*s_1*s_2*v^2*x + 2*e*f_1*f_2*g_2*h_1*h_2*p_3^2*s_1*s_2*v*x + 2*e*f_1*f_2^2*g_2*h_1*h_2*p_3*s_1*s_2*v*x + e*f_2*g_2*h_1*h_2*j*p_4*s_1*s_2*v^2*x + 2*e*f_2^2*g_2*h_1*h_2*p_3*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*p_3*s_1*s_2^2*v*x + e*f_1*f_2*g_2*h_1*h_2*j*p_3*s_1*s_2*v*x + e*f_2*g_2*h_1*h_2*j*p_3*p_4*s_1*s_2*v*x))/(p_2*p_3*(p_3 + h_2*s_2)*(a + p_1)*(f_1 + p_4)*(h_1 + p_4)*(p_3 + v)*(p_3 + v + h_2*s_2)*(f_2 + j + p_3)*(f_2 + j + p_3 + v)))

# Fucntion to estimate R0 function with PRCC_parameters values

calculate_R <- function(params) {
  # Evaluar la fórmula en un entorno donde params están directamente disponibles
  R_value <- with(as.list(params), eval(R_formula))
  return(c(params, R_value = R_value))
}

# Data frame to store the results
PRCC_analysis_R <- data.frame(matrix(ncol = length(PRCC_parameters) + 1, nrow = 0))
names(PRCC_analysis_R) <- c(names(PRCC_parameters), "R_value")

# Run R0 estimations 
for (i in 1:num_simulations) {
  params <- sapply(PRCC_parameters, function(x) x[i])
  calculated_r_number <- calculate_R(params)
  PRCC_analysis_R <- rbind(PRCC_analysis_R, as.data.frame(t(calculated_r_number)))
}

# Show R0 and parameters used for its estimation
PRCC_analysis_R <- round(PRCC_analysis_R, 6)
View(PRCC_analysis_R)




#2.2 PARTIAL RANK CORRELATION COEFFICIENTS: REPRODUCTION NUMBER

#With parameter and R0 estimation, the PRCC will be calculated
#List of input parameter for analysis values and output reproduction number

PRCC_analysis_R <- data.frame(
  delta = PRCC_analysis_R$d, lambda = PRCC_analysis_R$l, alfa = PRCC_analysis_R$a, 
  psi_1 = PRCC_analysis_R$p_1, psi_2 = PRCC_analysis_R$p_2, psi_3 = PRCC_analysis_R$p_3, 
  psi_4 = PRCC_analysis_R$p_4, ache_1 = PRCC_analysis_R$h_1, zeta = PRCC_analysis_R$z,
  equis = PRCC_analysis_R$x, epsilon = PRCC_analysis_R$e, ve = PRCC_analysis_R$v,
  gamma_1 = PRCC_analysis_R$g_1, sigma_1 = PRCC_analysis_R$s_1, efe_1 = PRCC_analysis_R$f_1,
  R_value = PRCC_analysis_R$R_value)


prcc_results <- epi.prcc(PRCC_analysis_R, sided.test = 2, conf.level = 0.95) %>%
  as.data.frame() %>%
  mutate(across(c(est, lower, upper), round, 3)) 

View(prcc_results)



# Function for Scatter plots for input parameters and R0

crear_grafico <- function(data_x, data_y, title, xlab, ylab) {
  ggplot(data.frame(x = data_x, y = data_y), aes(x = x, y = y)) + 
    geom_point(size = 0.01) + 
    geom_smooth(method = "lm", formula = 'y ~ x', se = FALSE, color = "red", size = 0.5, linetype = "solid") + 
    ggtitle(title) + 
    labs(x = xlab, y = ylab) +
    theme_minimal(base_size = 8) + 
    theme(panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          panel.background = element_blank(),
          panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.8))
}


# Scatter plots for each parameter

g0_delta <-  crear_grafico(PRCC_analysis_R$delta, PRCC_analysis_R$R_value, "δ vs R0", "Input δ values", "R number")
g1_alfa <-  crear_grafico(PRCC_analysis_R$alfa, PRCC_analysis_R$R_value, "α vs R0", "Input α values", "R number")
g2_psi_1 <-  crear_grafico(PRCC_analysis_R$psi_1, PRCC_analysis_R$R_value, "Ψ1 vs R0", "Input Ψ1 values", "R number")
g3_psi_2 <-  crear_grafico(PRCC_analysis_R$psi_2, PRCC_analysis_R$R_value, "Ψ2 vs R0", "Input Ψ2 values", "R number")
g4_psi_3 <-  crear_grafico(PRCC_analysis_R$psi_3, PRCC_analysis_R$R_value, "Ψ3 vs R0", "Input Ψ3 values", "R number")
g5_psi_4 <-  crear_grafico(PRCC_analysis_R$psi_4, PRCC_analysis_R$R_value, "Ψ4 vs R0", "Input Ψ4 values", "R number")
g6_ache <-  crear_grafico(PRCC_analysis_R$ache_1, PRCC_analysis_R$R_value, "h1 vs R0", "Input h1 values", "R number")
g7_lambda <-  crear_grafico(PRCC_analysis_R$lambda, PRCC_analysis_R$R_value, "λ vs R0", "Input λ values", "R number")
g8_zeta <-  crear_grafico(PRCC_analysis_R$zeta, PRCC_analysis_R$R_value, "z vs R0", "Input z values", "R number")
g9_equis <-  crear_grafico(PRCC_analysis_R$equis, PRCC_analysis_R$R_value, "x vs R0", "Input x values", "R number")
g10_epsilon <- crear_grafico(PRCC_analysis_R$epsilon, PRCC_analysis_R$R_value, "ε vs R0", "Input ε values", "R number")
g11_ve <- crear_grafico(PRCC_analysis_R$ve, PRCC_analysis_R$R_value, "ν vs R0", "Input ν values", "R number")
g12_gamma_1 <- crear_grafico(PRCC_analysis_R$gamma_1, PRCC_analysis_R$R_value, "ɣ1 vs R0", "Input ɣ1 values", "R number")
g13_sigma_1 <- crear_grafico(PRCC_analysis_R$sigma_1, PRCC_analysis_R$R_value, "σ1 vs R0", "Input σ1 values", "R number")
g14_efe_1 <- crear_grafico(PRCC_analysis_R$efe_1, PRCC_analysis_R$R_value, "f1 vs R0", "Input f1 values", "R number")


# Merged figures 
grid.arrange (g0_delta, g7_lambda, g9_equis, g1_alfa, g8_zeta,g10_epsilon, g14_efe_1,g12_gamma_1, g5_psi_4, g11_ve,  g6_ache, g13_sigma_1,g2_psi_1, g4_psi_3,
              g3_psi_2, ncol = 5, nrow = 3  
)



