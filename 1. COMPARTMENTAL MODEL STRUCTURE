# Load necessary libraries
if (!require(pacman)) install.packages("pacman")
library(pacman)

# Use p_load function from 'pacman' to load required packages
p_load(deSolve, reshape2, ggplot2, dplyr)


# 1.1 MODEL STRUCTURE AND PARAMETERS DEFINITION

# Define initial conditions for the model, representing the starting number of individuals in each compartment.

initial_conditions <- c(
  R = 600,                    # Non-susceptible population
  S = 0,                      # Susceptible population
  E = 0,                      # Asymptomatic carriers type E
  C = 0,                      # Asymptomatic carriers type C
  K_1 = 0,                    # Treated asymptomatic carriers type K1 with contact precautions
  K_2 = 0,                    # Treated asymptomatic carriers type K2 with contact precautions
  G_1 = 0,                    # Isolated asymptomatic carriers type G1 with treatment
  G_2 = 0,                    # Isolated asymptomatic carriers type G2 with treatment
  I = 0,                      # Symptomatic patients 
  A = 0,                      # Symptomatic patients with treatment and contact precautions
  Admission = 0,              # Cumulative number of admissions
  Incidence = 0,              # Cumulative number of cases
  dDischarge_overall=0,       # Number of overall discharges
  dDischarge_colonized=0      # Number of asymptomatic carriers discharges    
  ) 

# Define the SIR model function to simulate the dynamics of infection within a hospital
parameters <- c(
  delta = 0.0003996096,    # Transmission rate of infected individuals, to be optimized based on observed institutional cases. 
  equis = 0.7,             # Relative transmission for colonized patients.
  alfa = 0.32,             # Rate of antibiotic use.
  epsilon = 0.13,          # Fraction of asymptomatic carriers who develop symptomatic disease during hospitalization
  ve = 1/4,                # Progression rate to symptomatic disease.
  lambda = 76,             # Admission rate to the hospital or facility.
  ene = 0.08,              # Overall proportion of asymptomatic carriers at admission.
  pi = 0.005,              # Proportion of infected patients at admission.
  eme = 0.12,              # Proportion of pre-symptomatic patients at admission. 
  zeta = 0.22,             # Proportion of susceptible patients at admission (patient with history of antibiotic use before admission).
  psi_1 = 1/6,             # Discharge rate for non-colonized population.
  psi_2 = 1/6,             # Discharge rate for susceptible population.
  psi_3 = 1/6,             # Discharge rate for asymptomatic carriers.
  psi_4 = 1/12,            # Discharge rate for symptomatic population.
  ache_1 = 1/10,           # Bacterial clearance rate due to treatment for infected patients.
  ache_2 = 1/10,           # Bacterial clearance rate due to treatment for asymptomatic patients.
  gamma_1 = 0.5,           # Relative reduction of transmission due to contact precautions on symptomatic patients (Effectiveness of contact precautions).
  gamma_2 = 0,             # Relative reduction of transmission due to contact precautions on asymptomatic patients (Effectiveness of contact precautions).
  efe_2 = 0,               # Diagnosis rate of asymptomatic carriers.
  efe_1 = 0.90,            # Diagnosis rate of symptomatic carriers.
  jota = 0,                # Treatment rate of asymptomatic carriers.
  sigma_1 = 0.7,           # Fraction of cured symptomatic carriers after treatment (Effectiveness of treatment).
  sigma_2 = 0              # Fraction of cured asymptomatic carriers after treatment (Effectiveness of treatment).
)


follow_up_duration = 570 #Study period in days.
times <- seq(from = 0, to = follow_up_duration, by = 1) # Time steps (days)

# Model structure
comp_model <- function(time, state, parameters) {  
  with(as.list(c(state, parameters)), { 
    
    # Calculate the proportion of patients arriving at C compartment from community
    kappa=1-eme
    
    # Calculate the proportion of susceptible arriving at S compartment from community
    omega= 1-(zeta+pi+ene)
    
    # Define the force of infection (beta1,beta2, beta3 and beta4) for each group capable of transmitting the infection, 
    B1 = delta                          # For symptomatic patients
    B2 = delta * (1-gamma_1)            # For symptomatic under contact precautions
    B3 = delta * equis                  # For asymptomatic carriers
    B4 = delta * equis * (1-gamma_2)    # For asymptomatic carriers under contact precautions
    
    # Differential equations describing the flow between compartments
    
    dR= lambda*omega - psi_1*R - alfa*R
    dS= alfa*R - (B1*I+B2*A+B3*E+B3*C+B3*K_1+B3*K_2+B4*G_1+B4*G_2)*S - psi_2*S + sigma_2*ache_2*K_1 + sigma_2*ache_2*K_2 + sigma_1*ache_1*A + lambda*zeta
    
    dE= epsilon*(B1*I+B2*A+B3*E+B3*C+B3*K_1+B3*K_2+B4*G_1+B4*G_2)*S + lambda*ene*eme - jota*E - ve*E - efe_2*E - psi_3*E
    dC= (1-epsilon)*(B1*I+B2*A+B3*E+B3*C+B3*K_1+B3*K_2+B4*G_1+B4*G_2)*S + lambda*ene*kappa - psi_3*C - jota*C - efe_2*C + (1-sigma_1)*ache_1*A
    
    dK_1= jota*E - sigma_2*ache_2*K_1 - psi_3*K_1 - ve*K_1
    dK_2= jota*C - sigma_2*ache_2*K_2 - psi_3*K_2
    
    dG_1= efe_2*E - psi_3*G_1 - ve*G_1 
    dG_2= efe_2*C - psi_3*G_2 
    
    dI= ve*E + lambda*pi - psi_4*I - efe_1*I 
    dA= efe_1*I - (1-sigma_1)*ache_1*A - sigma_1*ache_1*A - psi_4*A + ve*G_1 + ve*K_1
    
    dAdmission= lambda
    dIncidence= efe_1*I + ve*G_1 + ve*K_1 
    
    dDischarge_overall = (psi_1*R + psi_2*S + psi_3*E + psi_3*C + psi_3*K_1 + psi_3*K_2 + psi_3*G_1 + psi_3*G_2 + psi_4*I + psi_4*A )
    dDischarge_colonized = (psi_3*E + psi_3*C + psi_3*K_1 + psi_3*K_2 + psi_3*G_1 + psi_3*G_2) 
      
    # Return the number of people in each compartments at each time step 
    
    return(list(c(dR, dS, dE, dC, dK_1,dK_2, dG_1, dG_2, dI, dA, dAdmission, dIncidence, dDischarge_overall, dDischarge_colonized))) 
  })
}

# Run simulation
model_output <- as.data.frame(ode(y = initial_conditions, 
                            times = times, 
                            func = comp_model,
                            parms = parameters))
View(model_output)




#1.2 TRANSMISSION RATE (DELTA) OPTIMIZATION

# Function to optimize the transmission rate (delta) by minimizing the difference between cumulative observed cases (UCSF) and simulated cases (Model).
delta_optimization <- function(delta) {
  parameters['delta'] <- delta
  result <- as.data.frame(ode(y = initial_conditions, times = times, func = comp_model, parms = parameters))
  final_incidence <- tail(result$Incidence, 1)
  return(abs(649 - final_incidence))
}

# Optimize 'delta'.
optimized_delta <- optimize(f = delta_optimization, interval = c(0, 1), tol = 1e-12)
print(optimized_delta)

# Update delta in the parameter set and rerun the simulation with the optimized value.
parameters['delta'] <- optimized_delta$minimum
optimized_output <- as.data.frame(ode(y = initial_conditions, times = times, func = comp_model, parms = parameters))
View(optimized_output)



#1.3 SIMULATIONS: ESTIMATING CDI INCIDENCE AND PROPORTION OF COLONIZED AND INFECTED PATIENTS

# Generate random values for parameters to run analyses (uniform distribution with established range).

generate_uniform_values <- function(mean, n) {
  lower_bound <- mean * 0.8
  upper_bound <- mean * 1.2
  runif(n, lower_bound, upper_bound)
}

generate_uniform_values_2 <- function(mean, n) {
  lower_bound <- mean * 0.8
  upper_bound <- 1
  runif(n, lower_bound, upper_bound)
}

num_simulations <- 1000  # Number of simulations to perform.

parameters_list <- list( # List of random variables for simulations. 
  delta = generate_uniform_values(0, num_simulations), #Any value since it will be optimize.
  equis = generate_uniform_values(0.7, num_simulations),
  alfa = generate_uniform_values(0.32, num_simulations),
  epsilon = generate_uniform_values(0.13, num_simulations),
  ve = generate_uniform_values(1/4, num_simulations),
  lambda = generate_uniform_values(76, num_simulations),
  ene = generate_uniform_values(0.08, num_simulations),
  pi = generate_uniform_values(0.005, num_simulations),
  eme = generate_uniform_values(0.12, num_simulations),
  zeta = generate_uniform_values(0.22, num_simulations),
  psi_1 = generate_uniform_values(1/6, num_simulations),
  psi_2 = generate_uniform_values(1/6, num_simulations),
  psi_3 = generate_uniform_values(1/6, num_simulations),
  psi_4 = generate_uniform_values(1/12, num_simulations),
  ache_1 = generate_uniform_values(1/10, num_simulations),
  ache_2 = generate_uniform_values(1/10, num_simulations),
  gamma_1 = generate_uniform_values(0.5, num_simulations),
  gamma_2 = generate_uniform_values(0, num_simulations),
  efe_2 = generate_uniform_values(0, num_simulations),
  efe_1 = generate_uniform_values_2(0.90, num_simulations),
  jota = generate_uniform_values(0, num_simulations),
  sigma_1 = generate_uniform_values(0.7, num_simulations),
  sigma_2 = generate_uniform_values(0, num_simulations)
)


# Calculate min and max for each parameter, round to five decimal places, and create a data frame
min_max_df <- data.frame(
  Parameter = names(parameters_list),
  Min = sapply(parameters_list, function(x) round(min(x), 5)),
  Max = sapply(parameters_list, function(x) round(max(x), 5)))

View(min_max_df)


# Store results from simulations in a data frame for analysis

model_simulations <- data.frame(simulation = integer(), 
                                    Incidence = numeric(),
                                    Admission = numeric(),
                                    dDischarge_overall = numeric(), 
                                    dDischarge_colonized = numeric())


# Function for running simulations and optimize delta values for each parameter set

for (i in 1:num_simulations) {
  # Used obtained random parameter values
  current_parameters <- lapply(parameters_list, function(x) x[i])
  # Function to optimize delta
  delta_optimization <- function(delta) {
    current_parameters['delta'] <- delta # Update delta in current parameters
    result <- ode(y = initial_conditions, times = times, func = comp_model, parms = current_parameters)
    final_incidence <- tail(result[,"Incidence"], 1)
    return(abs(649 - final_incidence))
  }
  
  # Optimize delta
  optimized_delta <- optimize(f = delta_optimization, interval = c(0, 1), tol = 1e-12)
  
  # Run the model with optimized delta value
  current_parameters['delta'] <- optimized_delta$minimum
  optimized_output <- ode(y = initial_conditions, times = times, func = comp_model, parms = current_parameters)
  
  # Store the final results along with used parameters
  final_step <- optimized_output[nrow(optimized_output), ]
  param_data <- as.numeric(unlist(current_parameters))  
  model_simulations <- rbind(model_simulations, cbind(data.frame(simulation = i,
                                                                         Incidence = final_step["Incidence"],
                                                                         Admission = final_step["Admission"],
                                                                         dDischarge_overall = final_step["dDischarge_overall"],
                                                                         dDischarge_colonized = final_step["dDischarge_colonized"]),
                                                              t(data.frame(param_data))))
}


View(model_simulations)


# Name variables 
colnames(model_simulations)[6:length(colnames(model_simulations))] <- names(parameters_list)

#Estimate CDI incidence as (Incidence/Admission)*1000
model_simulations$CDI_incidence <- round((model_simulations$Incidence / model_simulations$Admission) * 1000, digits = 3)
model_simulations <- model_simulations[c("CDI_incidence", setdiff(names(model_simulations), "CDI_incidence"))]
mean(model_simulations$CDI_incidence)
median(model_simulations$CDI_incidence)
quantile(model_simulations$CDI_incidence)

#Estimate proportion of asymptomatic carriers at discharge as dDischarge_colonized/dDischarge_overall

model_simulations$Colonized_people_discharge <- round((model_simulations$dDischarge_colonized / model_simulations$dDischarge_overall), digits = 3)
model_simulations <- model_simulations[c("Colonized_people_discharge", setdiff(names(model_simulations), "Colonized_people_discharge"))]
View(model_simulations)
mean(model_simulations$Colonized_people_discharge)
median(model_simulations$Colonized_people_discharge)
quantile(model_simulations$Colonized_people_discharge)

#Mean proportion of admited colonized patient

mean(model_simulations$ene)
median(model_simulations$ene)
quantile(model_simulations$ene)


# Values for estimating reproduction number of simulations

parameters_list_updated <- list(
  d = model_simulations$delta,
  x = model_simulations$equis,
  a = model_simulations$alfa,
  e = model_simulations$epsilon,
  v = model_simulations$ve,
  l = model_simulations$lambda,
  n = model_simulations$ene,
  pi = model_simulations$pi,
  m = model_simulations$eme,
  z = model_simulations$zeta,
  p_1 = model_simulations$psi_1,
  p_2 = model_simulations$psi_2,
  p_3 = model_simulations$psi_3,
  p_4 = model_simulations$psi_4,
  h_1 = model_simulations$ache_1,
  h_2 = model_simulations$ache_2,
  g_1 = model_simulations$gamma_1,
  g_2 = model_simulations$gamma_2,
  f_2 = model_simulations$efe_2,
  f_1 = model_simulations$efe_1,
  j = model_simulations$jota,
  s_1 = model_simulations$sigma_1,
  s_2 = model_simulations$sigma_2)

View(parameters_list_updated)


# Run simulation with transmission rate (delta) set to zero: this eliminates nosocomial C. difficile transmission
# Create a copy of parameters_list with delta fixed at 0
parameters_list_fixed_delta <- parameters_list
parameters_list_fixed_delta$delta <- rep(0, num_simulations)


# Store results with delta equal to 0
model_simulations_delta_zero <- data.frame(simulation = integer(), 
                                                Incidence = numeric(),
                                                Admission = numeric(),
                                                dDischarge_overall = numeric(), 
                                                dDischarge_colonized = numeric())

for (i in 1:num_simulations) {
  # Used obtained random parameter values
  current_parameters_fixed <- lapply(parameters_list_fixed_delta, function(x) x[i])
  
  # Run model with fixed delta
  fixed_delta_output <- ode(y = initial_conditions, times = times, func = comp_model, parms = current_parameters_fixed)
  
  # Store the final results along with used parameters
  final_step_fixed <- fixed_delta_output[nrow(fixed_delta_output), ]
  param_data_fixed <- as.numeric(unlist(current_parameters_fixed))  
  model_simulations_delta_zero <- rbind(model_simulations_delta_zero, cbind(data.frame(simulation = i,
                                                                                                 Incidence = final_step_fixed["Incidence"],
                                                                                                 Admission = final_step_fixed["Admission"],
                                                                                                 dDischarge_overall = final_step_fixed["dDischarge_overall"],
                                                                                                 dDischarge_colonized = final_step_fixed["dDischarge_colonized"]),
                                                                                      t(data.frame(param_data_fixed))))
}

View(model_simulations_delta_zero)

# Name variables
colnames(model_simulations_delta_zero)[6:length(colnames(model_simulations_delta_zero))] <- names(parameters_list)


#Estimate CDI incidence as (Incidence/Admission)*1000
model_simulations_delta_zero$CDI_incidence <- round((model_simulations_delta_zero$Incidence / model_simulations_delta_zero$Admission) * 1000, digits = 2)
model_simulations_delta_zero <- model_simulations_delta_zero[c("CDI_incidence", setdiff(names(model_simulations_delta_zero), "CDI_incidence"))]

mean(model_simulations_delta_zero$CDI_incidence)
median(model_simulations_delta_zero$CDI_incidence)
quantile(model_simulations_delta_zero$CDI_incidence)






#1.4 ESTIMATION OF REPRODUCTION NUMBER OF SIMULATIONS

#Reproduction number fuction obtained by next generation matrix method (for more inforrmation see Script - Matlab 1: Reproduction number function)

R_formula = expression((d*l*(a + p_1*z)*(p_3^5*p_4^2*x + f_2^2*p_3^3*p_4^2*x + j^2*p_3^3*p_4^2*x + p_3^2*p_4^2*v^3*x + 3*p_3^3*p_4^2*v^2*x + e*f_1*p_3^5*v + e*h_1*p_3^5*v + f_1*h_1*p_3^5*x + e*p_3^5*p_4*v + f_1*p_3^5*p_4*x + h_1*p_3^5*p_4*x + e*f_1*p_3^3*v^3 + 2*e*f_1*p_3^4*v^2 + e*h_1*p_3^3*v^3 + 2*e*h_1*p_3^4*v^2 + e*p_3^3*p_4*v^3 + 2*e*p_3^4*p_4*v^2 + 2*f_2*p_3^4*p_4^2*x + 2*j*p_3^4*p_4^2*x + 3*p_3^4*p_4^2*v*x + h_2^2*p_3^3*p_4^2*s_2^2*x + e*f_1*f_2*p_3^2*v^3 + 3*e*f_1*f_2*p_3^3*v^2 + e*f_1*f_2^2*p_3^3*v - e*f_1*g_1*p_3^3*v^3 - 2*e*f_1*g_1*p_3^4*v^2 + e*f_2*h_1*p_3^2*v^3 + 2*e*f_2*h_1*p_3^3*v^2 + e*f_1*j*p_3^2*v^3 + 3*e*f_1*j*p_3^3*v^2 + e*f_1*j^2*p_3^3*v + f_1*f_2^2*h_1*p_3^3*x + e*h_1*j*p_3^2*v^3 + 2*e*h_1*j*p_3^3*v^2 + f_1*h_1*j^2*p_3^3*x + e*f_2*p_3^2*p_4*v^3 + 3*e*f_2*p_3^3*p_4*v^2 + e*f_2^2*p_3^3*p_4*v + f_1*f_2^2*p_3^3*p_4*x + e*j*p_3^2*p_4*v^3 + 3*e*j*p_3^3*p_4*v^2 + e*j^2*p_3^3*p_4*v - f_2*g_2*p_3^4*p_4^2*x + f_2^2*h_1*p_3^3*p_4*x + f_1*j^2*p_3^3*p_4*x + 2*f_2*j*p_3^3*p_4^2*x + h_1*j^2*p_3^3*p_4*x + f_1*h_1*p_3^2*v^3*x + 3*f_1*h_1*p_3^3*v^2*x - e*p_3^4*p_4^2*v*x + 2*h_2*p_3^4*p_4^2*s_2*x + f_1*p_3^2*p_4*v^3*x + 3*f_1*p_3^3*p_4*v^2*x + f_2*p_3*p_4^2*v^3*x + 5*f_2*p_3^3*p_4^2*v*x + h_1*p_3^2*p_4*v^3*x + 3*h_1*p_3^3*p_4*v^2*x + j*p_3*p_4^2*v^3*x + 5*j*p_3^3*p_4^2*v*x + e*f_1*f_2^2*p_3^2*v^2 + e*f_1*j^2*p_3^2*v^2 + e*f_2^2*p_3^2*p_4*v^2 + e*j^2*p_3^2*p_4*v^2 - f_2^2*g_2*p_3^3*p_4^2*x - e*p_3^2*p_4^2*v^3*x - 2*e*p_3^3*p_4^2*v^2*x + 4*f_2*p_3^2*p_4^2*v^2*x + f_2^2*p_3*p_4^2*v^2*x + 2*f_2^2*p_3^2*p_4^2*v*x + 4*j*p_3^2*p_4^2*v^2*x + j^2*p_3*p_4^2*v^2*x + 2*j^2*p_3^2*p_4^2*v*x + 2*e*f_1*f_2*p_3^4*v - e*f_1*g_1*p_3^5*v + e*f_2*h_1*p_3^4*v + 2*e*f_1*j*p_3^4*v + 2*f_1*f_2*h_1*p_3^4*x + e*h_1*j*p_3^4*v + 2*f_1*h_1*j*p_3^4*x + 
                                           2*e*f_2*p_3^4*p_4*v + 2*f_1*f_2*p_3^4*p_4*x + 2*e*j*p_3^4*p_4*v + 2*f_2*h_1*p_3^4*p_4*x + 2*f_1*j*p_3^4*p_4*x + 2*h_1*j*p_3^4*p_4*x + 3*f_1*h_1*p_3^4*v*x + 3*f_1*p_3^4*p_4*v*x + 3*h_1*p_3^4*p_4*v*x - e*f_1*g_1*j^2*p_3^2*v^2 - e*f_2^2*g_1*p_3^2*p_4*v^2 - e*g_1*j^2*p_3^2*p_4*v^2 + e*f_1*h_2^2*p_3^3*s_2^2*v + e*h_1*h_2^2*p_3^3*s_2^2*v + f_1*h_1*h_2^2*p_3^3*s_2^2*x + e*h_2^2*p_3^3*p_4*s_2^2*v - 3*e*f_2*p_3^2*p_4^2*v^2*x - e*f_2^2*p_3*p_4^2*v^2*x - e*f_2^2*p_3^2*p_4^2*v*x + f_1*h_2^2*p_3^3*p_4*s_2^2*x + 2*f_2^2*h_2*p_3^2*p_4^2*s_2*x - 3*f_2*g_2*p_3^2*p_4^2*v^2*x - f_2^2*g_2*p_3*p_4^2*v^2*x - 2*f_2^2*g_2*p_3^2*p_4^2*v*x + h_1*h_2^2*p_3^3*p_4*s_2^2*x - 3*e*j*p_3^2*p_4^2*v^2*x - e*j^2*p_3*p_4^2*v^2*x - e*j^2*p_3^2*p_4^2*v*x + h_2*j^2*p_3^2*p_4^2*s_2*x + f_2^2*h_2*p_4^2*s_2*v^2*x + 4*h_2*p_3^2*p_4^2*s_2*v^2*x - 2*e*f_1*f_2*g_1*p_3^4*v + 2*e*f_1*f_2*j*p_3^3*v - 2*e*f_1*g_1*j*p_3^4*v - f_1*f_2*g_2*h_1*p_3^4*x + 2*f_1*f_2*h_1*j*p_3^3*x - e*f_2*g_1*p_3^4*p_4*v + 2*e*f_2*j*p_3^3*p_4*v - f_1*f_2*g_2*p_3^4*p_4*x - e*g_1*j*p_3^4*p_4*v + 2*e*f_1*h_2*p_3^4*s_2*v - f_2*g_2*h_1*p_3^4*p_4*x + 2*e*h_1*h_2*p_3^4*s_2*v + 2*f_1*f_2*j*p_3^3*p_4*x + 2*f_2*h_1*j*p_3^3*p_4*x + 2*f_1*h_1*h_2*p_3^4*s_2*x + f_1*f_2*h_1*p_3*v^3*x + 5*f_1*f_2*h_1*p_3^3*v*x + f_1*h_1*j*p_3*v^3*x + 5*f_1*h_1*j*p_3^3*v*x + 2*e*h_2*p_3^4*p_4*s_2*v - e*f_1*p_3^4*p_4*v*x + 2*f_1*h_2*p_3^4*p_4*s_2*x + f_1*f_2*p_3*p_4*v^3*x + 5*f_1*f_2*p_3^3*p_4*v*x - e*h_1*p_3^4*p_4*v*x + 2*h_1*h_2*p_3^4*p_4*s_2*x + f_2*h_1*p_3*p_4*v^3*x + 5*f_2*h_1*p_3^3*p_4*v*x + f_1*j*p_3*p_4*v^3*x + 5*f_1*j*p_3^3*p_4*v*x + h_1*j*p_3*p_4*v^3*x + 5*h_1*j*p_3^3*p_4*v*x + e*f_1*h_2^2*p_3^2*s_2^2*v^2 + e*h_1*h_2^2*p_3^2*s_2^2*v^2 + e*h_2^2*p_3^2*p_4*s_2^2*v^2 + 
                                           2*f_2*h_2^2*p_3^2*p_4^2*s_2^2*x + f_2^2*h_2^2*p_3*p_4^2*s_2^2*x + h_2^2*j*p_3^2*p_4^2*s_2^2*x + f_2*h_2^2*p_4^2*s_2^2*v^2*x + f_2^2*h_2^2*p_4^2*s_2^2*v*x + h_2^2*p_3*p_4^2*s_2^2*v^2*x + 2*h_2^2*p_3^2*p_4^2*s_2^2*v*x - e*f_1*f_2*g_1*p_3^2*v^3 - 3*e*f_1*f_2*g_1*p_3^3*v^2 - e*f_1*f_2^2*g_1*p_3^3*v + 2*e*f_1*f_2*j*p_3^2*v^2 - e*f_1*g_1*j*p_3^2*v^3 - 3*e*f_1*g_1*j*p_3^3*v^2 - e*f_1*g_1*j^2*p_3^3*v - f_1*f_2^2*g_2*h_1*p_3^3*x - e*f_2*g_1*p_3^3*p_4*v^2 - e*f_2^2*g_1*p_3^3*p_4*v + 2*e*f_2*j*p_3^2*p_4*v^2 - f_1*f_2^2*g_2*p_3^3*p_4*x - e*g_1*j*p_3^3*p_4*v^2 - e*g_1*j^2*p_3^3*p_4*v + e*f_1*h_2*p_3^2*s_2*v^3 + 3*e*f_1*h_2*p_3^3*s_2*v^2 - f_2^2*g_2*h_1*p_3^3*p_4*x + e*h_1*h_2*p_3^2*s_2*v^3 + 3*e*h_1*h_2*p_3^3*s_2*v^2 - f_2*g_2*j*p_3^3*p_4^2*x + 4*f_1*f_2*h_1*p_3^2*v^2*x + f_1*f_2^2*h_1*p_3*v^2*x + 2*f_1*f_2^2*h_1*p_3^2*v*x + 4*f_1*h_1*j*p_3^2*v^2*x + f_1*h_1*j^2*p_3*v^2*x + 2*f_1*h_1*j^2*p_3^2*v*x + e*h_2*p_3^2*p_4*s_2*v^3 + 3*e*h_2*p_3^3*p_4*s_2*v^2 - e*f_1*p_3^2*p_4*v^3*x - 2*e*f_1*p_3^3*p_4*v^2*x - e*f_2*p_3*p_4^2*v^3*x - 2*e*f_2*p_3^3*p_4^2*v*x + 4*f_2*h_2*p_3^3*p_4^2*s_2*x + 4*f_1*f_2*p_3^2*p_4*v^2*x + f_1*f_2^2*p_3*p_4*v^2*x + 2*f_1*f_2^2*p_3^2*p_4*v*x - e*h_1*p_3^2*p_4*v^3*x - 2*e*h_1*p_3^3*p_4*v^2*x - f_2*g_2*p_3*p_4^2*v^3*x - 3*f_2*g_2*p_3^3*p_4^2*v*x + 4*f_2*h_1*p_3^2*p_4*v^2*x + f_2^2*h_1*p_3*p_4*v^2*x + 2*f_2^2*h_1*p_3^2*p_4*v*x - e*j*p_3*p_4^2*v^3*x - 2*e*j*p_3^3*p_4^2*v*x + 3*h_2*j*p_3^3*p_4^2*s_2*x + 4*f_1*j*p_3^2*p_4*v^2*x + f_1*j^2*p_3*p_4*v^2*x + 2*f_1*j^2*p_3^2*p_4*v*x + 2*f_2*j*p_3*p_4^2*v^2*x + 4*f_2*j*p_3^2*p_4^2*v*x + f_2*h_2*p_4^2*s_2*v^3*x + 4*h_1*j*p_3^2*p_4*v^2*x + h_1*j^2*p_3*p_4*v^2*x + 2*h_1*j^2*p_3^2*p_4*v*x + h_2*p_3*p_4^2*s_2*v^3*x + 5*h_2*p_3^3*p_4^2*s_2*v*x - 
                                           e*f_1*f_2^2*g_1*p_3^2*v^2 - 2*e*f_1*f_2*g_1*j*p_3^2*v^2 - 2*e*f_2*g_1*j*p_3^2*p_4*v^2 + 4*e*f_1*f_2*h_2*p_3^2*s_2*v^2 + e*f_1*f_2^2*h_2*p_3*s_2*v^2 + 2*e*f_1*f_2^2*h_2*p_3^2*s_2*v - e*f_1*g_1*h_2*p_3^2*s_2*v^3 - 3*e*f_1*g_1*h_2*p_3^3*s_2*v^2 + 3*e*f_2*h_1*h_2*p_3^2*s_2*v^2 + 4*e*f_1*h_2*j*p_3^2*s_2*v^2 + e*f_1*h_2*j^2*p_3*s_2*v^2 + e*f_1*h_2*j^2*p_3^2*s_2*v + 2*f_1*f_2^2*h_1*h_2*p_3^2*s_2*x + 3*e*h_1*h_2*j*p_3^2*s_2*v^2 - 3*f_1*f_2*g_2*h_1*p_3^2*v^2*x - f_1*f_2^2*g_2*h_1*p_3*v^2*x - 2*f_1*f_2^2*g_2*h_1*p_3^2*v*x + f_1*h_1*h_2*j^2*p_3^2*s_2*x + 4*e*f_2*h_2*p_3^2*p_4*s_2*v^2 + e*f_2^2*h_2*p_3*p_4*s_2*v^2 + 2*e*f_2^2*h_2*p_3^2*p_4*s_2*v + f_1*f_2^2*h_1*h_2*s_2*v^2*x - 3*e*f_1*f_2*p_3^2*p_4*v^2*x - e*f_1*f_2^2*p_3*p_4*v^2*x - e*f_1*f_2^2*p_3^2*p_4*v*x + 2*f_1*f_2^2*h_2*p_3^2*p_4*s_2*x + 4*e*h_2*j*p_3^2*p_4*s_2*v^2 + e*h_2*j^2*p_3*p_4*s_2*v^2 + e*h_2*j^2*p_3^2*p_4*s_2*v + e*f_2*g_2*p_3*p_4^2*v^3*x + 2*e*f_2*g_2*p_3^3*p_4^2*v*x - 2*f_2*g_2*h_2*p_3^3*p_4^2*s_2*x - 2*e*f_2*h_1*p_3^2*p_4*v^2*x - 3*f_1*f_2*g_2*p_3^2*p_4*v^2*x - f_1*f_2^2*g_2*p_3*p_4*v^2*x - 2*f_1*f_2^2*g_2*p_3^2*p_4*v*x + 2*f_2^2*h_1*h_2*p_3^2*p_4*s_2*x - 3*e*f_1*j*p_3^2*p_4*v^2*x - e*f_1*j^2*p_3*p_4*v^2*x - e*f_1*j^2*p_3^2*p_4*v*x - 2*e*f_2*j*p_3*p_4^2*v^2*x - 2*e*f_2*j*p_3^2*p_4^2*v*x + f_1*h_2*j^2*p_3^2*p_4*s_2*x - 3*f_2*g_2*h_1*p_3^2*p_4*v^2*x - f_2^2*g_2*h_1*p_3*p_4*v^2*x - 2*f_2^2*g_2*h_1*p_3^2*p_4*v*x + 3*f_2*h_2*j*p_3^2*p_4^2*s_2*x - e*f_1*h_1*p_3^2*s_1*v^3*x - 2*e*f_1*h_1*p_3^3*s_1*v^2*x - e*f_2*h_2*p_4^2*s_2*v^3*x - 2*e*h_1*j*p_3^2*p_4*v^2*x - f_2*g_2*j*p_3*p_4^2*v^2*x - 2*f_2*g_2*j*p_3^2*p_4^2*v*x + f_1*f_2^2*h_2*p_4*s_2*v^2*x + h_1*h_2*j^2*p_3^2*p_4*s_2*x - f_2*g_2*h_2*p_4^2*s_2*v^3*x + 4*f_1*h_1*h_2*p_3^2*s_2*v^2*x + 
                                           f_2^2*h_1*h_2*p_4*s_2*v^2*x + f_2*h_2*j*p_4^2*s_2*v^2*x - e*h_2*p_3*p_4^2*s_2*v^3*x - 2*e*h_2*p_3^3*p_4^2*s_2*v*x + 4*f_1*h_2*p_3^2*p_4*s_2*v^2*x + 5*f_2*h_2*p_3*p_4^2*s_2*v^2*x + 8*f_2*h_2*p_3^2*p_4^2*s_2*v*x + 3*f_2^2*h_2*p_3*p_4^2*s_2*v*x + 4*h_1*h_2*p_3^2*p_4*s_2*v^2*x + 2*h_2*j*p_3*p_4^2*s_2*v^2*x + 5*h_2*j*p_3^2*p_4^2*s_2*v*x + h_2*j^2*p_3*p_4^2*s_2*v*x + e*f_1*f_2*h_2^2*p_3*s_2^2*v^2 + 2*e*f_1*f_2*h_2^2*p_3^2*s_2^2*v + e*f_1*f_2^2*h_2^2*p_3*s_2^2*v - e*f_1*g_1*h_2^2*p_3^3*s_2^2*v + e*f_2*h_1*h_2^2*p_3*s_2^2*v^2 + e*f_2*h_1*h_2^2*p_3^2*s_2^2*v + e*f_1*h_2^2*j*p_3*s_2^2*v^2 + e*f_1*h_2^2*j*p_3^2*s_2^2*v + 2*f_1*f_2*h_1*h_2^2*p_3^2*s_2^2*x + f_1*f_2^2*h_1*h_2^2*p_3*s_2^2*x + e*h_1*h_2^2*j*p_3*s_2^2*v^2 + e*h_1*h_2^2*j*p_3^2*s_2^2*v + f_1*h_1*h_2^2*j*p_3^2*s_2^2*x + e*f_2*h_2^2*p_3*p_4*s_2^2*v^2 + 2*e*f_2*h_2^2*p_3^2*p_4*s_2^2*v + e*f_2^2*h_2^2*p_3*p_4*s_2^2*v + f_1*f_2*h_1*h_2^2*s_2^2*v^2*x + f_1*f_2^2*h_1*h_2^2*s_2^2*v*x + 2*f_1*f_2*h_2^2*p_3^2*p_4*s_2^2*x + f_1*f_2^2*h_2^2*p_3*p_4*s_2^2*x + 3*e*f_2*g_2*p_3^2*p_4^2*v^2*x + e*f_2^2*g_2*p_3*p_4^2*v^2*x + e*f_2^2*g_2*p_3^2*p_4^2*v*x + e*h_2^2*j*p_3*p_4*s_2^2*v^2 + e*h_2^2*j*p_3^2*p_4*s_2^2*v - 2*f_2^2*g_2*h_2*p_3^2*p_4^2*s_2*x + 2*f_2*h_1*h_2^2*p_3^2*p_4*s_2^2*x + f_2^2*h_1*h_2^2*p_3*p_4*s_2^2*x + f_1*h_2^2*j*p_3^2*p_4*s_2^2*x + f_2*h_2^2*j*p_3*p_4^2*s_2^2*x - e*f_2^2*h_2*p_4^2*s_2*v^2*x + f_1*f_2*h_2^2*p_4*s_2^2*v^2*x + f_1*f_2^2*h_2^2*p_4*s_2^2*v*x + h_1*h_2^2*j*p_3^2*p_4*s_2^2*x - f_2^2*g_2*h_2*p_4^2*s_2*v^2*x + f_1*h_1*h_2^2*p_3*s_2^2*v^2*x + 2*f_1*h_1*h_2^2*p_3^2*s_2^2*v*x + f_2*h_1*h_2^2*p_4*s_2^2*v^2*x + f_2^2*h_1*h_2^2*p_4*s_2^2*v*x + f_2*h_2^2*j*p_4^2*s_2^2*v*x - 3*e*h_2*p_3^2*p_4^2*s_2*v^2*x + f_1*h_2^2*p_3*p_4*s_2^2*v^2*x + 
                                           2*f_1*h_2^2*p_3^2*p_4*s_2^2*v*x + 3*f_2*h_2^2*p_3*p_4^2*s_2^2*v*x + h_1*h_2^2*p_3*p_4*s_2^2*v^2*x + 2*h_1*h_2^2*p_3^2*p_4*s_2^2*v*x + h_2^2*j*p_3*p_4^2*s_2^2*v*x - 2*e*f_1*f_2*g_1*j*p_3^3*v - f_1*f_2*g_2*h_1*j*p_3^3*x - 2*e*f_2*g_1*j*p_3^3*p_4*v + e*f_1*f_2*h_2*p_3*s_2*v^3 + 4*e*f_1*f_2*h_2*p_3^3*s_2*v - 2*e*f_1*g_1*h_2*p_3^4*s_2*v + e*f_2*h_1*h_2*p_3*s_2*v^3 + 2*e*f_2*h_1*h_2*p_3^3*s_2*v - f_1*f_2*g_2*j*p_3^3*p_4*x + e*f_1*h_2*j*p_3*s_2*v^3 + 3*e*f_1*h_2*j*p_3^3*s_2*v - f_2*g_2*h_1*j*p_3^3*p_4*x + 4*f_1*f_2*h_1*h_2*p_3^3*s_2*x + e*h_1*h_2*j*p_3*s_2*v^3 + 2*e*h_1*h_2*j*p_3^3*s_2*v - f_1*f_2*g_2*h_1*p_3*v^3*x - 3*f_1*f_2*g_2*h_1*p_3^3*v*x + 3*f_1*h_1*h_2*j*p_3^3*s_2*x + 2*f_1*f_2*h_1*j*p_3*v^2*x + 4*f_1*f_2*h_1*j*p_3^2*v*x + e*f_2*h_2*p_3*p_4*s_2*v^3 + 4*e*f_2*h_2*p_3^3*p_4*s_2*v + f_1*f_2*h_1*h_2*s_2*v^3*x - e*f_1*f_2*p_3*p_4*v^3*x - 2*e*f_1*f_2*p_3^3*p_4*v*x + 4*f_1*f_2*h_2*p_3^3*p_4*s_2*x + e*h_2*j*p_3*p_4*s_2*v^3 + 3*e*h_2*j*p_3^3*p_4*s_2*v - e*f_2*h_1*p_3*p_4*v^3*x - e*f_2*h_1*p_3^3*p_4*v*x - f_1*f_2*g_2*p_3*p_4*v^3*x - 3*f_1*f_2*g_2*p_3^3*p_4*v*x + 4*f_2*h_1*h_2*p_3^3*p_4*s_2*x - e*f_1*j*p_3*p_4*v^3*x - 2*e*f_1*j*p_3^3*p_4*v*x + 3*f_1*h_2*j*p_3^3*p_4*s_2*x - f_2*g_2*h_1*p_3*p_4*v^3*x - 3*f_2*g_2*h_1*p_3^3*p_4*v*x - e*f_1*h_1*p_3^4*s_1*v*x + 2*f_1*f_2*j*p_3*p_4*v^2*x + 4*f_1*f_2*j*p_3^2*p_4*v*x - e*h_1*j*p_3*p_4*v^3*x - e*h_1*j*p_3^3*p_4*v*x + f_1*f_2*h_2*p_4*s_2*v^3*x + 3*h_1*h_2*j*p_3^3*p_4*s_2*x + 2*f_2*h_1*j*p_3*p_4*v^2*x + 4*f_2*h_1*j*p_3^2*p_4*v*x + f_1*h_1*h_2*p_3*s_2*v^3*x + 5*f_1*h_1*h_2*p_3^3*s_2*v*x + f_2*h_1*h_2*p_4*s_2*v^3*x + f_1*h_2*p_3*p_4*s_2*v^3*x + 5*f_1*h_2*p_3^3*p_4*s_2*v*x + h_1*h_2*p_3*p_4*s_2*v^3*x + 5*h_1*h_2*p_3^3*p_4*s_2*v*x - e*f_1*g_1*h_2^2*p_3^2*s_2^2*v^2 - 
                                           f_2*g_2*h_2^2*p_3^2*p_4^2*s_2^2*x - f_2^2*g_2*h_2^2*p_3*p_4^2*s_2^2*x - e*f_2*h_2^2*p_4^2*s_2^2*v^2*x - e*f_2^2*h_2^2*p_4^2*s_2^2*v*x - f_2*g_2*h_2^2*p_4^2*s_2^2*v^2*x - f_2^2*g_2*h_2^2*p_4^2*s_2^2*v*x - e*h_2^2*p_3*p_4^2*s_2^2*v^2*x - e*h_2^2*p_3^2*p_4^2*s_2^2*v*x - e*f_1*f_2*g_1*h_2*p_3*s_2*v^3 - 4*e*f_1*f_2*g_1*h_2*p_3^3*s_2*v + 2*e*f_1*f_2*h_2*j*p_3*s_2*v^2 + 3*e*f_1*f_2*h_2*j*p_3^2*s_2*v - e*f_1*g_1*h_2*j*p_3*s_2*v^3 - 3*e*f_1*g_1*h_2*j*p_3^3*s_2*v + e*f_1*f_2*g_2*h_1*p_3^3*v*x - 2*f_1*f_2*g_2*h_1*h_2*p_3^3*s_2*x + 3*f_1*f_2*h_1*h_2*j*p_3^2*s_2*x - f_1*f_2*g_2*h_1*j*p_3*v^2*x - 2*f_1*f_2*g_2*h_1*j*p_3^2*v*x - 2*e*f_2*g_1*h_2*p_3^3*p_4*s_2*v - f_1*f_2*g_2*h_1*h_2*s_2*v^3*x + e*f_1*f_2*g_2*p_3*p_4*v^3*x + 2*e*f_1*f_2*g_2*p_3^3*p_4*v*x + 2*e*f_2*h_2*j*p_3*p_4*s_2*v^2 + 3*e*f_2*h_2*j*p_3^2*p_4*s_2*v - 2*f_1*f_2*g_2*h_2*p_3^3*p_4*s_2*x + f_1*f_2*h_1*h_2*j*s_2*v^2*x - e*g_1*h_2*j*p_3^3*p_4*s_2*v + e*f_2*g_2*h_1*p_3*p_4*v^3*x + 2*e*f_2*g_2*h_1*p_3^3*p_4*v*x - 2*e*f_1*f_2*j*p_3*p_4*v^2*x - 2*e*f_1*f_2*j*p_3^2*p_4*v*x - 2*f_2*g_2*h_1*h_2*p_3^3*p_4*s_2*x + 3*f_1*f_2*h_2*j*p_3^2*p_4*s_2*x - e*f_1*f_2*h_1*p_3*s_1*v^3*x - 2*e*f_1*f_2*h_1*p_3^3*s_1*v*x - e*f_1*f_2*h_2*p_4*s_2*v^3*x - f_1*f_2*g_2*j*p_3*p_4*v^2*x - 2*f_1*f_2*g_2*j*p_3^2*p_4*v*x + 3*f_2*h_1*h_2*j*p_3^2*p_4*s_2*x - e*f_2*h_1*h_2*p_4*s_2*v^3*x - f_1*f_2*g_2*h_2*p_4*s_2*v^3*x - f_2*g_2*h_1*j*p_3*p_4*v^2*x - 2*f_2*g_2*h_1*j*p_3^2*p_4*v*x + 5*f_1*f_2*h_1*h_2*p_3*s_2*v^2*x + 8*f_1*f_2*h_1*h_2*p_3^2*s_2*v*x + 3*f_1*f_2^2*h_1*h_2*p_3*s_2*v*x - e*f_1*h_1*j*p_3*s_1*v^3*x - 2*e*f_1*h_1*j*p_3^3*s_1*v*x - f_2*g_2*h_1*h_2*p_4*s_2*v^3*x + f_1*f_2*h_2*j*p_4*s_2*v^2*x + 2*f_1*h_1*h_2*j*p_3*s_2*v^2*x + 5*f_1*h_1*h_2*j*p_3^2*s_2*v*x + 
                                           f_1*h_1*h_2*j^2*p_3*s_2*v*x + f_2*h_1*h_2*j*p_4*s_2*v^2*x - e*f_2*h_1*p_3^3*p_4*s_1*v*x - e*f_1*h_2*p_3*p_4*s_2*v^3*x - 2*e*f_1*h_2*p_3^3*p_4*s_2*v*x + 5*f_1*f_2*h_2*p_3*p_4*s_2*v^2*x + 8*f_1*f_2*h_2*p_3^2*p_4*s_2*v*x + 3*f_1*f_2^2*h_2*p_3*p_4*s_2*v*x - e*h_1*h_2*p_3*p_4*s_2*v^3*x - 2*e*h_1*h_2*p_3^3*p_4*s_2*v*x + 5*f_2*h_1*h_2*p_3*p_4*s_2*v^2*x + 8*f_2*h_1*h_2*p_3^2*p_4*s_2*v*x + 3*f_2^2*h_1*h_2*p_3*p_4*s_2*v*x - e*h_1*j*p_3^3*p_4*s_1*v*x + 2*f_1*h_2*j*p_3*p_4*s_2*v^2*x + 5*f_1*h_2*j*p_3^2*p_4*s_2*v*x + f_1*h_2*j^2*p_3*p_4*s_2*v*x + 4*f_2*h_2*j*p_3*p_4^2*s_2*v*x + 2*h_1*h_2*j*p_3*p_4*s_2*v^2*x + 5*h_1*h_2*j*p_3^2*p_4*s_2*v*x + h_1*h_2*j^2*p_3*p_4*s_2*v*x + e*f_2*g_2*h_2^2*p_4^2*s_2^2*v^2*x + e*f_2^2*g_2*h_2^2*p_4^2*s_2^2*v*x - 4*e*f_1*f_2*g_1*h_2*p_3^2*s_2*v^2 - e*f_1*f_2^2*g_1*h_2*p_3*s_2*v^2 - 2*e*f_1*f_2^2*g_1*h_2*p_3^2*s_2*v + e*f_1*f_2*h_2^2*j*p_3*s_2^2*v - 4*e*f_1*g_1*h_2*j*p_3^2*s_2*v^2 - e*f_1*g_1*h_2*j^2*p_3*s_2*v^2 - e*f_1*g_1*h_2*j^2*p_3^2*s_2*v + e*f_1*f_2*g_2*h_1*p_3^2*v^2*x - 2*f_1*f_2^2*g_2*h_1*h_2*p_3^2*s_2*x + f_1*f_2*h_1*h_2^2*j*p_3*s_2^2*x - e*f_2*g_1*h_2*p_3^2*p_4*s_2*v^2 - e*f_2^2*g_1*h_2*p_3*p_4*s_2*v^2 - 2*e*f_2^2*g_1*h_2*p_3^2*p_4*s_2*v - f_1*f_2^2*g_2*h_1*h_2*s_2*v^2*x + 3*e*f_1*f_2*g_2*p_3^2*p_4*v^2*x + e*f_1*f_2^2*g_2*p_3*p_4*v^2*x + e*f_1*f_2^2*g_2*p_3^2*p_4*v*x + e*f_2*h_2^2*j*p_3*p_4*s_2^2*v - 2*f_1*f_2^2*g_2*h_2*p_3^2*p_4*s_2*x + f_1*f_2*h_1*h_2^2*j*s_2^2*v*x - e*g_1*h_2*j*p_3^2*p_4*s_2*v^2 - e*g_1*h_2*j^2*p_3*p_4*s_2*v^2 - e*g_1*h_2*j^2*p_3^2*p_4*s_2*v + 3*e*f_2*g_2*h_1*p_3^2*p_4*v^2*x - 2*f_2^2*g_2*h_1*h_2*p_3^2*p_4*s_2*x + f_1*f_2*h_2^2*j*p_3*p_4*s_2^2*x + e*f_2*g_2*j*p_3*p_4^2*v^2*x + e*f_2*g_2*j*p_3^2*p_4^2*v*x - 3*e*f_1*f_2*h_1*p_3^2*s_1*v^2*x - 
                                           e*f_1*f_2^2*h_1*p_3*s_1*v^2*x - e*f_1*f_2^2*h_1*p_3^2*s_1*v*x - e*f_1*f_2^2*h_2*p_4*s_2*v^2*x - 2*f_2*g_2*h_2*j*p_3^2*p_4^2*s_2*x + e*f_2*g_2*h_2*p_4^2*s_2*v^3*x + f_2*h_1*h_2^2*j*p_3*p_4*s_2^2*x - f_1*f_2^2*g_2*h_2*p_4*s_2*v^2*x + 3*f_1*f_2*h_1*h_2^2*p_3*s_2^2*v*x - 3*e*f_1*h_1*j*p_3^2*s_1*v^2*x - e*f_1*h_1*j^2*p_3*s_1*v^2*x - e*f_1*h_1*j^2*p_3^2*s_1*v*x - e*f_2*h_2*j*p_4^2*s_2*v^2*x - f_2^2*g_2*h_1*h_2*p_4*s_2*v^2*x + f_1*f_2*h_2^2*j*p_4*s_2^2*v*x - f_2*g_2*h_2*j*p_4^2*s_2*v^2*x + f_1*h_1*h_2^2*j*p_3*s_2^2*v*x + f_2*h_1*h_2^2*j*p_4*s_2^2*v*x - e*f_2*h_1*p_3^2*p_4*s_1*v^2*x - e*f_2^2*h_1*p_3*p_4*s_1*v^2*x - e*f_2^2*h_1*p_3^2*p_4*s_1*v*x - 3*e*f_1*h_2*p_3^2*p_4*s_2*v^2*x - 4*e*f_2*h_2*p_3*p_4^2*s_2*v^2*x - 4*e*f_2*h_2*p_3^2*p_4^2*s_2*v*x - 2*e*f_2^2*h_2*p_3*p_4^2*s_2*v*x + 3*f_1*f_2*h_2^2*p_3*p_4*s_2^2*v*x - 3*e*h_1*h_2*p_3^2*p_4*s_2*v^2*x - 4*f_2*g_2*h_2*p_3*p_4^2*s_2*v^2*x - 5*f_2*g_2*h_2*p_3^2*p_4^2*s_2*v*x - 3*f_2^2*g_2*h_2*p_3*p_4^2*s_2*v*x + 3*f_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - e*h_1*j*p_3^2*p_4*s_1*v^2*x - e*h_1*j^2*p_3*p_4*s_1*v^2*x - e*h_1*j^2*p_3^2*p_4*s_1*v*x - e*h_2*j*p_3*p_4^2*s_2*v^2*x - e*h_2*j*p_3^2*p_4^2*s_2*v*x + f_1*h_2^2*j*p_3*p_4*s_2^2*v*x + h_1*h_2^2*j*p_3*p_4*s_2^2*v*x - e*f_1*f_2*g_1*h_2^2*p_3*s_2^2*v^2 - 2*e*f_1*f_2*g_1*h_2^2*p_3^2*s_2^2*v - e*f_1*f_2^2*g_1*h_2^2*p_3*s_2^2*v - e*f_1*g_1*h_2^2*j*p_3*s_2^2*v^2 - e*f_1*g_1*h_2^2*j*p_3^2*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*p_3^2*s_2^2*x - f_1*f_2^2*g_2*h_1*h_2^2*p_3*s_2^2*x - e*f_2*g_1*h_2^2*p_3^2*p_4*s_2^2*v - e*f_2^2*g_1*h_2^2*p_3*p_4*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*s_2^2*v^2*x - f_1*f_2^2*g_2*h_1*h_2^2*s_2^2*v*x - f_1*f_2*g_2*h_2^2*p_3^2*p_4*s_2^2*x - f_1*f_2^2*g_2*h_2^2*p_3*p_4*s_2^2*x - f_2*g_2*h_1*h_2^2*p_3^2*p_4*s_2^2*x - 
                                           f_2^2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*x - e*f_1*f_2*h_2^2*p_4*s_2^2*v^2*x - e*f_1*f_2^2*h_2^2*p_4*s_2^2*v*x - f_2*g_2*h_2^2*j*p_3*p_4^2*s_2^2*x + e*f_2^2*g_2*h_2*p_4^2*s_2*v^2*x - e*f_2*h_1*h_2^2*p_4*s_2^2*v^2*x - f_1*f_2*g_2*h_2^2*p_4*s_2^2*v^2*x - f_1*f_2^2*g_2*h_2^2*p_4*s_2^2*v*x - e*f_2*h_2^2*j*p_4^2*s_2^2*v*x - f_2*g_2*h_1*h_2^2*p_4*s_2^2*v^2*x - f_2^2*g_2*h_1*h_2^2*p_4*s_2^2*v*x - f_2*g_2*h_2^2*j*p_4^2*s_2^2*v*x - e*f_1*h_2^2*p_3*p_4*s_2^2*v^2*x - e*f_1*h_2^2*p_3^2*p_4*s_2^2*v*x - 2*e*f_2*h_2^2*p_3*p_4^2*s_2^2*v*x - e*h_1*h_2^2*p_3*p_4*s_2^2*v^2*x - e*h_1*h_2^2*p_3^2*p_4*s_2^2*v*x - 2*f_2*g_2*h_2^2*p_3*p_4^2*s_2^2*v*x + 4*f_1*f_2*h_1*h_2*j*p_3*s_2*v*x + 4*f_1*f_2*h_2*j*p_3*p_4*s_2*v*x + 4*f_2*h_1*h_2*j*p_3*p_4*s_2*v*x + e*f_1*f_2*g_2*h_2^2*p_4*s_2^2*v^2*x + e*f_1*f_2^2*g_2*h_2^2*p_4*s_2^2*v*x + e*f_2*g_2*h_1*h_2^2*p_4*s_2^2*v^2*x + e*f_2*g_2*h_2^2*j*p_4^2*s_2^2*v*x - e*f_1*f_2*h_1*h_2^2*s_1*s_2^2*v^2*x - e*f_1*f_2^2*h_1*h_2^2*s_1*s_2^2*v*x + 2*e*f_2*g_2*h_2^2*p_3*p_4^2*s_2^2*v*x - e*f_1*h_1*h_2^2*p_3*s_1*s_2^2*v^2*x - e*f_1*h_1*h_2^2*p_3^2*s_1*s_2^2*v*x - e*f_2^2*h_1*h_2^2*p_4*s_1*s_2^2*v*x - 2*e*f_1*f_2*g_1*h_2*j*p_3*s_2*v^2 - 3*e*f_1*f_2*g_1*h_2*j*p_3^2*s_2*v - 2*f_1*f_2*g_2*h_1*h_2*j*p_3^2*s_2*x - 2*e*f_2*g_1*h_2*j*p_3*p_4*s_2*v^2 - 3*e*f_2*g_1*h_2*j*p_3^2*p_4*s_2*v - f_1*f_2*g_2*h_1*h_2*j*s_2*v^2*x + e*f_1*f_2*g_2*j*p_3*p_4*v^2*x + e*f_1*f_2*g_2*j*p_3^2*p_4*v*x - 2*f_1*f_2*g_2*h_2*j*p_3^2*p_4*s_2*x + e*f_1*f_2*g_2*h_1*p_3*s_1*v^3*x + e*f_1*f_2*g_2*h_1*p_3^3*s_1*v*x + e*f_1*f_2*g_2*h_2*p_4*s_2*v^3*x - 2*f_2*g_2*h_1*h_2*j*p_3^2*p_4*s_2*x + e*f_2*g_2*h_1*h_2*p_4*s_2*v^3*x - 2*e*f_1*f_2*h_1*j*p_3*s_1*v^2*x - 2*e*f_1*f_2*h_1*j*p_3^2*s_1*v*x - e*f_1*f_2*h_2*j*p_4*s_2*v^2*x - 4*f_1*f_2*g_2*h_1*h_2*p_3*s_2*v^2*x - 
                                           5*f_1*f_2*g_2*h_1*h_2*p_3^2*s_2*v*x - 3*f_1*f_2^2*g_2*h_1*h_2*p_3*s_2*v*x - e*f_1*f_2*h_1*h_2*s_1*s_2*v^3*x + e*f_1*h_1*h_2*j*p_3*s_2*v^2*x + e*f_1*h_1*h_2*j*p_3^2*s_2*v*x - f_1*f_2*g_2*h_2*j*p_4*s_2*v^2*x - f_2*g_2*h_1*h_2*j*p_4*s_2*v^2*x - 4*e*f_1*f_2*h_2*p_3*p_4*s_2*v^2*x - 4*e*f_1*f_2*h_2*p_3^2*p_4*s_2*v*x - 2*e*f_1*f_2^2*h_2*p_3*p_4*s_2*v*x - 3*e*f_2*h_1*h_2*p_3*p_4*s_2*v^2*x - 2*e*f_2*h_1*h_2*p_3^2*p_4*s_2*v*x - 4*f_1*f_2*g_2*h_2*p_3*p_4*s_2*v^2*x - 5*f_1*f_2*g_2*h_2*p_3^2*p_4*s_2*v*x - 3*f_1*f_2^2*g_2*h_2*p_3*p_4*s_2*v*x - 2*e*f_2*h_1*j*p_3*p_4*s_1*v^2*x - 2*e*f_2*h_1*j*p_3^2*p_4*s_1*v*x - e*f_1*h_2*j*p_3*p_4*s_2*v^2*x - e*f_1*h_2*j*p_3^2*p_4*s_2*v*x - 2*e*f_2*h_2*j*p_3*p_4^2*s_2*v*x - 4*f_2*g_2*h_1*h_2*p_3*p_4*s_2*v^2*x - 5*f_2*g_2*h_1*h_2*p_3^2*p_4*s_2*v*x - 3*f_2^2*g_2*h_1*h_2*p_3*p_4*s_2*v*x - e*f_1*h_1*h_2*p_3*s_1*s_2*v^3*x - 2*e*f_1*h_1*h_2*p_3^3*s_1*s_2*v*x - 3*f_2*g_2*h_2*j*p_3*p_4^2*s_2*v*x - e*f_1*f_2*g_1*h_2^2*j*p_3*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*j*p_3*s_2^2*x - e*f_1*f_2*h_1*h_2^2*j*s_2^2*v*x - e*f_2*g_1*h_2^2*j*p_3*p_4*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*j*s_2^2*v*x - f_1*f_2*g_2*h_2^2*j*p_3*p_4*s_2^2*x + 2*e*f_1*f_2*g_2*h_1*p_3^2*s_1*v^2*x + e*f_1*f_2^2*g_2*h_1*p_3*s_1*v^2*x + e*f_1*f_2^2*g_2*h_1*p_3^2*s_1*v*x + e*f_1*f_2^2*g_2*h_2*p_4*s_2*v^2*x - f_2*g_2*h_1*h_2^2*j*p_3*p_4*s_2^2*x - e*f_1*f_2*h_2^2*j*p_4*s_2^2*v*x - 2*f_1*f_2*g_2*h_1*h_2^2*p_3*s_2^2*v*x + e*f_2*g_2*h_2*j*p_4^2*s_2*v^2*x - e*f_1*f_2^2*h_1*h_2*s_1*s_2*v^2*x - e*f_2*h_1*h_2^2*j*p_4*s_2^2*v*x - f_1*f_2*g_2*h_2^2*j*p_4*s_2^2*v*x - f_2*g_2*h_1*h_2^2*j*p_4*s_2^2*v*x - 2*e*f_1*f_2*h_2^2*p_3*p_4*s_2^2*v*x + e*f_2^2*g_2*h_1*p_3*p_4*s_1*v^2*x + e*f_2^2*g_2*h_1*p_3^2*p_4*s_1*v*x + 4*e*f_2*g_2*h_2*p_3*p_4^2*s_2*v^2*x + 
                                           4*e*f_2*g_2*h_2*p_3^2*p_4^2*s_2*v*x + 2*e*f_2^2*g_2*h_2*p_3*p_4^2*s_2*v*x - e*f_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 2*f_1*f_2*g_2*h_2^2*p_3*p_4*s_2^2*v*x - 2*f_2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 3*e*f_1*h_1*h_2*p_3^2*s_1*s_2*v^2*x - e*f_2^2*h_1*h_2*p_4*s_1*s_2*v^2*x - e*f_1*f_2*h_1*h_2*j*s_1*s_2*v^2*x + 4*e*f_1*f_2*g_2*h_2*p_3*p_4*s_2*v^2*x + 4*e*f_1*f_2*g_2*h_2*p_3^2*p_4*s_2*v*x + 2*e*f_1*f_2^2*g_2*h_2*p_3*p_4*s_2*v*x + 4*e*f_2*g_2*h_1*h_2*p_3*p_4*s_2*v^2*x + 4*e*f_2*g_2*h_1*h_2*p_3^2*p_4*s_2*v*x + e*f_2*g_2*h_1*j*p_3*p_4*s_1*v^2*x + e*f_2*g_2*h_1*j*p_3^2*p_4*s_1*v*x + 2*e*f_2*g_2*h_2*j*p_3*p_4^2*s_2*v*x - 4*e*f_1*f_2*h_1*h_2*p_3*s_1*s_2*v^2*x - 4*e*f_1*f_2*h_1*h_2*p_3^2*s_1*s_2*v*x - 2*e*f_1*f_2^2*h_1*h_2*p_3*s_1*s_2*v*x - 2*e*f_1*h_1*h_2*j*p_3*s_1*s_2*v^2*x - 2*e*f_1*h_1*h_2*j*p_3^2*s_1*s_2*v*x - e*f_2*h_1*h_2*j*p_4*s_1*s_2*v^2*x - e*f_2*h_1*h_2*p_3*p_4*s_1*s_2*v^2*x - 2*e*f_2*h_1*h_2*p_3^2*p_4*s_1*s_2*v*x - 2*e*f_2^2*h_1*h_2*p_3*p_4*s_1*s_2*v*x - e*h_1*h_2*j*p_3*p_4*s_1*s_2*v^2*x - e*h_1*h_2*j*p_3^2*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*j*s_2^2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*p_3*s_2^2*v*x + e*f_1*f_2*g_2*h_2^2*j*p_4*s_2^2*v*x + e*f_1*f_2^2*g_2*h_1*h_2*s_1*s_2*v^2*x + e*f_2*g_2*h_1*h_2^2*j*p_4*s_2^2*v*x + 2*e*f_1*f_2*g_2*h_2^2*p_3*p_4*s_2^2*v*x + 2*e*f_2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 2*e*f_1*f_2*h_1*h_2^2*p_3*s_1*s_2^2*v*x + e*f_2^2*g_2*h_1*h_2*p_4*s_1*s_2*v^2*x - e*f_2*h_1*h_2^2*p_3*p_4*s_1*s_2^2*v*x - 3*f_1*f_2*g_2*h_1*h_2*j*p_3*s_2*v*x - 2*e*f_1*f_2*h_2*j*p_3*p_4*s_2*v*x - 3*f_1*f_2*g_2*h_2*j*p_3*p_4*s_2*v*x - 3*f_2*g_2*h_1*h_2*j*p_3*p_4*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*s_1*s_2^2*v^2*x + e*f_1*f_2^2*g_2*h_1*h_2^2*s_1*s_2^2*v*x + e*f_2^2*g_2*h_1*h_2^2*p_4*s_1*s_2^2*v*x + 
                                           e*f_1*f_2*g_2*h_1*h_2*p_3*s_2*v^2*x + 2*e*f_1*f_2*g_2*h_1*h_2*p_3^2*s_2*v*x + e*f_1*f_2*g_2*h_1*j*p_3*s_1*v^2*x + e*f_1*f_2*g_2*h_1*j*p_3^2*s_1*v*x + e*f_1*f_2*g_2*h_2*j*p_4*s_2*v^2*x + e*f_1*f_2*g_2*h_1*h_2*s_1*s_2*v^3*x + e*f_1*f_2*g_2*h_1*h_2*j*p_3*s_2*v*x + 2*e*f_1*f_2*g_2*h_2*j*p_3*p_4*s_2*v*x + e*f_2*g_2*h_1*h_2*j*p_3*p_4*s_2*v*x - 2*e*f_1*f_2*h_1*h_2*j*p_3*s_1*s_2*v*x - 2*e*f_2*h_1*h_2*j*p_3*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2*j*s_1*s_2*v^2*x + 3*e*f_1*f_2*g_2*h_1*h_2*p_3*s_1*s_2*v^2*x + 2*e*f_1*f_2*g_2*h_1*h_2*p_3^2*s_1*s_2*v*x + 2*e*f_1*f_2^2*g_2*h_1*h_2*p_3*s_1*s_2*v*x + e*f_2*g_2*h_1*h_2*j*p_4*s_1*s_2*v^2*x + 2*e*f_2^2*g_2*h_1*h_2*p_3*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*p_3*s_1*s_2^2*v*x + e*f_1*f_2*g_2*h_1*h_2*j*p_3*s_1*s_2*v*x + e*f_2*g_2*h_1*h_2*j*p_3*p_4*s_1*s_2*v*x))/(p_2*p_3*(p_3 + h_2*s_2)*(a + p_1)*(f_1 + p_4)*(h_1 + p_4)*(p_3 + v)*(p_3 + v + h_2*s_2)*(f_2 + j + p_3)*(f_2 + j + p_3 + v)))



# Function to calculate R using parameters used in simulations

calculate_R <- function(params) {
  R_value <- with(as.list(params), eval(R_formula))
  return(c(params, R_value = R_value))
}

# Data frame to store the results
Reproduction_number <- data.frame(matrix(ncol = length(parameters_list_updated) + 1, nrow = 0))
names(Reproduction_number) <- c(names(parameters_list_updated), "R_value")

# Function to calculate the R value for each set of parameters - parameters_list_updated
for (i in 1:num_simulations) {
  # Extract parameters for the each i simulation
  params <- sapply(parameters_list_updated, function(x) x[i])
  # Calculate R value 
  calculated_r_number <- calculate_R(params)
  # Store the results
  Reproduction_number <- rbind(Reproduction_number, as.data.frame(t(calculated_r_number)))
}


# View the R0 and parameters used
View(Reproduction_number)
median(Reproduction_number$R_value)
quantile(Reproduction_number$R_value, probs = c(0.25, 0.5, 0.75))

mean(Reproduction_number$R_value)
sd(Reproduction_number$R_value)


# Visualizing the distribution of the basic reproduction number
Reproduction_number <- Reproduction_number %>%
  mutate(R_value_rounded = round(R_value, 1))

bar_R0 <- ggplot(Reproduction_number, aes(x = R_value_rounded)) +
  geom_bar(stat = "count", fill = "gray", color = "black") +  
  labs(title = "a) Basic reproduction number distribution", x = "R0 value", y = "Frequency") +
  theme_minimal() +
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())



# Boxplot of R0
boxplot_R <- ggplot(Reproduction_number, aes(x = "", y = R_value)) +
  geom_boxplot(fill = "gray", color = "black") +
  theme_minimal() +
  theme(panel.border = element_rect(colour = "black", fill=NA, size=1), 
        panel.grid.major = element_blank(),  
        panel.grid.minor = element_blank()) + # 
  labs(title = "b) R0 boxplot", x = "", y = "R0 value")
