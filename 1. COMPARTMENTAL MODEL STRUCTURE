# Load necessary libraries
install.packages("pacman")
library(pacman)


# Use p_load function from 'pacman' to load required packages
p_load(deSolve, reshape2, ggplot2, dplyr)



# 1.1 MODEL STRUCTURE AND PARAMETERS DEFINITION

# Define initial conditions for the model, representing the starting number of individuals in each compartment.

initial_conditions <- c(
  R = 600,        # Non-susceptible
  S = 0,          # Susceptible
  E = 0,          # Asymptomatic carriers type E
  C = 0,          # Asymptomatic carriers type C
  K_1 = 0,        # Treated asymptomatic carriers type E
  K_2 = 0,        # Treated asymptomatic carriers type C
  G_1 = 0,        # Isolated asymptomatic carriers type E
  G_2 = 0,        # Isolated asymptomatic carriers type C
  I = 0,          # Symptomatic patients 
  A = 0,          # Isolated and treated symptomatic patients 
  Admission = 0,  # Cumulative number of admissions
  Incidence = 0   # CDI incidence
)

# Define parameters for the model
parameters <- c(
  delta = 0.0004043506,    # Transmission rate of infected individuals (Any value that will be optimized for the number of observed cases)
  equis = 0.7,             # Relative transmission for colonized patients.
  alfa = 0.32,             # Rate of antibiotic use.
  epsilon = 0.13,          # Fraction of asymptomatic carriers who develop symptomatic disease.
  ve = 1 / 4,              # Progression rate to symptomatic disease.
  lambda = 76,             # Admission rate to the hospital or facility.
  ene = 0.08,              # Overall proportion of asymptomatic carriers at admission.
  pi = 0.005,              # Proportion of infected patients at admission.
  eme = 0.12,              # Proportion of pre-symptomatic patients at admission. 
  zeta = 0.22,             # Proportion of susceptible patients at admission (patient with history of antibiotic use before admission)
  psi_1 = 1 / 6,           # Discharge rate for non-colonized population.
  psi_2 = 1 / 6,           # Discharge rate for susceptible population.
  psi_3 = 1 / 6,           # Discharge rate for asymptomatic carriers.
  psi_4 = 1 / 12,          # Discharge rate for infected population.
  ache_1 = 1 / 5,          # Bacterial clearance rate due to treatment for infected patients.
  ache_2 = 1 / 5,          # Bacterial clearance rate due to treatment for asymptomatic patients.
  gamma_1 = 0.5,           # Relative reduction of transmission due to contact precautions on symptomatic patients. Effectiveness of contact precautions.
  gamma_2 = 0.5,           # Relative reduction of transmission due to contact precautions on asymptomatic patients. Effectiveness of contact precautions.
  efe_2 = 0,               # Diagnosis rate of asymptomatic carriers.
  efe_1 = 0.90,            # Diagnosis rate of symptomatic carriers.
  jota = 0,                # Treatment rate of asymptomatic carriers.
  sigma_1 = 0.7,           # Fraction of cured symptomatic carriers after treatment. Effectiveness of treatment.
  sigma_2 = 0.7            # Fraction of cured asymptomatic carriers after treatment. Effectiveness of treatment.
)

follow_up_duration = 570 #Study period in days.
times <- seq(from = 0, to = follow_up_duration, by = 1) # Time steps (days)

# Define the model
sir_model <- function(time, state, parameters) {  
  with(as.list(c(state, parameters)), { 
    
    # Calculate the proportion of patients arriving at C compartment
    kappa=1-eme
    
    # Calculate the proportion of susceptible arriving at S compartment from community
    omega= 1-(zeta+pi+ene)
    
    # Define the force of infection (beta) for each group capable of transmitting the infection, 
    # taking into account transmission rate, relative transmission constant for asymptomatic carriers, and effectiveness of contact precautions.
    B1 = delta                          #For symptomatic patients
    B2 = delta * (1-gamma_1)            #For symptomatic under contact precautions
    B3 = delta * equis                  #For asymptomatic carriers
    B4 = delta * equis * (1-gamma_2)    #For asymptomatic carriers under contact precautions
    
    # The differential equations
    dR= lambda*omega - psi_1*R - alfa*R
    dS= alfa*R - (B1*I+B2*A+B3*E+B3*C+B3*K_1+B3*K_2+B4*G_1+B4*G_2)*S - psi_2*S + sigma_2*ache_2*K_1 + sigma_2*ache_2*K_1 + sigma_1*ache_1*A + lambda*zeta
   
    dE= epsilon*(B1*I+B2*A+B3*E+B3*C+B3*K_1+B3*K_2+B4*G_1+B4*G_2)*S + lambda*ene*eme - jota*E - ve*E - efe_2*E - psi_3*E
    dC= (1-epsilon)*(B1*I+B2*A+B3*E+B3*C+B3*K_1+B3*K_2+B4*G_1+B4*G_2)*S + lambda*ene*kappa - psi_3*C - jota*C - efe_2*C + (1-sigma_1)*ache_1*A
    dK_1= jota*E - sigma_2*ache_2*K_1 - psi_3*K_1 - ve*K_1
    dK_2= jota*C - sigma_2*ache_2*K_2 - psi_3*K_2
    dG_1= efe_2*E - psi_3*G_1 - ve*G_1 
    dG_2= efe_2*C - psi_3*G_2 
    
    dI= ve*E + lambda*pi - psi_4*I - efe_1*I
    dA= efe_1*I - (1-sigma_1)*ache_1*A - sigma_1*ache_1*A - psi_4*A + ve*K_1 + ve*G_1 
    
    dAdmission= lambda
    dIncidence= efe_1*I + ve*K_1 + ve*G_1 
    
    # Return the number of people in each compartments at each time step 
   
    return(list(c(dR, dS, dE, dC, dK_1,dK_2, dG_1, dG_2, dI, dA, dAdmission, dIncidence))) 
  })
  
}

# Run simulation
output <- as.data.frame(ode(y = initial_conditions, 
                            times = times, 
                            func = sir_model,
                            parms = parameters))

View(output)





#1.2 MODEL CALIBRATION AND TRANSMISSION RATE (DELTA) OPTIMIZATION

# Optimization of the 'delta' parameter based on the incidence of infection within our institution.

#Cases UCSF
ucsf_cdi <- data.frame(time = c( 30,  60, 90,  120,  150, 180, 210, 240,  270, 300,  330, 360,  390, 420, 450, 480, 510, 540, 570), #Time steps in days
                       number_infected = c(31, 57, 98, 118, 142, 169, 209, 247, 283, 317, 367, 411, 456, 499, 524, 550, 588, 621, 649)) #Number of cases

# Function to calculate the least squares error

error_function <- function(param) {
  delta <- param[1]  
  parameters["delta"] <- delta 
  output <- ode(y = initial_conditions, times = times, func = sir_model, parms = parameters)
  simulated <- approx(x = output[, "time"], y = output[, "Incidence"], xout = ucsf_cdi$time)$y
  sum((simulated - ucsf_cdi$number_infected)^2)
}

# Perform optimization using the Nelder-Mead method
optim_result <- optim(parameters["delta"], fn = error_function, method = "Nelder-Mead")

#Display the optimal value of 'delta' found
optim_result$par

#Update to the optimal value of 'delta' and rerun the simulation
parameters["delta"] <- optim_result$par


# Optimized model results
output_optimized<- as.data.frame(ode(y = initial_conditions, 
                     times = times, 
                     func = sir_model,
                     parms = parameters))


#Visualization of simulations and number of cases at our institution
ggplot() +
  geom_line(data = output_optimized, aes(x = time, y= Incidence)) +      
  geom_point(data = ucsf_cdi, aes(x = time, y = number_infected)
             , colour = "red") +  
  xlab("Time (days)")+                                              
  ylab("Number of infected people") +                                 
  labs(title = paste("Model fit to UCSF data with optimized delta=" ,
                     parameters["delta"]))


