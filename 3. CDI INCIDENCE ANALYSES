# Load necessary libraries
install.packages("pacman")
library(pacman)

p_load(deSolve, reshape2, ggplot2, dplyr, gridExtra, scales)



#3.1 MODEL STRUCTURE AND PARAMETERS DEFINITION
  
# Define initial conditions for the model, representing the starting number of individuals in each compartment.


initial_conditions <- c(
  R = 600,        # Non-susceptible
  S = 0,          # Susceptible
  E = 0,          # Asymptomatic carriers type E
  C = 0,          # Asymptomatic carriers type C
  K_1 = 0,        # Treated asymptomatic carriers type E
  K_2 = 0,        # Treated asymptomatic carriers type C
  G_1 = 0,        # Isolated asymptomatic carriers type E
  G_2 = 0,        # Isolated asymptomatic carriers type C
  I = 0,          # Symptomatic patients 
  A = 0,          # Isolated and treated symptomatic patients 
  Admission = 0,  # Cumulative number of admissions
  Incidence = 0   # CDI incidence
)

# Define parameters for the model
parameters <- c(
  delta = 0.0004043506,    # Transmission rate of infected individuals (Any value that will be optimized for the number of observed cases)
  equis = 0.7,             # Relative transmission for colonized patients.
  alfa = 0.32,             # Rate of antibiotic use.
  epsilon = 0.13,          # Fraction of asymptomatic carriers who develop symptomatic disease.
  ve = 1 / 4,              # Progression rate to symptomatic disease.
  lambda = 76,             # Admission rate to the hospital or facility.
  ene = 0.08,              # Overall proportion of asymptomatic carriers at admission.
  pi = 0.005,              # Proportion of infected patients at admission.
  eme = 0.12,              # Proportion of pre-symptomatic patients at admission. 
  zeta = 0.22,             # Proportion of susceptible patients at admission (patient with history of antibiotic use before admission)
  psi_1 = 1 / 6,           # Discharge rate for non-colonized population.
  psi_2 = 1 / 6,           # Discharge rate for susceptible population.
  psi_3 = 1 / 6,           # Discharge rate for asymptomatic carriers.
  psi_4 = 1 / 12,          # Discharge rate for infected population.
  ache_1 = 1 / 5,          # Bacterial clearance rate due to treatment for infected patients.
  ache_2 = 1 / 5,          # Bacterial clearance rate due to treatment for asymptomatic patients.
  gamma_1 = 0.5,           # Relative reduction of transmission due to contact precautions on symptomatic patients. Effectiveness of contact precautions.
  gamma_2 = 0.5,           # Relative reduction of transmission due to contact precautions on asymptomatic patients. Effectiveness of contact precautions.
  efe_2 = 0,               # Diagnosis rate of asymptomatic carriers.
  efe_1 = 0.90,            # Diagnosis rate of symptomatic carriers.
  jota = 0,                # Treatment rate of asymptomatic carriers.
  sigma_1 = 0.7,           # Fraction of cured symptomatic carriers after treatment. Effectiveness of treatment.
  sigma_2 = 0.7            # Fraction of cured asymptomatic carriers after treatment. Effectiveness of treatment.
)


follow_up_duration = 570 #Study period in days.
times <- seq(from = 0, to = follow_up_duration, by = 1)  # Time steps (days)

# Define the model
sir_model <- function(time, state, parameters) {  
  
  with(as.list(c(state, parameters)), { 
    
    # Calculate the proportion of patients arriving at C compartment
    kappa=1-eme
    
    # Calculate the proportion of susceptible arriving at S compartment from community
    omega= 1-(zeta+pi+ene)
    
    # Define the force of infection (beta) for each group capable of transmitting the infection, 
    # taking into account transmission rate, relative transmission constant for asymptomatic carriers, and effectiveness of contact precautions.
    B1 = delta                          #For symptomatic patients
    B2 = delta * (1-gamma_1)            #For symptomatic under contact precautions
    B3 = delta * equis                  #For asymptomatic carriers
    B4 = delta * equis * (1-gamma_2)    #For asymptomatic carriers under contact precautions
    
    # The differential equations
    
    dR= lambda*omega - psi_1*R - alfa*R
    dS= alfa*R - (B1*I+B2*A+B3*E+B3*C+B3*K_1+B3*K_2+B4*G_1+B4*G_2)*S - psi_2*S + sigma_2*ache_2*K_1 + sigma_2*ache_2*K_1 + sigma_1*ache_1*A + lambda*zeta
    dE= epsilon*(B1*I+B2*A+B3*E+B3*C+B3*K_1+B3*K_2+B4*G_1+B4*G_2)*S + lambda*ene*eme - jota*E - ve*E - efe_2*E - psi_3*E
    dC= (1-epsilon)*(B1*I+B2*A+B3*E+B3*C+B3*K_1+B3*K_2+B4*G_1+B4*G_2)*S + lambda*ene*kappa - psi_3*C - jota*C - efe_2*C + (1-sigma_1)*ache_1*A
    
    dK_1= jota*E - sigma_2*ache_2*K_1 - psi_3*K_1 - ve*K_1
    dK_2= jota*C - sigma_2*ache_2*K_2 - psi_3*K_2
    dG_1= efe_2*E - psi_3*G_1 - ve*G_1 
    dG_2= efe_2*C - psi_3*G_2 
    
    
    dI= ve*E + lambda*pi - psi_4*I - efe_1*I
    dA= efe_1*I - (1-sigma_1)*ache_1*A - sigma_1*ache_1*A - psi_4*A + ve*K_1 + ve*G_1 
    dAdmission= lambda
    dIncidence= efe_1*I + ve*K_1 + ve*G_1 
    
    # Return the number of people in each compartments at each timestep 
    
    return(list(c(dR, dS, dE, dC, dK_1,dK_2, dG_1, dG_2, dI, dA, dAdmission, dIncidence))) 
  })
  
}

# Run simulation
output <- as.data.frame(ode(y = initial_conditions, 
                            times = times, 
                            func = sir_model,
                            parms = parameters))

View(output)




#3.2 EXTENDED SENSITIVITY ANALYSIS 
# This section conducts an extended sensitivity analysis to investigate how changes in model parameters affect the incidence of CDI. 


# List of parameters for sensitivity analysis. These parameters are varied in the simulation  (+- 10%) to assess their impact on CDI transmission dynamics.
param_names <- c("delta", "equis", "alfa", "epsilon", "ve", "lambda", 
                 "ene", "pi", "eme", "zeta", "psi_1", "psi_2", "psi_3", 
                 "psi_4", "ache_1", "ache_2", "gamma_1", "gamma_2", "efe_2", "efe_1", "jota",
                 "sigma_1", "sigma_2" )


# Function to perform a simulation run with a specified parameter adjusted by a given factor. The adjustment factor represents 1% changes from -10% to +10% changes from baseline value.
# This function modifies a single parameter in the model, runs the simulation, and returns the final incidence rate per 1000 admissions.
run_simulation <- function(param_name, adjustment_factor) {
  adjusted_parameters <- parameters
  adjusted_parameters[param_name] <- parameters[param_name] * adjustment_factor
  output <- as.data.frame(ode(y = initial_conditions, 
                              times = times, 
                              func = sir_model,
                              parms = adjusted_parameters))
  output$Incidence_1000 <- (output$Incidence / output$Admission) * 1000
  return(output[nrow(output), "Incidence_1000"])
}


# Initializing a dataframe to store results of the sensitivity analysis across different adjustment factors for each parameter.
## It aims to capture how varying each parameter within a specified range influences the model outcome (CDI incidence per 1000 admissions).
results <- expand.grid(parameter = param_names, 
                       adjustment_factor = seq(-0.1, 0.1, by = 0.01), 
                       Incidence_1000 = NA_real_)

# Iterating over each combination of parameter and adjustment factor, running simulations, and storing the outcomes in the results dataframe.
for (i in 1:nrow(results)) {
  results$Incidence_1000[i] <- run_simulation(results$parameter[i], 
                                              1 + results$adjustment_factor[i])
}


# Processing the results for visualization. This includes converting adjustment factors to percentage changes for clearer interpretation in plots.
results$PercentageChange <- results$adjustment_factor * 100 # Convert adjustment factor to percentage


# Selecting parameters for graphical representation. 
parametros_graph <- c("delta", "equis", "alfa", "epsilon", "ve", "lambda", "ene", "pi", "eme", "zeta", "psi_1", "psi_2", "psi_3", "psi_4", "ache_1", "gamma_1", "efe_1", "sigma_1")

# Filtering results to include only the selected parameters. 
filtered_results <- subset(results, parameter %in% parametros_graph)
View(filtered_results)

# Function to generate and customize plots for each parameter's sensitivity analysis. 
# This function takes a filtered dataset, a parameter name, and labels, creating a plot that visually represents the sensitivity of CDI incidence to changes in that parameter.

crear_grafico <- function(data_frame, param_name, title, xlab, ylab) {
  data_frame_filtrado <- subset(data_frame, parameter == param_name)
  p <- ggplot(data_frame_filtrado, aes(x = PercentageChange, y = Incidence_1000)) +
    geom_line() +
    geom_point(data = subset(data_frame_filtrado, PercentageChange == 0), color = "black", size = 1.0) +
    ggtitle(title) +
    labs(x = xlab, y = ylab) +
    theme_minimal() +
    theme(panel.border = element_rect(colour = "black", fill=NA, size=1),
          axis.title.x = element_text(size = 8),
          axis.title.y = element_text(size = 8),
          plot.title = element_text(size = 9)) +
    ylim(13.5, 16.5)
  return(p)
  
}

#Plots
grafico_delta <- crear_grafico(filtered_results, "delta", "CDI incidence vs δ", "% change (δ)", "CDI incidence")
grafico_equis <- crear_grafico(filtered_results, "equis", "CDI incidence vs x", "% change (x)", "CDI incidence")
grafico_alfa <- crear_grafico(filtered_results, "alfa", "CDI incidence vs α", "% change (α)", "CDI incidence")
grafico_epsilon <- crear_grafico(filtered_results, "epsilon", "CDI incidence vs ε", "% change (ε)", "CDI incidence")
grafico_ve <- crear_grafico(filtered_results, "ve", "CDI incidence vs ν", "% change (ν)", "CDI incidence")
grafico_lambda <- crear_grafico(filtered_results, "lambda", "CDI incidence vs λ", "% change (λ)", "CDI incidence")
grafico_ene <- crear_grafico(filtered_results, "ene", "CDI incidence vs n", "% change (n)", "CDI incidence")
grafico_pi <- crear_grafico(filtered_results, "pi", "CDI incidence vs π", "% change (π)", "CDI incidence")
grafico_eme <- crear_grafico(filtered_results, "eme", "CDI incidence vs m", "% change of m (m)", "CDI incidence")
grafico_zeta <- crear_grafico(filtered_results, "zeta", "CDI incidence vs z", "% change of (z)", "CDI incidence")
grafico_psi_1 <- crear_grafico(filtered_results, "psi_1", "CDI incidence vs Ψ1", "% change of (Ψ1)", "CDI incidence")
grafico_psi_2 <- crear_grafico(filtered_results, "psi_2", "CDI incidence vs Ψ2", "% change of (Ψ2)", "CDI incidence")
grafico_psi_3 <- crear_grafico(filtered_results, "psi_3", "CDI incidence vs Ψ3", "% change of (Ψ3)", "CDI incidence")
grafico_psi_4 <- crear_grafico(filtered_results, "psi_4", "CDI incidence vs Ψ4", "% change of (Ψ4)", "CDI incidence")
grafico_ache_1 <- crear_grafico(filtered_results, "ache_1", "CDI incidence vs h1", "% change (h1)", "CDI incidence")
grafico_gamma_1 <- crear_grafico(filtered_results, "gamma_1", "CDI incidence vs ɣ1", "% change (ɣ1)", "CDI incidence")
grafico_efe_1 <- crear_grafico(filtered_results, "efe_1", "CDI incidence vs f1", "% change (f1)", "CDI incidence")
grafico_sigma_1 <- crear_grafico(filtered_results, "sigma_1", "CDI incidence vs σ1", "% change (σ1)", "CDI incidence")


# Combination of plots with grid.arrange function

grid.arrange(grafico_psi_3, grafico_psi_2, grafico_psi_1, grafico_psi_4, grafico_gamma_1, grafico_sigma_1, grafico_ache_1, grafico_zeta, grafico_efe_1, grafico_alfa, grafico_ve, grafico_pi, grafico_epsilon, grafico_eme, grafico_equis, grafico_lambda, grafico_delta, grafico_ene,  ncol = 6)
             




# 3.3 EXTENDED SENSITIVITY ANALYSIS OF TREATMENT AND ISOLATION ON ASYMPTOMATIC CARRIERS

# This section extends the sensitivity analysis to focus on the effects of treatment and isolation strategies on asymptomatic carriers of C. difficile. 
# It examines how variations in treatment rates and the effectiveness of isolation measures can impact the incidence of CDI.
# Define the model and initial conditions here (similar to the provided code above in section 3.1) 

# Function to simulate and calculate the incidence rate per 1000 admissions for a specific combination of two parameters 
# This allows for the examination of interactions between treatment and isolation parameters on the overall model outcome.

run_simulation <- function(param1, param2, param1_name, param2_name) {
  parameters[param1_name] <- param1
  parameters[param2_name] <- param2
  output <- as.data.frame(ode(y = initial_conditions, times = times, func = sir_model, parms = parameters))
  output <- output %>%
    mutate(Incidence_1000 = (Incidence/Admission)*1000)
  return(tail(output$Incidence_1000, 1))
}

# Function to generate dataset for contour plot visualization. 
# It systematically varies two parameters across specified ranges and computes the corresponding CDI incidence rates.
# This dataset will be used to create contour plots, visualizing how changes in two parameters simultaneously affect CDI incidence.

generate_contour_data <- function(param1_range, param2_range, param1_name, param2_name) {
  results <- expand.grid(param1 = param1_range, param2 = param2_range)
  results$Incidence_1000 <- mapply(run_simulation, results$param1, results$param2, MoreArgs = list(param1_name = param1_name, param2_name = param2_name))
  return(results)
}


# Generating data for the first contour plot, examining the impact of treatment rate (j) and treatment effectiveness (sigma_2) on asymptomatic carriers.
contour_data1 <- generate_contour_data(seq(0, 1, by = 0.1), seq(0.5, 1, by = 0.1), "jota", "sigma_2")
# Generating data for the second contour plot, focusing on the isolation rate (f2) and effectiveness of contact precautions (gamma_2) on asymptomatic carriers.
contour_data2 <- generate_contour_data(seq(0, 1, by = 0.1), seq(0.5, 1, by = 0.1), "efe_2", "gamma_2")


# Transforming the generated datasets into matrix format suitable for contour plotting. 
matrix_data_1 <- acast(contour_data1, param1 ~ param2, value.var = "Incidence_1000")
matrix_data_2 <- acast(contour_data2, param1 ~ param2, value.var = "Incidence_1000")

# Creating the first contour plot to visualize the impact of varying treatment rates and effectiveness on CDI incidence among asymptomatic carriers.

j_range <- seq(0, 1, by = 0.1)  
sigma_2_range <- seq(0.5, 1, by = 0.1)  


num_levels_3 <- 4
custom_red_palette_3 <- colorRampPalette(c( "#4e8c23", '#7fa822', '#b0c421', "#f9ce10", "#f2ae03"))
Figure_Contour_1_1 = filled.contour(j_range, sigma_2_range, matrix_data_1,  color.palette = custom_red_palette_3,
                                  plot.title = title(main = "", 
                                  xlab = "Treatment rate of asymptomatic carriers (j)" , 
                                  ylab = "Effectiveness of treatment  (σ2)"),
                                  nlevels = num_levels_3)

# Creating the second contour plot to assess the influence of isolation rates and the effectiveness of contact precautions on CDI incidence.

efe_2_range <- seq(0, 1, by = 0.1)  
gamma_2_range <- seq(0.5, 1, by = 0.1)

num_levels_4 <- 4
custom_red_palette <- colorRampPalette(c( "#4e8c23", '#7fa822', '#b0c421', "#f9ce10", "#f2ae03"))
Figure_Contour_1_2 = filled.contour(efe_2_range, gamma_2_range, matrix_data_2,  color.palette = custom_red_palette,
                                    plot.title = title(main = "", 
                                    xlab = "Isolation rate of asymptomatic carriers (f2)", ylab = "Effectiveness of contact precautions (ɣ2)"),
                                    nlevels = num_levels_4)




