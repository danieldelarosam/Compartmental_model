%4.1 Next Generation Matrix Analysis

%F matrix
syms e S B1 B2 B3 B4 % Define symbolic variables

% Definition of the matrix F with symbolic values
F = sym(zeros(8,8)); % Initialize the matrix F as a matrix of symbolic zeros

% Fill the rows of F with the new symbolic values, using e
F(1,:) = [e*B3*S, e*B3*S, e*B3*S, e*B3*S, e*B4*S,e*B4*S, e*B2*S, e*B1*S];
F(2,:) = [(1-e)*B3*S, (1-e)*B3*S, (1-e)*B3*S, (1-e)*B3*S, (1-e)*B4*S, (1-e)*B4*S, (1-e)*B2*S, (1-e)*B1*S];

% Display the matrix F
disp(F);

%V matrix
syms j v f_2 p_3 s_1 h_1 s_2 h_2 p_4 f_1 % Define symbolic variables

% Definition of the matrix V with symbolic values
V = [
-(j + v + f_2 + p_3), 0, 0, 0, 0, 0, 0, 0;
0, - (p_3 + j + f_2), 0, 0, 0, 0, (1-s_1) * h_1, 0;
j, 0, -(s_2 * h_2 + p_3 + v), 0, 0, 0, 0, 0;
0, j, 0, -(s_2 * h_2 + p_3 ), 0, 0, 0, 0;
f_2, 0, 0, 0, - (p_3 + v),0, 0, 0;
0, f_2, 0, 0, 0, -p_3, 0, 0;
v, 0, 0, 0, 0, 0, -(p_4 + f_1), 0;
0, 0, v, 0, v, 0, f_1, -((1-s_1) * h_1 + s_1 * h_1 + p_4);
];

V_neg = V * -1;
disp(V_neg);

V_invers = inv(V_neg);
disp(V_invers);


% Next Generation Matrix (Q)
Q = F * V_invers;

%eigenvalues
R_num = eig(Q);

% Display the eigenvalue
disp(R_num);

%Subtitution of some parameters
syms B1 B2 B3 B4 S d g_1 g_2 x a l p_1 p_2 z

% Define the new functions
B1_new = d;
B2_new = d * (1 - g_1);
B3_new = d * x;
B4_new = d * x * (1 - g_2);
S_new = l * (a * (1-z) + a * z + p_1 * z) / (p_2 * (a + p_1));


% Replacement in the expression R_num function
R_final = subs(R_num, {B1, B2, B3, B4, S}, {B1_new, B2_new, B3_new, B4_new, S_new});

% Display the new function R_final
disp(R_final);

% Sumplification of R_final
R_final_simpl=simplify(R_final);
disp(R_final_simpl);




%4.2 Sensitivity Index: partial derivatives of R0 function

R_0_simpl= (d*l*(a + p_1*z)*(p_3^5*p_4^2*x + f_2^2*p_3^3*p_4^2*x + j^2*p_3^3*p_4^2*x + p_3^2*p_4^2*v^3*x + 3*p_3^3*p_4^2*v^2*x + e*f_1*p_3^5*v + e*h_1*p_3^5*v + f_1*h_1*p_3^5*x + e*p_3^5*p_4*v + f_1*p_3^5*p_4*x + h_1*p_3^5*p_4*x + e*f_1*p_3^3*v^3 + 2*e*f_1*p_3^4*v^2 + e*h_1*p_3^3*v^3 + 2*e*h_1*p_3^4*v^2 + e*p_3^3*p_4*v^3 + 2*e*p_3^4*p_4*v^2 + 2*f_2*p_3^4*p_4^2*x + 2*j*p_3^4*p_4^2*x + 3*p_3^4*p_4^2*v*x + h_2^2*p_3^3*p_4^2*s_2^2*x + e*f_1*f_2*p_3^2*v^3 + 3*e*f_1*f_2*p_3^3*v^2 + e*f_1*f_2^2*p_3^3*v + e*f_2*h_1*p_3^2*v^3 + 2*e*f_2*h_1*p_3^3*v^2 - e*g_1*h_1*p_3^3*v^3 - 2*e*g_1*h_1*p_3^4*v^2 + e*f_1*j*p_3^2*v^3 + 3*e*f_1*j*p_3^3*v^2 + e*f_1*j^2*p_3^3*v + f_1*f_2^2*h_1*p_3^3*x + e*h_1*j*p_3^2*v^3 + 2*e*h_1*j*p_3^3*v^2 + f_1*h_1*j^2*p_3^3*x + e*f_2*p_3^2*p_4*v^3 + 3*e*f_2*p_3^3*p_4*v^2 + e*f_2^2*p_3^3*p_4*v - e*g_1*p_3^3*p_4*v^3 - 2*e*g_1*p_3^4*p_4*v^2 + f_1*f_2^2*p_3^3*p_4*x + e*j*p_3^2*p_4*v^3 + 3*e*j*p_3^3*p_4*v^2 + e*j^2*p_3^3*p_4*v - f_2*g_2*p_3^4*p_4^2*x + f_2^2*h_1*p_3^3*p_4*x + f_1*j^2*p_3^3*p_4*x + 2*f_2*j*p_3^3*p_4^2*x + h_1*j^2*p_3^3*p_4*x + e*h_1^2*p_3^4*v*x + f_1*h_1*p_3^2*v^3*x + 3*f_1*h_1*p_3^3*v^2*x - e*p_3^4*p_4^2*v*x + 2*h_2*p_3^4*p_4^2*s_2*x + f_1*p_3^2*p_4*v^3*x + 3*f_1*p_3^3*p_4*v^2*x + f_2*p_3*p_4^2*v^3*x + 5*f_2*p_3^3*p_4^2*v*x + h_1*p_3^2*p_4*v^3*x + 3*h_1*p_3^3*p_4*v^2*x + j*p_3*p_4^2*v^3*x + 5*j*p_3^3*p_4^2*v*x + e*f_1*f_2^2*p_3^2*v^2 + e*f_1*j^2*p_3^2*v^2 + e*f_2^2*p_3^2*p_4*v^2 + e*j^2*p_3^2*p_4*v^2 - f_2^2*g_2*p_3^3*p_4^2*x + e*h_1^2*p_3^2*v^3*x + 2*e*h_1^2*p_3^3*v^2*x - e*p_3^2*p_4^2*v^3*x - 2*e*p_3^3*p_4^2*v^2*x + 4*f_2*p_3^2*p_4^2*v^2*x + f_2^2*p_3*p_4^2*v^2*x + 2*f_2^2*p_3^2*p_4^2*v*x + 4*j*p_3^2*p_4^2*v^2*x + j^2*p_3*p_4^2*v^2*x + 2*j^2*p_3^2*p_4^2*v*x + 2*e*f_1*f_2*p_3^4*v + e*f_2*h_1*p_3^4*v - e*g_1*h_1*p_3^5*v + 2*e*f_1*j*p_3^4*v + 2*f_1*f_2*h_1*p_3^4*x + e*h_1*j*p_3^4*v + 2*f_1*h_1*j*p_3^4*x + 2*e*f_2*p_3^4*p_4*v - e*g_1*p_3^5*p_4*v + 2*f_1*f_2*p_3^4*p_4*x + 2*e*j*p_3^4*p_4*v + 2*f_2*h_1*p_3^4*p_4*x + 2*f_1*j*p_3^4*p_4*x + 2*h_1*j*p_3^4*p_4*x + 3*f_1*h_1*p_3^4*v*x + 3*f_1*p_3^4*p_4*v*x + 3*h_1*p_3^4*p_4*v*x + e*f_1*h_2^2*p_3^3*s_2^2*v + e*h_1*h_2^2*p_3^3*s_2^2*v + 2*e*f_2*h_1^2*p_3^2*v^2*x + f_1*h_1*h_2^2*p_3^3*s_2^2*x + 2*e*h_1^2*j*p_3^2*v^2*x + e*h_2^2*p_3^3*p_4*s_2^2*v - 3*e*f_2*p_3^2*p_4^2*v^2*x - e*f_2^2*p_3*p_4^2*v^2*x - e*f_2^2*p_3^2*p_4^2*v*x + f_1*h_2^2*p_3^3*p_4*s_2^2*x + 2*f_2^2*h_2*p_3^2*p_4^2*s_2*x - 3*f_2*g_2*p_3^2*p_4^2*v^2*x - f_2^2*g_2*p_3*p_4^2*v^2*x - 2*f_2^2*g_2*p_3^2*p_4^2*v*x + h_1*h_2^2*p_3^3*p_4*s_2^2*x - 3*e*j*p_3^2*p_4^2*v^2*x - e*j^2*p_3*p_4^2*v^2*x - e*j^2*p_3^2*p_4^2*v*x + h_2*j^2*p_3^2*p_4^2*s_2*x - e*h_1^2*p_3^2*s_1*v^3*x - 2*e*h_1^2*p_3^3*s_1*v^2*x + f_2^2*h_2*p_4^2*s_2*v^2*x + 4*h_2*p_3^2*p_4^2*s_2*v^2*x - e*f_2*g_1*h_1*p_3^4*v + 2*e*f_1*f_2*j*p_3^3*v - f_1*f_2*g_2*h_1*p_3^4*x - e*g_1*h_1*j*p_3^4*v + 2*f_1*f_2*h_1*j*p_3^3*x - e*f_2*g_1*p_3^4*p_4*v + 2*e*f_2*j*p_3^3*p_4*v - f_1*f_2*g_2*p_3^4*p_4*x - e*g_1*j*p_3^4*p_4*v + 2*e*f_1*h_2*p_3^4*s_2*v - f_2*g_2*h_1*p_3^4*p_4*x + 2*e*h_1*h_2*p_3^4*s_2*v + 2*f_1*f_2*j*p_3^3*p_4*x + 2*f_2*h_1*j*p_3^3*p_4*x - e*f_1*h_1*p_3^4*v*x + 2*f_1*h_1*h_2*p_3^4*s_2*x + f_1*f_2*h_1*p_3*v^3*x + 5*f_1*f_2*h_1*p_3^3*v*x + f_1*h_1*j*p_3*v^3*x + 5*f_1*h_1*j*p_3^3*v*x + 2*e*h_2*p_3^4*p_4*s_2*v - e*f_1*p_3^4*p_4*v*x + 2*f_1*h_2*p_3^4*p_4*s_2*x + f_1*f_2*p_3*p_4*v^3*x + 5*f_1*f_2*p_3^3*p_4*v*x + 2*h_1*h_2*p_3^4*p_4*s_2*x + f_2*h_1*p_3*p_4*v^3*x + 5*f_2*h_1*p_3^3*p_4*v*x + f_1*j*p_3*p_4*v^3*x + 5*f_1*j*p_3^3*p_4*v*x + h_1*j*p_3*p_4*v^3*x + 5*h_1*j*p_3^3*p_4*v*x + e*f_1*h_2^2*p_3^2*s_2^2*v^2 + e*h_1*h_2^2*p_3^2*s_2^2*v^2 + e*h_2^2*p_3^2*p_4*s_2^2*v^2 + 2*f_2*h_2^2*p_3^2*p_4^2*s_2^2*x + f_2^2*h_2^2*p_3*p_4^2*s_2^2*x + h_2^2*j*p_3^2*p_4^2*s_2^2*x + f_2*h_2^2*p_4^2*s_2^2*v^2*x + f_2^2*h_2^2*p_4^2*s_2^2*v*x + h_2^2*p_3*p_4^2*s_2^2*v^2*x + 2*h_2^2*p_3^2*p_4^2*s_2^2*v*x - e*f_2*g_1*h_1*p_3^2*v^3 - 2*e*f_2*g_1*h_1*p_3^3*v^2 + 2*e*f_1*f_2*j*p_3^2*v^2 - f_1*f_2^2*g_2*h_1*p_3^3*x - e*g_1*h_1*j*p_3^2*v^3 - 2*e*g_1*h_1*j*p_3^3*v^2 - e*f_2*g_1*p_3^2*p_4*v^3 - 2*e*f_2*g_1*p_3^3*p_4*v^2 + 2*e*f_2*j*p_3^2*p_4*v^2 - f_1*f_2^2*g_2*p_3^3*p_4*x - e*g_1*j*p_3^2*p_4*v^3 - 2*e*g_1*j*p_3^3*p_4*v^2 + e*f_1*h_2*p_3^2*s_2*v^3 + 3*e*f_1*h_2*p_3^3*s_2*v^2 - f_2^2*g_2*h_1*p_3^3*p_4*x + e*h_1*h_2*p_3^2*s_2*v^3 + 3*e*h_1*h_2*p_3^3*s_2*v^2 - f_2*g_2*j*p_3^3*p_4^2*x - e*f_1*h_1*p_3^2*v^3*x - 2*e*f_1*h_1*p_3^3*v^2*x + e*f_2*h_1^2*p_3*v^3*x + e*f_2*h_1^2*p_3^3*v*x + 4*f_1*f_2*h_1*p_3^2*v^2*x + f_1*f_2^2*h_1*p_3*v^2*x + 2*f_1*f_2^2*h_1*p_3^2*v*x + e*h_1^2*j*p_3*v^3*x + e*h_1^2*j*p_3^3*v*x + 4*f_1*h_1*j*p_3^2*v^2*x + f_1*h_1*j^2*p_3*v^2*x + 2*f_1*h_1*j^2*p_3^2*v*x + e*h_2*p_3^2*p_4*s_2*v^3 + 3*e*h_2*p_3^3*p_4*s_2*v^2 - e*f_1*p_3^2*p_4*v^3*x - 2*e*f_1*p_3^3*p_4*v^2*x - e*f_2*p_3*p_4^2*v^3*x - 2*e*f_2*p_3^3*p_4^2*v*x + 4*f_2*h_2*p_3^3*p_4^2*s_2*x + 4*f_1*f_2*p_3^2*p_4*v^2*x + f_1*f_2^2*p_3*p_4*v^2*x + 2*f_1*f_2^2*p_3^2*p_4*v*x - f_2*g_2*p_3*p_4^2*v^3*x - 3*f_2*g_2*p_3^3*p_4^2*v*x + 4*f_2*h_1*p_3^2*p_4*v^2*x + f_2^2*h_1*p_3*p_4*v^2*x + 2*f_2^2*h_1*p_3^2*p_4*v*x - e*j*p_3*p_4^2*v^3*x - 2*e*j*p_3^3*p_4^2*v*x + 3*h_2*j*p_3^3*p_4^2*s_2*x - e*h_1^2*p_3^4*s_1*v*x + 4*f_1*j*p_3^2*p_4*v^2*x + f_1*j^2*p_3*p_4*v^2*x + 2*f_1*j^2*p_3^2*p_4*v*x + 2*f_2*j*p_3*p_4^2*v^2*x + 4*f_2*j*p_3^2*p_4^2*v*x + f_2*h_2*p_4^2*s_2*v^3*x + 4*h_1*j*p_3^2*p_4*v^2*x + h_1*j^2*p_3*p_4*v^2*x + 2*h_1*j^2*p_3^2*p_4*v*x + h_2*p_3*p_4^2*s_2*v^3*x + 5*h_2*p_3^3*p_4^2*s_2*v*x + 4*e*f_1*f_2*h_2*p_3^2*s_2*v^2 + e*f_1*f_2^2*h_2*p_3*s_2*v^2 + 2*e*f_1*f_2^2*h_2*p_3^2*s_2*v + 3*e*f_2*h_1*h_2*p_3^2*s_2*v^2 - e*g_1*h_1*h_2*p_3^2*s_2*v^3 - 3*e*g_1*h_1*h_2*p_3^3*s_2*v^2 + 4*e*f_1*h_2*j*p_3^2*s_2*v^2 + e*f_1*h_2*j^2*p_3*s_2*v^2 + e*f_1*h_2*j^2*p_3^2*s_2*v - 3*e*f_1*f_2*h_1*p_3^2*v^2*x - e*f_1*f_2^2*h_1*p_3*v^2*x - e*f_1*f_2^2*h_1*p_3^2*v*x + 2*f_1*f_2^2*h_1*h_2*p_3^2*s_2*x + 3*e*h_1*h_2*j*p_3^2*s_2*v^2 - e*f_2*g_2*h_1^2*p_3*v^3*x - e*f_2*g_2*h_1^2*p_3^3*v*x - 3*f_1*f_2*g_2*h_1*p_3^2*v^2*x - f_1*f_2^2*g_2*h_1*p_3*v^2*x - 2*f_1*f_2^2*g_2*h_1*p_3^2*v*x - 3*e*f_1*h_1*j*p_3^2*v^2*x - e*f_1*h_1*j^2*p_3*v^2*x - e*f_1*h_1*j^2*p_3^2*v*x + f_1*h_1*h_2*j^2*p_3^2*s_2*x + e*f_2*h_1^2*h_2*s_2*v^3*x + 4*e*f_2*h_2*p_3^2*p_4*s_2*v^2 + e*f_2^2*h_2*p_3*p_4*s_2*v^2 + 2*e*f_2^2*h_2*p_3^2*p_4*s_2*v + f_1*f_2^2*h_1*h_2*s_2*v^2*x - e*g_1*h_2*p_3^2*p_4*s_2*v^3 - 3*e*g_1*h_2*p_3^3*p_4*s_2*v^2 - 3*e*f_1*f_2*p_3^2*p_4*v^2*x - e*f_1*f_2^2*p_3*p_4*v^2*x - e*f_1*f_2^2*p_3^2*p_4*v*x + 2*f_1*f_2^2*h_2*p_3^2*p_4*s_2*x + 4*e*h_2*j*p_3^2*p_4*s_2*v^2 + e*h_2*j^2*p_3*p_4*s_2*v^2 + e*h_2*j^2*p_3^2*p_4*s_2*v + e*f_2*g_2*p_3*p_4^2*v^3*x + 2*e*f_2*g_2*p_3^3*p_4^2*v*x - 2*f_2*g_2*h_2*p_3^3*p_4^2*s_2*x - e*f_2*h_1*p_3^2*p_4*v^2*x - e*f_2^2*h_1*p_3*p_4*v^2*x - e*f_2^2*h_1*p_3^2*p_4*v*x - 3*f_1*f_2*g_2*p_3^2*p_4*v^2*x - f_1*f_2^2*g_2*p_3*p_4*v^2*x - 2*f_1*f_2^2*g_2*p_3^2*p_4*v*x + 2*f_2^2*h_1*h_2*p_3^2*p_4*s_2*x - 3*e*f_1*j*p_3^2*p_4*v^2*x - e*f_1*j^2*p_3*p_4*v^2*x - e*f_1*j^2*p_3^2*p_4*v*x - 2*e*f_2*j*p_3*p_4^2*v^2*x - 2*e*f_2*j*p_3^2*p_4^2*v*x + f_1*h_2*j^2*p_3^2*p_4*s_2*x - 3*f_2*g_2*h_1*p_3^2*p_4*v^2*x - f_2^2*g_2*h_1*p_3*p_4*v^2*x - 2*f_2^2*g_2*h_1*p_3^2*p_4*v*x + 3*f_2*h_2*j*p_3^2*p_4^2*s_2*x - e*f_2*h_1^2*p_3*s_1*v^3*x - e*f_2*h_1^2*p_3^3*s_1*v*x - e*f_2*h_2*p_4^2*s_2*v^3*x - e*h_1*j*p_3^2*p_4*v^2*x - e*h_1*j^2*p_3*p_4*v^2*x - e*h_1*j^2*p_3^2*p_4*v*x - f_2*g_2*j*p_3*p_4^2*v^2*x - 2*f_2*g_2*j*p_3^2*p_4^2*v*x + f_1*f_2^2*h_2*p_4*s_2*v^2*x + h_1*h_2*j^2*p_3^2*p_4*s_2*x + e*h_1^2*h_2*p_3*s_2*v^3*x + 2*e*h_1^2*h_2*p_3^3*s_2*v*x - f_2*g_2*h_2*p_4^2*s_2*v^3*x + 4*f_1*h_1*h_2*p_3^2*s_2*v^2*x + f_2^2*h_1*h_2*p_4*s_2*v^2*x - e*h_1^2*j*p_3*s_1*v^3*x - e*h_1^2*j*p_3^3*s_1*v*x + f_2*h_2*j*p_4^2*s_2*v^2*x - e*h_1*p_3^2*p_4*s_1*v^3*x - 2*e*h_1*p_3^3*p_4*s_1*v^2*x - e*h_2*p_3*p_4^2*s_2*v^3*x - 2*e*h_2*p_3^3*p_4^2*s_2*v*x + 4*f_1*h_2*p_3^2*p_4*s_2*v^2*x + 5*f_2*h_2*p_3*p_4^2*s_2*v^2*x + 8*f_2*h_2*p_3^2*p_4^2*s_2*v*x + 3*f_2^2*h_2*p_3*p_4^2*s_2*v*x + 4*h_1*h_2*p_3^2*p_4*s_2*v^2*x + 2*h_2*j*p_3*p_4^2*s_2*v^2*x + 5*h_2*j*p_3^2*p_4^2*s_2*v*x + h_2*j^2*p_3*p_4^2*s_2*v*x + e*f_1*f_2*h_2^2*p_3*s_2^2*v^2 + 2*e*f_1*f_2*h_2^2*p_3^2*s_2^2*v + e*f_1*f_2^2*h_2^2*p_3*s_2^2*v + e*f_2*h_1*h_2^2*p_3*s_2^2*v^2 + e*f_2*h_1*h_2^2*p_3^2*s_2^2*v - e*g_1*h_1*h_2^2*p_3^3*s_2^2*v + e*f_1*h_2^2*j*p_3*s_2^2*v^2 + e*f_1*h_2^2*j*p_3^2*s_2^2*v + 2*f_1*f_2*h_1*h_2^2*p_3^2*s_2^2*x + f_1*f_2^2*h_1*h_2^2*p_3*s_2^2*x - 2*e*f_2*g_2*h_1^2*p_3^2*v^2*x + e*h_1*h_2^2*j*p_3*s_2^2*v^2 + e*h_1*h_2^2*j*p_3^2*s_2^2*v + f_1*h_1*h_2^2*j*p_3^2*s_2^2*x + e*f_2*h_2^2*p_3*p_4*s_2^2*v^2 + 2*e*f_2*h_2^2*p_3^2*p_4*s_2^2*v + e*f_2^2*h_2^2*p_3*p_4*s_2^2*v + f_1*f_2*h_1*h_2^2*s_2^2*v^2*x + f_1*f_2^2*h_1*h_2^2*s_2^2*v*x - e*g_1*h_2^2*p_3^3*p_4*s_2^2*v + 2*f_1*f_2*h_2^2*p_3^2*p_4*s_2^2*x + f_1*f_2^2*h_2^2*p_3*p_4*s_2^2*x + 3*e*f_2*g_2*p_3^2*p_4^2*v^2*x + e*f_2^2*g_2*p_3*p_4^2*v^2*x + e*f_2^2*g_2*p_3^2*p_4^2*v*x + e*h_2^2*j*p_3*p_4*s_2^2*v^2 + e*h_2^2*j*p_3^2*p_4*s_2^2*v - 2*f_2^2*g_2*h_2*p_3^2*p_4^2*s_2*x + 2*f_2*h_1*h_2^2*p_3^2*p_4*s_2^2*x + f_2^2*h_1*h_2^2*p_3*p_4*s_2^2*x + f_1*h_2^2*j*p_3^2*p_4*s_2^2*x + f_2*h_2^2*j*p_3*p_4^2*s_2^2*x - 2*e*f_2*h_1^2*p_3^2*s_1*v^2*x - e*f_2^2*h_2*p_4^2*s_2*v^2*x + f_1*f_2*h_2^2*p_4*s_2^2*v^2*x + f_1*f_2^2*h_2^2*p_4*s_2^2*v*x + h_1*h_2^2*j*p_3^2*p_4*s_2^2*x + 3*e*h_1^2*h_2*p_3^2*s_2*v^2*x - f_2^2*g_2*h_2*p_4^2*s_2*v^2*x + f_1*h_1*h_2^2*p_3*s_2^2*v^2*x + 2*f_1*h_1*h_2^2*p_3^2*s_2^2*v*x + f_2*h_1*h_2^2*p_4*s_2^2*v^2*x + f_2^2*h_1*h_2^2*p_4*s_2^2*v*x - 2*e*h_1^2*j*p_3^2*s_1*v^2*x + f_2*h_2^2*j*p_4^2*s_2^2*v*x - 3*e*h_2*p_3^2*p_4^2*s_2*v^2*x + f_1*h_2^2*p_3*p_4*s_2^2*v^2*x + 2*f_1*h_2^2*p_3^2*p_4*s_2^2*v*x + 3*f_2*h_2^2*p_3*p_4^2*s_2^2*v*x + h_1*h_2^2*p_3*p_4*s_2^2*v^2*x + 2*h_1*h_2^2*p_3^2*p_4*s_2^2*v*x + h_2^2*j*p_3*p_4^2*s_2^2*v*x - f_1*f_2*g_2*h_1*j*p_3^3*x + e*f_1*f_2*h_2*p_3*s_2*v^3 + 4*e*f_1*f_2*h_2*p_3^3*s_2*v + e*f_2*h_1*h_2*p_3*s_2*v^3 + 2*e*f_2*h_1*h_2*p_3^3*s_2*v - 2*e*g_1*h_1*h_2*p_3^4*s_2*v - f_1*f_2*g_2*j*p_3^3*p_4*x + e*f_1*h_2*j*p_3*s_2*v^3 + 3*e*f_1*h_2*j*p_3^3*s_2*v - e*f_1*f_2*h_1*p_3*v^3*x - 2*e*f_1*f_2*h_1*p_3^3*v*x - f_2*g_2*h_1*j*p_3^3*p_4*x + 4*f_1*f_2*h_1*h_2*p_3^3*s_2*x + e*h_1*h_2*j*p_3*s_2*v^3 + 2*e*h_1*h_2*j*p_3^3*s_2*v - f_1*f_2*g_2*h_1*p_3*v^3*x - 3*f_1*f_2*g_2*h_1*p_3^3*v*x - e*f_1*h_1*j*p_3*v^3*x - 2*e*f_1*h_1*j*p_3^3*v*x + 3*f_1*h_1*h_2*j*p_3^3*s_2*x + 2*f_1*f_2*h_1*j*p_3*v^2*x + 4*f_1*f_2*h_1*j*p_3^2*v*x + e*f_2*h_2*p_3*p_4*s_2*v^3 + 4*e*f_2*h_2*p_3^3*p_4*s_2*v + f_1*f_2*h_1*h_2*s_2*v^3*x - 2*e*g_1*h_2*p_3^4*p_4*s_2*v - e*f_1*f_2*p_3*p_4*v^3*x - 2*e*f_1*f_2*p_3^3*p_4*v*x + 4*f_1*f_2*h_2*p_3^3*p_4*s_2*x + e*h_2*j*p_3*p_4*s_2*v^3 + 3*e*h_2*j*p_3^3*p_4*s_2*v - e*f_2*h_1*p_3^3*p_4*v*x - f_1*f_2*g_2*p_3*p_4*v^3*x - 3*f_1*f_2*g_2*p_3^3*p_4*v*x + 4*f_2*h_1*h_2*p_3^3*p_4*s_2*x - e*f_1*j*p_3*p_4*v^3*x - 2*e*f_1*j*p_3^3*p_4*v*x + 3*f_1*h_2*j*p_3^3*p_4*s_2*x - f_2*g_2*h_1*p_3*p_4*v^3*x - 3*f_2*g_2*h_1*p_3^3*p_4*v*x + 2*f_1*f_2*j*p_3*p_4*v^2*x + 4*f_1*f_2*j*p_3^2*p_4*v*x - e*h_1*j*p_3^3*p_4*v*x + f_1*f_2*h_2*p_4*s_2*v^3*x + 3*h_1*h_2*j*p_3^3*p_4*s_2*x + 2*f_2*h_1*j*p_3*p_4*v^2*x + 4*f_2*h_1*j*p_3^2*p_4*v*x + f_1*h_1*h_2*p_3*s_2*v^3*x + 5*f_1*h_1*h_2*p_3^3*s_2*v*x + f_2*h_1*h_2*p_4*s_2*v^3*x - e*h_1*p_3^4*p_4*s_1*v*x + f_1*h_2*p_3*p_4*s_2*v^3*x + 5*f_1*h_2*p_3^3*p_4*s_2*v*x + h_1*h_2*p_3*p_4*s_2*v^3*x + 5*h_1*h_2*p_3^3*p_4*s_2*v*x - e*g_1*h_1*h_2^2*p_3^2*s_2^2*v^2 + e*f_2*h_1^2*h_2^2*s_2^2*v^2*x - e*g_1*h_2^2*p_3^2*p_4*s_2^2*v^2 - f_2*g_2*h_2^2*p_3^2*p_4^2*s_2^2*x - f_2^2*g_2*h_2^2*p_3*p_4^2*s_2^2*x - e*f_2*h_2^2*p_4^2*s_2^2*v^2*x - e*f_2^2*h_2^2*p_4^2*s_2^2*v*x + e*h_1^2*h_2^2*p_3*s_2^2*v^2*x + e*h_1^2*h_2^2*p_3^2*s_2^2*v*x - f_2*g_2*h_2^2*p_4^2*s_2^2*v^2*x - f_2^2*g_2*h_2^2*p_4^2*s_2^2*v*x - e*h_2^2*p_3*p_4^2*s_2^2*v^2*x - e*h_2^2*p_3^2*p_4^2*s_2^2*v*x - e*f_2*g_1*h_1*h_2*p_3*s_2*v^3 - 2*e*f_2*g_1*h_1*h_2*p_3^3*s_2*v + 2*e*f_1*f_2*h_2*j*p_3*s_2*v^2 + 3*e*f_1*f_2*h_2*j*p_3^2*s_2*v + e*f_1*f_2*g_2*h_1*p_3*v^3*x + 2*e*f_1*f_2*g_2*h_1*p_3^3*v*x - 2*f_1*f_2*g_2*h_1*h_2*p_3^3*s_2*x - e*g_1*h_1*h_2*j*p_3*s_2*v^3 - 2*e*g_1*h_1*h_2*j*p_3^3*s_2*v - 2*e*f_1*f_2*h_1*j*p_3*v^2*x - 2*e*f_1*f_2*h_1*j*p_3^2*v*x + 3*f_1*f_2*h_1*h_2*j*p_3^2*s_2*x - e*f_1*f_2*h_1*h_2*s_2*v^3*x - f_1*f_2*g_2*h_1*j*p_3*v^2*x - 2*f_1*f_2*g_2*h_1*j*p_3^2*v*x - e*f_2*g_1*h_2*p_3*p_4*s_2*v^3 - 2*e*f_2*g_1*h_2*p_3^3*p_4*s_2*v - f_1*f_2*g_2*h_1*h_2*s_2*v^3*x + e*f_1*f_2*g_2*p_3*p_4*v^3*x + 2*e*f_1*f_2*g_2*p_3^3*p_4*v*x + 2*e*f_2*h_2*j*p_3*p_4*s_2*v^2 + 3*e*f_2*h_2*j*p_3^2*p_4*s_2*v - 2*f_1*f_2*g_2*h_2*p_3^3*p_4*s_2*x + f_1*f_2*h_1*h_2*j*s_2*v^2*x - e*g_1*h_2*j*p_3*p_4*s_2*v^3 - 2*e*g_1*h_2*j*p_3^3*p_4*s_2*v + e*f_2*g_2*h_1*p_3^3*p_4*v*x - 2*e*f_1*f_2*j*p_3*p_4*v^2*x - 2*e*f_1*f_2*j*p_3^2*p_4*v*x - 2*f_2*g_2*h_1*h_2*p_3^3*p_4*s_2*x + 3*f_1*f_2*h_2*j*p_3^2*p_4*s_2*x - e*f_1*f_2*h_2*p_4*s_2*v^3*x - 2*e*f_2*h_1*j*p_3*p_4*v^2*x - 2*e*f_2*h_1*j*p_3^2*p_4*v*x - f_1*f_2*g_2*j*p_3*p_4*v^2*x - 2*f_1*f_2*g_2*j*p_3^2*p_4*v*x + 3*f_2*h_1*h_2*j*p_3^2*p_4*s_2*x - e*f_1*h_1*h_2*p_3*s_2*v^3*x - 2*e*f_1*h_1*h_2*p_3^3*s_2*v*x - f_1*f_2*g_2*h_2*p_4*s_2*v^3*x - f_2*g_2*h_1*j*p_3*p_4*v^2*x - 2*f_2*g_2*h_1*j*p_3^2*p_4*v*x + 5*f_1*f_2*h_1*h_2*p_3*s_2*v^2*x + 8*f_1*f_2*h_1*h_2*p_3^2*s_2*v*x + 3*f_1*f_2^2*h_1*h_2*p_3*s_2*v*x - f_2*g_2*h_1*h_2*p_4*s_2*v^3*x + f_1*f_2*h_2*j*p_4*s_2*v^2*x + 2*f_1*h_1*h_2*j*p_3*s_2*v^2*x + 5*f_1*h_1*h_2*j*p_3^2*s_2*v*x + f_1*h_1*h_2*j^2*p_3*s_2*v*x + f_2*h_1*h_2*j*p_4*s_2*v^2*x - e*f_2*h_1*p_3*p_4*s_1*v^3*x - e*f_2*h_1*p_3^3*p_4*s_1*v*x - e*f_1*h_2*p_3*p_4*s_2*v^3*x - 2*e*f_1*h_2*p_3^3*p_4*s_2*v*x + 5*f_1*f_2*h_2*p_3*p_4*s_2*v^2*x + 8*f_1*f_2*h_2*p_3^2*p_4*s_2*v*x + 3*f_1*f_2^2*h_2*p_3*p_4*s_2*v*x + 5*f_2*h_1*h_2*p_3*p_4*s_2*v^2*x + 8*f_2*h_1*h_2*p_3^2*p_4*s_2*v*x + 3*f_2^2*h_1*h_2*p_3*p_4*s_2*v*x - e*h_1*j*p_3*p_4*s_1*v^3*x - e*h_1*j*p_3^3*p_4*s_1*v*x + 2*f_1*h_2*j*p_3*p_4*s_2*v^2*x + 5*f_1*h_2*j*p_3^2*p_4*s_2*v*x + f_1*h_2*j^2*p_3*p_4*s_2*v*x + 4*f_2*h_2*j*p_3*p_4^2*s_2*v*x + 2*h_1*h_2*j*p_3*p_4*s_2*v^2*x + 5*h_1*h_2*j*p_3^2*p_4*s_2*v*x + h_1*h_2*j^2*p_3*p_4*s_2*v*x - e*f_2*g_2*h_1^2*h_2^2*s_2^2*v^2*x + e*f_2*g_2*h_2^2*p_4^2*s_2^2*v^2*x + e*f_2^2*g_2*h_2^2*p_4^2*s_2^2*v*x - e*f_2*h_1^2*h_2^2*s_1*s_2^2*v^2*x - e*h_1^2*h_2^2*p_3*s_1*s_2^2*v^2*x - e*h_1^2*h_2^2*p_3^2*s_1*s_2^2*v*x - 3*e*f_2*g_1*h_1*h_2*p_3^2*s_2*v^2 + e*f_1*f_2*h_2^2*j*p_3*s_2^2*v + 3*e*f_1*f_2*g_2*h_1*p_3^2*v^2*x + e*f_1*f_2^2*g_2*h_1*p_3*v^2*x + e*f_1*f_2^2*g_2*h_1*p_3^2*v*x - 2*f_1*f_2^2*g_2*h_1*h_2*p_3^2*s_2*x - 3*e*g_1*h_1*h_2*j*p_3^2*s_2*v^2 + f_1*f_2*h_1*h_2^2*j*p_3*s_2^2*x - e*f_1*f_2^2*h_1*h_2*s_2*v^2*x - e*f_2*g_2*h_1^2*h_2*s_2*v^3*x - 3*e*f_2*g_1*h_2*p_3^2*p_4*s_2*v^2 - f_1*f_2^2*g_2*h_1*h_2*s_2*v^2*x + 3*e*f_1*f_2*g_2*p_3^2*p_4*v^2*x + e*f_1*f_2^2*g_2*p_3*p_4*v^2*x + e*f_1*f_2^2*g_2*p_3^2*p_4*v*x + e*f_2*h_2^2*j*p_3*p_4*s_2^2*v - 2*f_1*f_2^2*g_2*h_2*p_3^2*p_4*s_2*x + f_1*f_2*h_1*h_2^2*j*s_2^2*v*x - 3*e*g_1*h_2*j*p_3^2*p_4*s_2*v^2 + e*f_2*g_2*h_1*p_3^2*p_4*v^2*x + e*f_2^2*g_2*h_1*p_3*p_4*v^2*x + e*f_2^2*g_2*h_1*p_3^2*p_4*v*x - 2*f_2^2*g_2*h_1*h_2*p_3^2*p_4*s_2*x + f_1*f_2*h_2^2*j*p_3*p_4*s_2^2*x + e*f_2*g_2*j*p_3*p_4^2*v^2*x + e*f_2*g_2*j*p_3^2*p_4^2*v*x - e*f_1*f_2^2*h_2*p_4*s_2*v^2*x - 2*f_2*g_2*h_2*j*p_3^2*p_4^2*s_2*x + e*f_2*g_2*h_1^2*p_3*s_1*v^3*x + e*f_2*g_2*h_1^2*p_3^3*s_1*v*x + e*f_2*g_2*h_2*p_4^2*s_2*v^3*x + f_2*h_1*h_2^2*j*p_3*p_4*s_2^2*x - 3*e*f_1*h_1*h_2*p_3^2*s_2*v^2*x + 3*e*f_2*h_1^2*h_2*p_3*s_2*v^2*x + 2*e*f_2*h_1^2*h_2*p_3^2*s_2*v*x - e*f_2^2*h_1*h_2*p_4*s_2*v^2*x - f_1*f_2^2*g_2*h_2*p_4*s_2*v^2*x + 3*f_1*f_2*h_1*h_2^2*p_3*s_2^2*v*x - e*f_2*h_2*j*p_4^2*s_2*v^2*x - f_2^2*g_2*h_1*h_2*p_4*s_2*v^2*x - e*f_2*h_1^2*h_2*s_1*s_2*v^3*x + f_1*f_2*h_2^2*j*p_4*s_2^2*v*x + e*h_1^2*h_2*j*p_3*s_2*v^2*x + e*h_1^2*h_2*j*p_3^2*s_2*v*x - f_2*g_2*h_2*j*p_4^2*s_2*v^2*x + f_1*h_1*h_2^2*j*p_3*s_2^2*v*x + f_2*h_1*h_2^2*j*p_4*s_2^2*v*x - 2*e*f_2*h_1*p_3^2*p_4*s_1*v^2*x - 3*e*f_1*h_2*p_3^2*p_4*s_2*v^2*x - 4*e*f_2*h_2*p_3*p_4^2*s_2*v^2*x - 4*e*f_2*h_2*p_3^2*p_4^2*s_2*v*x - 2*e*f_2^2*h_2*p_3*p_4^2*s_2*v*x + 3*f_1*f_2*h_2^2*p_3*p_4*s_2^2*v*x - 4*f_2*g_2*h_2*p_3*p_4^2*s_2*v^2*x - 5*f_2*g_2*h_2*p_3^2*p_4^2*s_2*v*x - 3*f_2^2*g_2*h_2*p_3*p_4^2*s_2*v*x + 3*f_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 2*e*h_1*j*p_3^2*p_4*s_1*v^2*x - e*h_2*j*p_3*p_4^2*s_2*v^2*x - e*h_2*j*p_3^2*p_4^2*s_2*v*x - e*h_1^2*h_2*p_3*s_1*s_2*v^3*x - 2*e*h_1^2*h_2*p_3^3*s_1*s_2*v*x + f_1*h_2^2*j*p_3*p_4*s_2^2*v*x + h_1*h_2^2*j*p_3*p_4*s_2^2*v*x - e*f_2*g_1*h_1*h_2^2*p_3*s_2^2*v^2 - e*f_2*g_1*h_1*h_2^2*p_3^2*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*p_3^2*s_2^2*x - f_1*f_2^2*g_2*h_1*h_2^2*p_3*s_2^2*x - e*g_1*h_1*h_2^2*j*p_3*s_2^2*v^2 - e*g_1*h_1*h_2^2*j*p_3^2*s_2^2*v - e*f_1*f_2*h_1*h_2^2*s_2^2*v^2*x - e*f_1*f_2^2*h_1*h_2^2*s_2^2*v*x - e*f_2*g_1*h_2^2*p_3*p_4*s_2^2*v^2 - e*f_2*g_1*h_2^2*p_3^2*p_4*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*s_2^2*v^2*x - f_1*f_2^2*g_2*h_1*h_2^2*s_2^2*v*x - f_1*f_2*g_2*h_2^2*p_3^2*p_4*s_2^2*x - f_1*f_2^2*g_2*h_2^2*p_3*p_4*s_2^2*x - e*g_1*h_2^2*j*p_3*p_4*s_2^2*v^2 - e*g_1*h_2^2*j*p_3^2*p_4*s_2^2*v - f_2*g_2*h_1*h_2^2*p_3^2*p_4*s_2^2*x - f_2^2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*x - e*f_1*f_2*h_2^2*p_4*s_2^2*v^2*x - e*f_1*f_2^2*h_2^2*p_4*s_2^2*v*x - f_2*g_2*h_2^2*j*p_3*p_4^2*s_2^2*x + 2*e*f_2*g_2*h_1^2*p_3^2*s_1*v^2*x + e*f_2^2*g_2*h_2*p_4^2*s_2*v^2*x - e*f_1*h_1*h_2^2*p_3*s_2^2*v^2*x - e*f_1*h_1*h_2^2*p_3^2*s_2^2*v*x + e*f_2*h_1^2*h_2^2*p_3*s_2^2*v*x - e*f_2^2*h_1*h_2^2*p_4*s_2^2*v*x - f_1*f_2*g_2*h_2^2*p_4*s_2^2*v^2*x - f_1*f_2^2*g_2*h_2^2*p_4*s_2^2*v*x - e*f_2*h_2^2*j*p_4^2*s_2^2*v*x - f_2*g_2*h_1*h_2^2*p_4*s_2^2*v^2*x - f_2^2*g_2*h_1*h_2^2*p_4*s_2^2*v*x - f_2*g_2*h_2^2*j*p_4^2*s_2^2*v*x - e*f_1*h_2^2*p_3*p_4*s_2^2*v^2*x - e*f_1*h_2^2*p_3^2*p_4*s_2^2*v*x - 2*e*f_2*h_2^2*p_3*p_4^2*s_2^2*v*x - 2*f_2*g_2*h_2^2*p_3*p_4^2*s_2^2*v*x - 3*e*h_1^2*h_2*p_3^2*s_1*s_2*v^2*x - e*h_1^2*h_2*j*p_3*s_1*s_2*v^2*x - e*h_1^2*h_2*j*p_3^2*s_1*s_2*v*x - 3*e*h_1*h_2*p_3^2*p_4*s_1*s_2*v^2*x + 4*f_1*f_2*h_1*h_2*j*p_3*s_2*v*x + 4*f_1*f_2*h_2*j*p_3*p_4*s_2*v*x + 4*f_2*h_1*h_2*j*p_3*p_4*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*s_2^2*v^2*x + e*f_1*f_2^2*g_2*h_1*h_2^2*s_2^2*v*x + e*f_1*f_2*g_2*h_2^2*p_4*s_2^2*v^2*x + e*f_1*f_2^2*g_2*h_2^2*p_4*s_2^2*v*x - e*f_2*g_2*h_1^2*h_2^2*p_3*s_2^2*v*x + e*f_2^2*g_2*h_1*h_2^2*p_4*s_2^2*v*x + e*f_2*g_2*h_2^2*j*p_4^2*s_2^2*v*x + 2*e*f_2*g_2*h_2^2*p_3*p_4^2*s_2^2*v*x - e*f_2*h_1^2*h_2^2*p_3*s_1*s_2^2*v*x - e*f_2*h_1*h_2^2*p_4*s_1*s_2^2*v^2*x - e*h_1*h_2^2*p_3*p_4*s_1*s_2^2*v^2*x - e*h_1*h_2^2*p_3^2*p_4*s_1*s_2^2*v*x + e*f_1*f_2*g_2*h_1*j*p_3*v^2*x + e*f_1*f_2*g_2*h_1*j*p_3^2*v*x - 2*f_1*f_2*g_2*h_1*h_2*j*p_3^2*s_2*x + e*f_1*f_2*g_2*h_1*h_2*s_2*v^3*x - e*f_1*f_2*h_1*h_2*j*s_2*v^2*x - f_1*f_2*g_2*h_1*h_2*j*s_2*v^2*x + e*f_1*f_2*g_2*j*p_3*p_4*v^2*x + e*f_1*f_2*g_2*j*p_3^2*p_4*v*x - 2*f_1*f_2*g_2*h_2*j*p_3^2*p_4*s_2*x + e*f_1*f_2*g_2*h_2*p_4*s_2*v^3*x + e*f_2*g_2*h_1*j*p_3*p_4*v^2*x + e*f_2*g_2*h_1*j*p_3^2*p_4*v*x - 4*e*f_1*f_2*h_1*h_2*p_3*s_2*v^2*x - 4*e*f_1*f_2*h_1*h_2*p_3^2*s_2*v*x - 2*e*f_1*f_2^2*h_1*h_2*p_3*s_2*v*x - 2*f_2*g_2*h_1*h_2*j*p_3^2*p_4*s_2*x - e*f_1*f_2*h_2*j*p_4*s_2*v^2*x - 4*f_1*f_2*g_2*h_1*h_2*p_3*s_2*v^2*x - 5*f_1*f_2*g_2*h_1*h_2*p_3^2*s_2*v*x - 3*f_1*f_2^2*g_2*h_1*h_2*p_3*s_2*v*x - e*f_1*h_1*h_2*j*p_3*s_2*v^2*x - e*f_1*h_1*h_2*j*p_3^2*s_2*v*x - e*f_2*h_1*h_2*j*p_4*s_2*v^2*x - f_1*f_2*g_2*h_2*j*p_4*s_2*v^2*x - f_2*g_2*h_1*h_2*j*p_4*s_2*v^2*x - 4*e*f_1*f_2*h_2*p_3*p_4*s_2*v^2*x - 4*e*f_1*f_2*h_2*p_3^2*p_4*s_2*v*x - 2*e*f_1*f_2^2*h_2*p_3*p_4*s_2*v*x + e*f_2*g_2*h_1*p_3*p_4*s_1*v^3*x + e*f_2*g_2*h_1*p_3^3*p_4*s_1*v*x - e*f_2*h_1*h_2*p_3*p_4*s_2*v^2*x - 2*e*f_2*h_1*h_2*p_3^2*p_4*s_2*v*x - 2*e*f_2^2*h_1*h_2*p_3*p_4*s_2*v*x - 4*f_1*f_2*g_2*h_2*p_3*p_4*s_2*v^2*x - 5*f_1*f_2*g_2*h_2*p_3^2*p_4*s_2*v*x - 3*f_1*f_2^2*g_2*h_2*p_3*p_4*s_2*v*x - e*f_1*h_2*j*p_3*p_4*s_2*v^2*x - e*f_1*h_2*j*p_3^2*p_4*s_2*v*x - 2*e*f_2*h_2*j*p_3*p_4^2*s_2*v*x - 4*f_2*g_2*h_1*h_2*p_3*p_4*s_2*v^2*x - 5*f_2*g_2*h_1*h_2*p_3^2*p_4*s_2*v*x - 3*f_2^2*g_2*h_1*h_2*p_3*p_4*s_2*v*x - e*f_2*h_1*h_2*p_4*s_1*s_2*v^3*x - 3*f_2*g_2*h_2*j*p_3*p_4^2*s_2*v*x - e*h_1*h_2*p_3*p_4*s_1*s_2*v^3*x - 2*e*h_1*h_2*p_3^3*p_4*s_1*s_2*v*x + e*f_2*g_2*h_1^2*h_2^2*s_1*s_2^2*v^2*x - f_1*f_2*g_2*h_1*h_2^2*j*p_3*s_2^2*x + e*f_1*f_2^2*g_2*h_1*h_2*s_2*v^2*x - e*f_1*f_2*h_1*h_2^2*j*s_2^2*v*x - f_1*f_2*g_2*h_1*h_2^2*j*s_2^2*v*x - f_1*f_2*g_2*h_2^2*j*p_3*p_4*s_2^2*x + e*f_1*f_2^2*g_2*h_2*p_4*s_2*v^2*x - 2*e*f_1*f_2*h_1*h_2^2*p_3*s_2^2*v*x - f_2*g_2*h_1*h_2^2*j*p_3*p_4*s_2^2*x - 3*e*f_2*g_2*h_1^2*h_2*p_3*s_2*v^2*x - 2*e*f_2*g_2*h_1^2*h_2*p_3^2*s_2*v*x + e*f_2^2*g_2*h_1*h_2*p_4*s_2*v^2*x - e*f_1*f_2*h_2^2*j*p_4*s_2^2*v*x - 2*f_1*f_2*g_2*h_1*h_2^2*p_3*s_2^2*v*x + e*f_2*g_2*h_2*j*p_4^2*s_2*v^2*x - e*f_2*h_1*h_2^2*j*p_4*s_2^2*v*x + e*f_2*g_2*h_1^2*h_2*s_1*s_2*v^3*x - f_1*f_2*g_2*h_2^2*j*p_4*s_2^2*v*x - f_2*g_2*h_1*h_2^2*j*p_4*s_2^2*v*x - 2*e*f_1*f_2*h_2^2*p_3*p_4*s_2^2*v*x + 2*e*f_2*g_2*h_1*p_3^2*p_4*s_1*v^2*x + 4*e*f_2*g_2*h_2*p_3*p_4^2*s_2*v^2*x + 4*e*f_2*g_2*h_2*p_3^2*p_4^2*s_2*v*x + 2*e*f_2^2*g_2*h_2*p_3*p_4^2*s_2*v*x - e*f_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 2*f_1*f_2*g_2*h_2^2*p_3*p_4*s_2^2*v*x - 2*f_2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 3*e*f_2*h_1^2*h_2*p_3*s_1*s_2*v^2*x - 2*e*f_2*h_1^2*h_2*p_3^2*s_1*s_2*v*x + 4*e*f_1*f_2*g_2*h_2*p_3*p_4*s_2*v^2*x + 4*e*f_1*f_2*g_2*h_2*p_3^2*p_4*s_2*v*x + 2*e*f_1*f_2^2*g_2*h_2*p_3*p_4*s_2*v*x + e*f_2*g_2*h_1*h_2*p_3*p_4*s_2*v^2*x + 2*e*f_2*g_2*h_1*h_2*p_3^2*p_4*s_2*v*x + 2*e*f_2^2*g_2*h_1*h_2*p_3*p_4*s_2*v*x + 2*e*f_2*g_2*h_2*j*p_3*p_4^2*s_2*v*x + e*f_2*g_2*h_1*h_2*p_4*s_1*s_2*v^3*x - 3*e*f_2*h_1*h_2*p_3*p_4*s_1*s_2*v^2*x - 2*e*f_2*h_1*h_2*p_3^2*p_4*s_1*s_2*v*x - e*h_1*h_2*j*p_3*p_4*s_1*s_2*v^2*x - e*h_1*h_2*j*p_3^2*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*j*s_2^2*v*x + 2*e*f_1*f_2*g_2*h_1*h_2^2*p_3*s_2^2*v*x + e*f_1*f_2*g_2*h_2^2*j*p_4*s_2^2*v*x + e*f_2*g_2*h_1*h_2^2*j*p_4*s_2^2*v*x + 2*e*f_1*f_2*g_2*h_2^2*p_3*p_4*s_2^2*v*x + e*f_2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x + 3*e*f_2*g_2*h_1^2*h_2*p_3*s_1*s_2*v^2*x + 2*e*f_2*g_2*h_1^2*h_2*p_3^2*s_1*s_2*v*x - e*f_2*h_1*h_2^2*p_3*p_4*s_1*s_2^2*v*x - 2*e*f_1*f_2*h_1*h_2*j*p_3*s_2*v*x - 3*f_1*f_2*g_2*h_1*h_2*j*p_3*s_2*v*x - 2*e*f_1*f_2*h_2*j*p_3*p_4*s_2*v*x - 2*e*f_2*h_1*h_2*j*p_3*p_4*s_2*v*x - 3*f_1*f_2*g_2*h_2*j*p_3*p_4*s_2*v*x - 3*f_2*g_2*h_1*h_2*j*p_3*p_4*s_2*v*x + e*f_2*g_2*h_1^2*h_2^2*p_3*s_1*s_2^2*v*x + e*f_2*g_2*h_1*h_2^2*p_4*s_1*s_2^2*v^2*x + e*f_1*f_2*g_2*h_1*h_2*j*s_2*v^2*x + 4*e*f_1*f_2*g_2*h_1*h_2*p_3*s_2*v^2*x + 4*e*f_1*f_2*g_2*h_1*h_2*p_3^2*s_2*v*x + 2*e*f_1*f_2^2*g_2*h_1*h_2*p_3*s_2*v*x + e*f_1*f_2*g_2*h_2*j*p_4*s_2*v^2*x + e*f_2*g_2*h_1*h_2*j*p_4*s_2*v^2*x + 2*e*f_1*f_2*g_2*h_1*h_2*j*p_3*s_2*v*x + 2*e*f_1*f_2*g_2*h_2*j*p_3*p_4*s_2*v*x + 2*e*f_2*g_2*h_1*h_2*j*p_3*p_4*s_2*v*x + 3*e*f_2*g_2*h_1*h_2*p_3*p_4*s_1*s_2*v^2*x + 2*e*f_2*g_2*h_1*h_2*p_3^2*p_4*s_1*s_2*v*x + e*f_2*g_2*h_1*h_2^2*p_3*p_4*s_1*s_2^2*v*x))/(p_2*p_3*(p_3 + h_2*s_2)*(a + p_1)*(f_1 + p_4)*(h_1 + p_4)*(p_3 + v)*(p_3 + v + h_2*s_2)*(f_2 + j + p_3)*(f_2 + j + p_3 + v));


%Partial derivative of R_0_simpl:

d_d = diff(R_0_simpl, d);
d_p_1 = diff(R_0_simpl, p_1);
d_p_2 = diff(R_0_simpl, p_2);
d_p_3 = diff(R_0_simpl, p_3);
d_p_4 = diff(R_0_simpl, p_4);
d_x = diff(R_0_simpl, x);
d_a = diff(R_0_simpl, a);
d_v = diff(R_0_simpl, v);
d_z = diff(R_0_simpl, z);
d_h_1 = diff(R_0_simpl, h_1);
d_g_1 = diff(R_0_simpl, g_1);
d_s_1 = diff(R_0_simpl, s_1);
d_e = diff(R_0_simpl, e);
d_l = diff(R_0_simpl, l);
d_f_1 = diff(R_0_simpl, f_1);


%Value of parameter for R0 estimation
values = [d, 0.0004043506; g_1, 0.5; g_2, 0.5; x, 0.7; e, 0.13; s_1, 0.7; s_2, 0.7; v, 1/4; j, 0; f_1, 0.90; f_2, 0; h_1, 1/5; h_2, 1/5; p_1, 1/6; p_2, 1/6; p_3, 1/6; p_4, 1/12; l, 76; a, 0.35; z, 0.22];


%Numeric result of partial derivatives
d_d_val = double(subs(d_d, values(:,1), values(:,2)));
d_p_1_val = double(subs(d_p_1, values(:,1), values(:,2)));
d_p_2_val = double(subs(d_p_2, values(:,1), values(:,2)));
d_p_3_val = double(subs(d_p_3, values(:,1), values(:,2)));
d_p_4_val = double(subs(d_p_4, values(:,1), values(:,2)));
d_x_val = double(subs(d_x, values(:,1), values(:,2)));
d_a_val = double(subs(d_a, values(:,1), values(:,2)));
d_v_val = double(subs(d_v, values(:,1), values(:,2)));
d_z_val = double(subs(d_z, values(:,1), values(:,2)));
d_h_1_val = double(subs(d_h_1, values(:,1), values(:,2)));
d_g_1_val = double(subs(d_g_1, values(:,1), values(:,2)));
d_s_1_val = double(subs(d_s_1, values(:,1), values(:,2)));
d_e_val = double(subs(d_e, values(:,1), values(:,2)));
d_l_val = double(subs(d_l, values(:,1), values(:,2)));
d_f_1_val = double(subs(d_f_1, values(:,1), values(:,2)));


%Sensitivity index estimation: partial derivative of parameter *
%(parameter/R0 estimation)
index_d = d_d_val * (0.0004043506/0.5771);
index_p_1 = d_p_1_val * (1/6/0.5771);
index_p_2 = d_p_2_val * (1/6/0.5771);
index_p_3 = d_p_3_val * (1/6/0.5771);
index_p_4 = d_p_4_val * (1/12/0.5771);
index_x = d_x_val * (0.7/0.5771);
index_a = d_a_val * (0.35/0.5771);
index_v = d_v_val * (1/4/0.5771);
index_z = d_z_val * (0.22/0.5771);
index_h_1 = d_h_1_val * (1/5/0.5771);
index_g_1 = d_g_1_val * (0.5/0.5771);
index_s_1 = d_s_1_val * (0.7/0.5771);
index_e = d_e_val * (0.13/0.5771);
index_l = d_l_val * (76/0.5771);
index_f_1 = d_f_1_val * (0.90/0.5771);


% Display the sensitivity indexes

disp(index_d);
disp(index_p_1);
disp(index_p_2);
disp(index_p_3);
disp(index_p_4);
disp(index_x);
disp(index_a);
disp(index_v);
disp(index_z);
disp(index_h_1);
disp(index_g_1);
disp(index_s_1);
disp(index_e);
disp(index_l);
disp(index_f_1);



