
# Load necessary libraries
if (!require(pacman)) install.packages("pacman")
library(pacman)

# Use p_load function from 'pacman' to load required packages
p_load(ggplot2, dplyr, gridExtra, scales, deSolve, reshape2, latticeExtra)

#4.1 EXTENDED SENSITIVITY ANALYSIS: R NUMBER

# Numerical simulations of our baseline model to evaluate the impacts on the R0 
# and CDI incidence, varying each parameter individually by Â±20% while holding others constant.
# Basal parameters:

basal_values <- list(d = 0.0003996096, x = 0.7, a = 0.32, e = 0.13, v = 1/4, l = 76, z = 0.22,            
  p_1 = 1/6, p_2 = 1/6, p_3 = 1/6, p_4 = 1/12, h_1 = 1/10, h_2 = 1/10,          
  g_1 = 0.5, g_2 = 0, f_2 = 0, f_1 = 0.90, j = 0, s_1 = 0.7, s_2 = 0)


# Function to calculate the value of R with a list of parameters
calculate_R_value <- function(params) {
  with(params, {(d*l*(a + p_1*z)*(p_3^5*p_4^2*x + f_2^2*p_3^3*p_4^2*x + j^2*p_3^3*p_4^2*x + p_3^2*p_4^2*v^3*x + 3*p_3^3*p_4^2*v^2*x + e*f_1*p_3^5*v + e*h_1*p_3^5*v + f_1*h_1*p_3^5*x + e*p_3^5*p_4*v + f_1*p_3^5*p_4*x + h_1*p_3^5*p_4*x + e*f_1*p_3^3*v^3 + 2*e*f_1*p_3^4*v^2 + e*h_1*p_3^3*v^3 + 2*e*h_1*p_3^4*v^2 + e*p_3^3*p_4*v^3 + 2*e*p_3^4*p_4*v^2 + 2*f_2*p_3^4*p_4^2*x + 2*j*p_3^4*p_4^2*x + 3*p_3^4*p_4^2*v*x + h_2^2*p_3^3*p_4^2*s_2^2*x + e*f_1*f_2*p_3^2*v^3 + 3*e*f_1*f_2*p_3^3*v^2 + e*f_1*f_2^2*p_3^3*v - e*f_1*g_1*p_3^3*v^3 - 2*e*f_1*g_1*p_3^4*v^2 + e*f_2*h_1*p_3^2*v^3 + 2*e*f_2*h_1*p_3^3*v^2 + e*f_1*j*p_3^2*v^3 + 3*e*f_1*j*p_3^3*v^2 + e*f_1*j^2*p_3^3*v + f_1*f_2^2*h_1*p_3^3*x + e*h_1*j*p_3^2*v^3 + 2*e*h_1*j*p_3^3*v^2 + f_1*h_1*j^2*p_3^3*x + e*f_2*p_3^2*p_4*v^3 + 3*e*f_2*p_3^3*p_4*v^2 + e*f_2^2*p_3^3*p_4*v + f_1*f_2^2*p_3^3*p_4*x + e*j*p_3^2*p_4*v^3 + 3*e*j*p_3^3*p_4*v^2 + e*j^2*p_3^3*p_4*v - f_2*g_2*p_3^4*p_4^2*x + f_2^2*h_1*p_3^3*p_4*x + f_1*j^2*p_3^3*p_4*x + 2*f_2*j*p_3^3*p_4^2*x + h_1*j^2*p_3^3*p_4*x + f_1*h_1*p_3^2*v^3*x + 3*f_1*h_1*p_3^3*v^2*x - e*p_3^4*p_4^2*v*x + 2*h_2*p_3^4*p_4^2*s_2*x + f_1*p_3^2*p_4*v^3*x + 3*f_1*p_3^3*p_4*v^2*x + f_2*p_3*p_4^2*v^3*x + 5*f_2*p_3^3*p_4^2*v*x + h_1*p_3^2*p_4*v^3*x + 3*h_1*p_3^3*p_4*v^2*x + j*p_3*p_4^2*v^3*x + 5*j*p_3^3*p_4^2*v*x + e*f_1*f_2^2*p_3^2*v^2 + e*f_1*j^2*p_3^2*v^2 + e*f_2^2*p_3^2*p_4*v^2 + e*j^2*p_3^2*p_4*v^2 - f_2^2*g_2*p_3^3*p_4^2*x - e*p_3^2*p_4^2*v^3*x - 2*e*p_3^3*p_4^2*v^2*x + 4*f_2*p_3^2*p_4^2*v^2*x + f_2^2*p_3*p_4^2*v^2*x + 2*f_2^2*p_3^2*p_4^2*v*x + 4*j*p_3^2*p_4^2*v^2*x + j^2*p_3*p_4^2*v^2*x + 2*j^2*p_3^2*p_4^2*v*x + 2*e*f_1*f_2*p_3^4*v - e*f_1*g_1*p_3^5*v + e*f_2*h_1*p_3^4*v + 2*e*f_1*j*p_3^4*v + 2*f_1*f_2*h_1*p_3^4*x + e*h_1*j*p_3^4*v + 2*f_1*h_1*j*p_3^4*x + 
                                    2*e*f_2*p_3^4*p_4*v + 2*f_1*f_2*p_3^4*p_4*x + 2*e*j*p_3^4*p_4*v + 2*f_2*h_1*p_3^4*p_4*x + 2*f_1*j*p_3^4*p_4*x + 2*h_1*j*p_3^4*p_4*x + 3*f_1*h_1*p_3^4*v*x + 3*f_1*p_3^4*p_4*v*x + 3*h_1*p_3^4*p_4*v*x - e*f_1*g_1*j^2*p_3^2*v^2 - e*f_2^2*g_1*p_3^2*p_4*v^2 - e*g_1*j^2*p_3^2*p_4*v^2 + e*f_1*h_2^2*p_3^3*s_2^2*v + e*h_1*h_2^2*p_3^3*s_2^2*v + f_1*h_1*h_2^2*p_3^3*s_2^2*x + e*h_2^2*p_3^3*p_4*s_2^2*v - 3*e*f_2*p_3^2*p_4^2*v^2*x - e*f_2^2*p_3*p_4^2*v^2*x - e*f_2^2*p_3^2*p_4^2*v*x + f_1*h_2^2*p_3^3*p_4*s_2^2*x + 2*f_2^2*h_2*p_3^2*p_4^2*s_2*x - 3*f_2*g_2*p_3^2*p_4^2*v^2*x - f_2^2*g_2*p_3*p_4^2*v^2*x - 2*f_2^2*g_2*p_3^2*p_4^2*v*x + h_1*h_2^2*p_3^3*p_4*s_2^2*x - 3*e*j*p_3^2*p_4^2*v^2*x - e*j^2*p_3*p_4^2*v^2*x - e*j^2*p_3^2*p_4^2*v*x + h_2*j^2*p_3^2*p_4^2*s_2*x + f_2^2*h_2*p_4^2*s_2*v^2*x + 4*h_2*p_3^2*p_4^2*s_2*v^2*x - 2*e*f_1*f_2*g_1*p_3^4*v + 2*e*f_1*f_2*j*p_3^3*v - 2*e*f_1*g_1*j*p_3^4*v - f_1*f_2*g_2*h_1*p_3^4*x + 2*f_1*f_2*h_1*j*p_3^3*x - e*f_2*g_1*p_3^4*p_4*v + 2*e*f_2*j*p_3^3*p_4*v - f_1*f_2*g_2*p_3^4*p_4*x - e*g_1*j*p_3^4*p_4*v + 2*e*f_1*h_2*p_3^4*s_2*v - f_2*g_2*h_1*p_3^4*p_4*x + 2*e*h_1*h_2*p_3^4*s_2*v + 2*f_1*f_2*j*p_3^3*p_4*x + 2*f_2*h_1*j*p_3^3*p_4*x + 2*f_1*h_1*h_2*p_3^4*s_2*x + f_1*f_2*h_1*p_3*v^3*x + 5*f_1*f_2*h_1*p_3^3*v*x + f_1*h_1*j*p_3*v^3*x + 5*f_1*h_1*j*p_3^3*v*x + 2*e*h_2*p_3^4*p_4*s_2*v - e*f_1*p_3^4*p_4*v*x + 2*f_1*h_2*p_3^4*p_4*s_2*x + f_1*f_2*p_3*p_4*v^3*x + 5*f_1*f_2*p_3^3*p_4*v*x - e*h_1*p_3^4*p_4*v*x + 2*h_1*h_2*p_3^4*p_4*s_2*x + f_2*h_1*p_3*p_4*v^3*x + 5*f_2*h_1*p_3^3*p_4*v*x + f_1*j*p_3*p_4*v^3*x + 5*f_1*j*p_3^3*p_4*v*x + h_1*j*p_3*p_4*v^3*x + 5*h_1*j*p_3^3*p_4*v*x + e*f_1*h_2^2*p_3^2*s_2^2*v^2 + e*h_1*h_2^2*p_3^2*s_2^2*v^2 + e*h_2^2*p_3^2*p_4*s_2^2*v^2 + 
                                    2*f_2*h_2^2*p_3^2*p_4^2*s_2^2*x + f_2^2*h_2^2*p_3*p_4^2*s_2^2*x + h_2^2*j*p_3^2*p_4^2*s_2^2*x + f_2*h_2^2*p_4^2*s_2^2*v^2*x + f_2^2*h_2^2*p_4^2*s_2^2*v*x + h_2^2*p_3*p_4^2*s_2^2*v^2*x + 2*h_2^2*p_3^2*p_4^2*s_2^2*v*x - e*f_1*f_2*g_1*p_3^2*v^3 - 3*e*f_1*f_2*g_1*p_3^3*v^2 - e*f_1*f_2^2*g_1*p_3^3*v + 2*e*f_1*f_2*j*p_3^2*v^2 - e*f_1*g_1*j*p_3^2*v^3 - 3*e*f_1*g_1*j*p_3^3*v^2 - e*f_1*g_1*j^2*p_3^3*v - f_1*f_2^2*g_2*h_1*p_3^3*x - e*f_2*g_1*p_3^3*p_4*v^2 - e*f_2^2*g_1*p_3^3*p_4*v + 2*e*f_2*j*p_3^2*p_4*v^2 - f_1*f_2^2*g_2*p_3^3*p_4*x - e*g_1*j*p_3^3*p_4*v^2 - e*g_1*j^2*p_3^3*p_4*v + e*f_1*h_2*p_3^2*s_2*v^3 + 3*e*f_1*h_2*p_3^3*s_2*v^2 - f_2^2*g_2*h_1*p_3^3*p_4*x + e*h_1*h_2*p_3^2*s_2*v^3 + 3*e*h_1*h_2*p_3^3*s_2*v^2 - f_2*g_2*j*p_3^3*p_4^2*x + 4*f_1*f_2*h_1*p_3^2*v^2*x + f_1*f_2^2*h_1*p_3*v^2*x + 2*f_1*f_2^2*h_1*p_3^2*v*x + 4*f_1*h_1*j*p_3^2*v^2*x + f_1*h_1*j^2*p_3*v^2*x + 2*f_1*h_1*j^2*p_3^2*v*x + e*h_2*p_3^2*p_4*s_2*v^3 + 3*e*h_2*p_3^3*p_4*s_2*v^2 - e*f_1*p_3^2*p_4*v^3*x - 2*e*f_1*p_3^3*p_4*v^2*x - e*f_2*p_3*p_4^2*v^3*x - 2*e*f_2*p_3^3*p_4^2*v*x + 4*f_2*h_2*p_3^3*p_4^2*s_2*x + 4*f_1*f_2*p_3^2*p_4*v^2*x + f_1*f_2^2*p_3*p_4*v^2*x + 2*f_1*f_2^2*p_3^2*p_4*v*x - e*h_1*p_3^2*p_4*v^3*x - 2*e*h_1*p_3^3*p_4*v^2*x - f_2*g_2*p_3*p_4^2*v^3*x - 3*f_2*g_2*p_3^3*p_4^2*v*x + 4*f_2*h_1*p_3^2*p_4*v^2*x + f_2^2*h_1*p_3*p_4*v^2*x + 2*f_2^2*h_1*p_3^2*p_4*v*x - e*j*p_3*p_4^2*v^3*x - 2*e*j*p_3^3*p_4^2*v*x + 3*h_2*j*p_3^3*p_4^2*s_2*x + 4*f_1*j*p_3^2*p_4*v^2*x + f_1*j^2*p_3*p_4*v^2*x + 2*f_1*j^2*p_3^2*p_4*v*x + 2*f_2*j*p_3*p_4^2*v^2*x + 4*f_2*j*p_3^2*p_4^2*v*x + f_2*h_2*p_4^2*s_2*v^3*x + 4*h_1*j*p_3^2*p_4*v^2*x + h_1*j^2*p_3*p_4*v^2*x + 2*h_1*j^2*p_3^2*p_4*v*x + h_2*p_3*p_4^2*s_2*v^3*x + 5*h_2*p_3^3*p_4^2*s_2*v*x - 
                                    e*f_1*f_2^2*g_1*p_3^2*v^2 - 2*e*f_1*f_2*g_1*j*p_3^2*v^2 - 2*e*f_2*g_1*j*p_3^2*p_4*v^2 + 4*e*f_1*f_2*h_2*p_3^2*s_2*v^2 + e*f_1*f_2^2*h_2*p_3*s_2*v^2 + 2*e*f_1*f_2^2*h_2*p_3^2*s_2*v - e*f_1*g_1*h_2*p_3^2*s_2*v^3 - 3*e*f_1*g_1*h_2*p_3^3*s_2*v^2 + 3*e*f_2*h_1*h_2*p_3^2*s_2*v^2 + 4*e*f_1*h_2*j*p_3^2*s_2*v^2 + e*f_1*h_2*j^2*p_3*s_2*v^2 + e*f_1*h_2*j^2*p_3^2*s_2*v + 2*f_1*f_2^2*h_1*h_2*p_3^2*s_2*x + 3*e*h_1*h_2*j*p_3^2*s_2*v^2 - 3*f_1*f_2*g_2*h_1*p_3^2*v^2*x - f_1*f_2^2*g_2*h_1*p_3*v^2*x - 2*f_1*f_2^2*g_2*h_1*p_3^2*v*x + f_1*h_1*h_2*j^2*p_3^2*s_2*x + 4*e*f_2*h_2*p_3^2*p_4*s_2*v^2 + e*f_2^2*h_2*p_3*p_4*s_2*v^2 + 2*e*f_2^2*h_2*p_3^2*p_4*s_2*v + f_1*f_2^2*h_1*h_2*s_2*v^2*x - 3*e*f_1*f_2*p_3^2*p_4*v^2*x - e*f_1*f_2^2*p_3*p_4*v^2*x - e*f_1*f_2^2*p_3^2*p_4*v*x + 2*f_1*f_2^2*h_2*p_3^2*p_4*s_2*x + 4*e*h_2*j*p_3^2*p_4*s_2*v^2 + e*h_2*j^2*p_3*p_4*s_2*v^2 + e*h_2*j^2*p_3^2*p_4*s_2*v + e*f_2*g_2*p_3*p_4^2*v^3*x + 2*e*f_2*g_2*p_3^3*p_4^2*v*x - 2*f_2*g_2*h_2*p_3^3*p_4^2*s_2*x - 2*e*f_2*h_1*p_3^2*p_4*v^2*x - 3*f_1*f_2*g_2*p_3^2*p_4*v^2*x - f_1*f_2^2*g_2*p_3*p_4*v^2*x - 2*f_1*f_2^2*g_2*p_3^2*p_4*v*x + 2*f_2^2*h_1*h_2*p_3^2*p_4*s_2*x - 3*e*f_1*j*p_3^2*p_4*v^2*x - e*f_1*j^2*p_3*p_4*v^2*x - e*f_1*j^2*p_3^2*p_4*v*x - 2*e*f_2*j*p_3*p_4^2*v^2*x - 2*e*f_2*j*p_3^2*p_4^2*v*x + f_1*h_2*j^2*p_3^2*p_4*s_2*x - 3*f_2*g_2*h_1*p_3^2*p_4*v^2*x - f_2^2*g_2*h_1*p_3*p_4*v^2*x - 2*f_2^2*g_2*h_1*p_3^2*p_4*v*x + 3*f_2*h_2*j*p_3^2*p_4^2*s_2*x - e*f_1*h_1*p_3^2*s_1*v^3*x - 2*e*f_1*h_1*p_3^3*s_1*v^2*x - e*f_2*h_2*p_4^2*s_2*v^3*x - 2*e*h_1*j*p_3^2*p_4*v^2*x - f_2*g_2*j*p_3*p_4^2*v^2*x - 2*f_2*g_2*j*p_3^2*p_4^2*v*x + f_1*f_2^2*h_2*p_4*s_2*v^2*x + h_1*h_2*j^2*p_3^2*p_4*s_2*x - f_2*g_2*h_2*p_4^2*s_2*v^3*x + 4*f_1*h_1*h_2*p_3^2*s_2*v^2*x + 
                                    f_2^2*h_1*h_2*p_4*s_2*v^2*x + f_2*h_2*j*p_4^2*s_2*v^2*x - e*h_2*p_3*p_4^2*s_2*v^3*x - 2*e*h_2*p_3^3*p_4^2*s_2*v*x + 4*f_1*h_2*p_3^2*p_4*s_2*v^2*x + 5*f_2*h_2*p_3*p_4^2*s_2*v^2*x + 8*f_2*h_2*p_3^2*p_4^2*s_2*v*x + 3*f_2^2*h_2*p_3*p_4^2*s_2*v*x + 4*h_1*h_2*p_3^2*p_4*s_2*v^2*x + 2*h_2*j*p_3*p_4^2*s_2*v^2*x + 5*h_2*j*p_3^2*p_4^2*s_2*v*x + h_2*j^2*p_3*p_4^2*s_2*v*x + e*f_1*f_2*h_2^2*p_3*s_2^2*v^2 + 2*e*f_1*f_2*h_2^2*p_3^2*s_2^2*v + e*f_1*f_2^2*h_2^2*p_3*s_2^2*v - e*f_1*g_1*h_2^2*p_3^3*s_2^2*v + e*f_2*h_1*h_2^2*p_3*s_2^2*v^2 + e*f_2*h_1*h_2^2*p_3^2*s_2^2*v + e*f_1*h_2^2*j*p_3*s_2^2*v^2 + e*f_1*h_2^2*j*p_3^2*s_2^2*v + 2*f_1*f_2*h_1*h_2^2*p_3^2*s_2^2*x + f_1*f_2^2*h_1*h_2^2*p_3*s_2^2*x + e*h_1*h_2^2*j*p_3*s_2^2*v^2 + e*h_1*h_2^2*j*p_3^2*s_2^2*v + f_1*h_1*h_2^2*j*p_3^2*s_2^2*x + e*f_2*h_2^2*p_3*p_4*s_2^2*v^2 + 2*e*f_2*h_2^2*p_3^2*p_4*s_2^2*v + e*f_2^2*h_2^2*p_3*p_4*s_2^2*v + f_1*f_2*h_1*h_2^2*s_2^2*v^2*x + f_1*f_2^2*h_1*h_2^2*s_2^2*v*x + 2*f_1*f_2*h_2^2*p_3^2*p_4*s_2^2*x + f_1*f_2^2*h_2^2*p_3*p_4*s_2^2*x + 3*e*f_2*g_2*p_3^2*p_4^2*v^2*x + e*f_2^2*g_2*p_3*p_4^2*v^2*x + e*f_2^2*g_2*p_3^2*p_4^2*v*x + e*h_2^2*j*p_3*p_4*s_2^2*v^2 + e*h_2^2*j*p_3^2*p_4*s_2^2*v - 2*f_2^2*g_2*h_2*p_3^2*p_4^2*s_2*x + 2*f_2*h_1*h_2^2*p_3^2*p_4*s_2^2*x + f_2^2*h_1*h_2^2*p_3*p_4*s_2^2*x + f_1*h_2^2*j*p_3^2*p_4*s_2^2*x + f_2*h_2^2*j*p_3*p_4^2*s_2^2*x - e*f_2^2*h_2*p_4^2*s_2*v^2*x + f_1*f_2*h_2^2*p_4*s_2^2*v^2*x + f_1*f_2^2*h_2^2*p_4*s_2^2*v*x + h_1*h_2^2*j*p_3^2*p_4*s_2^2*x - f_2^2*g_2*h_2*p_4^2*s_2*v^2*x + f_1*h_1*h_2^2*p_3*s_2^2*v^2*x + 2*f_1*h_1*h_2^2*p_3^2*s_2^2*v*x + f_2*h_1*h_2^2*p_4*s_2^2*v^2*x + f_2^2*h_1*h_2^2*p_4*s_2^2*v*x + f_2*h_2^2*j*p_4^2*s_2^2*v*x - 3*e*h_2*p_3^2*p_4^2*s_2*v^2*x + f_1*h_2^2*p_3*p_4*s_2^2*v^2*x + 
                                    2*f_1*h_2^2*p_3^2*p_4*s_2^2*v*x + 3*f_2*h_2^2*p_3*p_4^2*s_2^2*v*x + h_1*h_2^2*p_3*p_4*s_2^2*v^2*x + 2*h_1*h_2^2*p_3^2*p_4*s_2^2*v*x + h_2^2*j*p_3*p_4^2*s_2^2*v*x - 2*e*f_1*f_2*g_1*j*p_3^3*v - f_1*f_2*g_2*h_1*j*p_3^3*x - 2*e*f_2*g_1*j*p_3^3*p_4*v + e*f_1*f_2*h_2*p_3*s_2*v^3 + 4*e*f_1*f_2*h_2*p_3^3*s_2*v - 2*e*f_1*g_1*h_2*p_3^4*s_2*v + e*f_2*h_1*h_2*p_3*s_2*v^3 + 2*e*f_2*h_1*h_2*p_3^3*s_2*v - f_1*f_2*g_2*j*p_3^3*p_4*x + e*f_1*h_2*j*p_3*s_2*v^3 + 3*e*f_1*h_2*j*p_3^3*s_2*v - f_2*g_2*h_1*j*p_3^3*p_4*x + 4*f_1*f_2*h_1*h_2*p_3^3*s_2*x + e*h_1*h_2*j*p_3*s_2*v^3 + 2*e*h_1*h_2*j*p_3^3*s_2*v - f_1*f_2*g_2*h_1*p_3*v^3*x - 3*f_1*f_2*g_2*h_1*p_3^3*v*x + 3*f_1*h_1*h_2*j*p_3^3*s_2*x + 2*f_1*f_2*h_1*j*p_3*v^2*x + 4*f_1*f_2*h_1*j*p_3^2*v*x + e*f_2*h_2*p_3*p_4*s_2*v^3 + 4*e*f_2*h_2*p_3^3*p_4*s_2*v + f_1*f_2*h_1*h_2*s_2*v^3*x - e*f_1*f_2*p_3*p_4*v^3*x - 2*e*f_1*f_2*p_3^3*p_4*v*x + 4*f_1*f_2*h_2*p_3^3*p_4*s_2*x + e*h_2*j*p_3*p_4*s_2*v^3 + 3*e*h_2*j*p_3^3*p_4*s_2*v - e*f_2*h_1*p_3*p_4*v^3*x - e*f_2*h_1*p_3^3*p_4*v*x - f_1*f_2*g_2*p_3*p_4*v^3*x - 3*f_1*f_2*g_2*p_3^3*p_4*v*x + 4*f_2*h_1*h_2*p_3^3*p_4*s_2*x - e*f_1*j*p_3*p_4*v^3*x - 2*e*f_1*j*p_3^3*p_4*v*x + 3*f_1*h_2*j*p_3^3*p_4*s_2*x - f_2*g_2*h_1*p_3*p_4*v^3*x - 3*f_2*g_2*h_1*p_3^3*p_4*v*x - e*f_1*h_1*p_3^4*s_1*v*x + 2*f_1*f_2*j*p_3*p_4*v^2*x + 4*f_1*f_2*j*p_3^2*p_4*v*x - e*h_1*j*p_3*p_4*v^3*x - e*h_1*j*p_3^3*p_4*v*x + f_1*f_2*h_2*p_4*s_2*v^3*x + 3*h_1*h_2*j*p_3^3*p_4*s_2*x + 2*f_2*h_1*j*p_3*p_4*v^2*x + 4*f_2*h_1*j*p_3^2*p_4*v*x + f_1*h_1*h_2*p_3*s_2*v^3*x + 5*f_1*h_1*h_2*p_3^3*s_2*v*x + f_2*h_1*h_2*p_4*s_2*v^3*x + f_1*h_2*p_3*p_4*s_2*v^3*x + 5*f_1*h_2*p_3^3*p_4*s_2*v*x + h_1*h_2*p_3*p_4*s_2*v^3*x + 5*h_1*h_2*p_3^3*p_4*s_2*v*x - e*f_1*g_1*h_2^2*p_3^2*s_2^2*v^2 - 
                                    f_2*g_2*h_2^2*p_3^2*p_4^2*s_2^2*x - f_2^2*g_2*h_2^2*p_3*p_4^2*s_2^2*x - e*f_2*h_2^2*p_4^2*s_2^2*v^2*x - e*f_2^2*h_2^2*p_4^2*s_2^2*v*x - f_2*g_2*h_2^2*p_4^2*s_2^2*v^2*x - f_2^2*g_2*h_2^2*p_4^2*s_2^2*v*x - e*h_2^2*p_3*p_4^2*s_2^2*v^2*x - e*h_2^2*p_3^2*p_4^2*s_2^2*v*x - e*f_1*f_2*g_1*h_2*p_3*s_2*v^3 - 4*e*f_1*f_2*g_1*h_2*p_3^3*s_2*v + 2*e*f_1*f_2*h_2*j*p_3*s_2*v^2 + 3*e*f_1*f_2*h_2*j*p_3^2*s_2*v - e*f_1*g_1*h_2*j*p_3*s_2*v^3 - 3*e*f_1*g_1*h_2*j*p_3^3*s_2*v + e*f_1*f_2*g_2*h_1*p_3^3*v*x - 2*f_1*f_2*g_2*h_1*h_2*p_3^3*s_2*x + 3*f_1*f_2*h_1*h_2*j*p_3^2*s_2*x - f_1*f_2*g_2*h_1*j*p_3*v^2*x - 2*f_1*f_2*g_2*h_1*j*p_3^2*v*x - 2*e*f_2*g_1*h_2*p_3^3*p_4*s_2*v - f_1*f_2*g_2*h_1*h_2*s_2*v^3*x + e*f_1*f_2*g_2*p_3*p_4*v^3*x + 2*e*f_1*f_2*g_2*p_3^3*p_4*v*x + 2*e*f_2*h_2*j*p_3*p_4*s_2*v^2 + 3*e*f_2*h_2*j*p_3^2*p_4*s_2*v - 2*f_1*f_2*g_2*h_2*p_3^3*p_4*s_2*x + f_1*f_2*h_1*h_2*j*s_2*v^2*x - e*g_1*h_2*j*p_3^3*p_4*s_2*v + e*f_2*g_2*h_1*p_3*p_4*v^3*x + 2*e*f_2*g_2*h_1*p_3^3*p_4*v*x - 2*e*f_1*f_2*j*p_3*p_4*v^2*x - 2*e*f_1*f_2*j*p_3^2*p_4*v*x - 2*f_2*g_2*h_1*h_2*p_3^3*p_4*s_2*x + 3*f_1*f_2*h_2*j*p_3^2*p_4*s_2*x - e*f_1*f_2*h_1*p_3*s_1*v^3*x - 2*e*f_1*f_2*h_1*p_3^3*s_1*v*x - e*f_1*f_2*h_2*p_4*s_2*v^3*x - f_1*f_2*g_2*j*p_3*p_4*v^2*x - 2*f_1*f_2*g_2*j*p_3^2*p_4*v*x + 3*f_2*h_1*h_2*j*p_3^2*p_4*s_2*x - e*f_2*h_1*h_2*p_4*s_2*v^3*x - f_1*f_2*g_2*h_2*p_4*s_2*v^3*x - f_2*g_2*h_1*j*p_3*p_4*v^2*x - 2*f_2*g_2*h_1*j*p_3^2*p_4*v*x + 5*f_1*f_2*h_1*h_2*p_3*s_2*v^2*x + 8*f_1*f_2*h_1*h_2*p_3^2*s_2*v*x + 3*f_1*f_2^2*h_1*h_2*p_3*s_2*v*x - e*f_1*h_1*j*p_3*s_1*v^3*x - 2*e*f_1*h_1*j*p_3^3*s_1*v*x - f_2*g_2*h_1*h_2*p_4*s_2*v^3*x + f_1*f_2*h_2*j*p_4*s_2*v^2*x + 2*f_1*h_1*h_2*j*p_3*s_2*v^2*x + 5*f_1*h_1*h_2*j*p_3^2*s_2*v*x + 
                                    f_1*h_1*h_2*j^2*p_3*s_2*v*x + f_2*h_1*h_2*j*p_4*s_2*v^2*x - e*f_2*h_1*p_3^3*p_4*s_1*v*x - e*f_1*h_2*p_3*p_4*s_2*v^3*x - 2*e*f_1*h_2*p_3^3*p_4*s_2*v*x + 5*f_1*f_2*h_2*p_3*p_4*s_2*v^2*x + 8*f_1*f_2*h_2*p_3^2*p_4*s_2*v*x + 3*f_1*f_2^2*h_2*p_3*p_4*s_2*v*x - e*h_1*h_2*p_3*p_4*s_2*v^3*x - 2*e*h_1*h_2*p_3^3*p_4*s_2*v*x + 5*f_2*h_1*h_2*p_3*p_4*s_2*v^2*x + 8*f_2*h_1*h_2*p_3^2*p_4*s_2*v*x + 3*f_2^2*h_1*h_2*p_3*p_4*s_2*v*x - e*h_1*j*p_3^3*p_4*s_1*v*x + 2*f_1*h_2*j*p_3*p_4*s_2*v^2*x + 5*f_1*h_2*j*p_3^2*p_4*s_2*v*x + f_1*h_2*j^2*p_3*p_4*s_2*v*x + 4*f_2*h_2*j*p_3*p_4^2*s_2*v*x + 2*h_1*h_2*j*p_3*p_4*s_2*v^2*x + 5*h_1*h_2*j*p_3^2*p_4*s_2*v*x + h_1*h_2*j^2*p_3*p_4*s_2*v*x + e*f_2*g_2*h_2^2*p_4^2*s_2^2*v^2*x + e*f_2^2*g_2*h_2^2*p_4^2*s_2^2*v*x - 4*e*f_1*f_2*g_1*h_2*p_3^2*s_2*v^2 - e*f_1*f_2^2*g_1*h_2*p_3*s_2*v^2 - 2*e*f_1*f_2^2*g_1*h_2*p_3^2*s_2*v + e*f_1*f_2*h_2^2*j*p_3*s_2^2*v - 4*e*f_1*g_1*h_2*j*p_3^2*s_2*v^2 - e*f_1*g_1*h_2*j^2*p_3*s_2*v^2 - e*f_1*g_1*h_2*j^2*p_3^2*s_2*v + e*f_1*f_2*g_2*h_1*p_3^2*v^2*x - 2*f_1*f_2^2*g_2*h_1*h_2*p_3^2*s_2*x + f_1*f_2*h_1*h_2^2*j*p_3*s_2^2*x - e*f_2*g_1*h_2*p_3^2*p_4*s_2*v^2 - e*f_2^2*g_1*h_2*p_3*p_4*s_2*v^2 - 2*e*f_2^2*g_1*h_2*p_3^2*p_4*s_2*v - f_1*f_2^2*g_2*h_1*h_2*s_2*v^2*x + 3*e*f_1*f_2*g_2*p_3^2*p_4*v^2*x + e*f_1*f_2^2*g_2*p_3*p_4*v^2*x + e*f_1*f_2^2*g_2*p_3^2*p_4*v*x + e*f_2*h_2^2*j*p_3*p_4*s_2^2*v - 2*f_1*f_2^2*g_2*h_2*p_3^2*p_4*s_2*x + f_1*f_2*h_1*h_2^2*j*s_2^2*v*x - e*g_1*h_2*j*p_3^2*p_4*s_2*v^2 - e*g_1*h_2*j^2*p_3*p_4*s_2*v^2 - e*g_1*h_2*j^2*p_3^2*p_4*s_2*v + 3*e*f_2*g_2*h_1*p_3^2*p_4*v^2*x - 2*f_2^2*g_2*h_1*h_2*p_3^2*p_4*s_2*x + f_1*f_2*h_2^2*j*p_3*p_4*s_2^2*x + e*f_2*g_2*j*p_3*p_4^2*v^2*x + e*f_2*g_2*j*p_3^2*p_4^2*v*x - 3*e*f_1*f_2*h_1*p_3^2*s_1*v^2*x - 
                                    e*f_1*f_2^2*h_1*p_3*s_1*v^2*x - e*f_1*f_2^2*h_1*p_3^2*s_1*v*x - e*f_1*f_2^2*h_2*p_4*s_2*v^2*x - 2*f_2*g_2*h_2*j*p_3^2*p_4^2*s_2*x + e*f_2*g_2*h_2*p_4^2*s_2*v^3*x + f_2*h_1*h_2^2*j*p_3*p_4*s_2^2*x - f_1*f_2^2*g_2*h_2*p_4*s_2*v^2*x + 3*f_1*f_2*h_1*h_2^2*p_3*s_2^2*v*x - 3*e*f_1*h_1*j*p_3^2*s_1*v^2*x - e*f_1*h_1*j^2*p_3*s_1*v^2*x - e*f_1*h_1*j^2*p_3^2*s_1*v*x - e*f_2*h_2*j*p_4^2*s_2*v^2*x - f_2^2*g_2*h_1*h_2*p_4*s_2*v^2*x + f_1*f_2*h_2^2*j*p_4*s_2^2*v*x - f_2*g_2*h_2*j*p_4^2*s_2*v^2*x + f_1*h_1*h_2^2*j*p_3*s_2^2*v*x + f_2*h_1*h_2^2*j*p_4*s_2^2*v*x - e*f_2*h_1*p_3^2*p_4*s_1*v^2*x - e*f_2^2*h_1*p_3*p_4*s_1*v^2*x - e*f_2^2*h_1*p_3^2*p_4*s_1*v*x - 3*e*f_1*h_2*p_3^2*p_4*s_2*v^2*x - 4*e*f_2*h_2*p_3*p_4^2*s_2*v^2*x - 4*e*f_2*h_2*p_3^2*p_4^2*s_2*v*x - 2*e*f_2^2*h_2*p_3*p_4^2*s_2*v*x + 3*f_1*f_2*h_2^2*p_3*p_4*s_2^2*v*x - 3*e*h_1*h_2*p_3^2*p_4*s_2*v^2*x - 4*f_2*g_2*h_2*p_3*p_4^2*s_2*v^2*x - 5*f_2*g_2*h_2*p_3^2*p_4^2*s_2*v*x - 3*f_2^2*g_2*h_2*p_3*p_4^2*s_2*v*x + 3*f_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - e*h_1*j*p_3^2*p_4*s_1*v^2*x - e*h_1*j^2*p_3*p_4*s_1*v^2*x - e*h_1*j^2*p_3^2*p_4*s_1*v*x - e*h_2*j*p_3*p_4^2*s_2*v^2*x - e*h_2*j*p_3^2*p_4^2*s_2*v*x + f_1*h_2^2*j*p_3*p_4*s_2^2*v*x + h_1*h_2^2*j*p_3*p_4*s_2^2*v*x - e*f_1*f_2*g_1*h_2^2*p_3*s_2^2*v^2 - 2*e*f_1*f_2*g_1*h_2^2*p_3^2*s_2^2*v - e*f_1*f_2^2*g_1*h_2^2*p_3*s_2^2*v - e*f_1*g_1*h_2^2*j*p_3*s_2^2*v^2 - e*f_1*g_1*h_2^2*j*p_3^2*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*p_3^2*s_2^2*x - f_1*f_2^2*g_2*h_1*h_2^2*p_3*s_2^2*x - e*f_2*g_1*h_2^2*p_3^2*p_4*s_2^2*v - e*f_2^2*g_1*h_2^2*p_3*p_4*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*s_2^2*v^2*x - f_1*f_2^2*g_2*h_1*h_2^2*s_2^2*v*x - f_1*f_2*g_2*h_2^2*p_3^2*p_4*s_2^2*x - f_1*f_2^2*g_2*h_2^2*p_3*p_4*s_2^2*x - f_2*g_2*h_1*h_2^2*p_3^2*p_4*s_2^2*x - 
                                    f_2^2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*x - e*f_1*f_2*h_2^2*p_4*s_2^2*v^2*x - e*f_1*f_2^2*h_2^2*p_4*s_2^2*v*x - f_2*g_2*h_2^2*j*p_3*p_4^2*s_2^2*x + e*f_2^2*g_2*h_2*p_4^2*s_2*v^2*x - e*f_2*h_1*h_2^2*p_4*s_2^2*v^2*x - f_1*f_2*g_2*h_2^2*p_4*s_2^2*v^2*x - f_1*f_2^2*g_2*h_2^2*p_4*s_2^2*v*x - e*f_2*h_2^2*j*p_4^2*s_2^2*v*x - f_2*g_2*h_1*h_2^2*p_4*s_2^2*v^2*x - f_2^2*g_2*h_1*h_2^2*p_4*s_2^2*v*x - f_2*g_2*h_2^2*j*p_4^2*s_2^2*v*x - e*f_1*h_2^2*p_3*p_4*s_2^2*v^2*x - e*f_1*h_2^2*p_3^2*p_4*s_2^2*v*x - 2*e*f_2*h_2^2*p_3*p_4^2*s_2^2*v*x - e*h_1*h_2^2*p_3*p_4*s_2^2*v^2*x - e*h_1*h_2^2*p_3^2*p_4*s_2^2*v*x - 2*f_2*g_2*h_2^2*p_3*p_4^2*s_2^2*v*x + 4*f_1*f_2*h_1*h_2*j*p_3*s_2*v*x + 4*f_1*f_2*h_2*j*p_3*p_4*s_2*v*x + 4*f_2*h_1*h_2*j*p_3*p_4*s_2*v*x + e*f_1*f_2*g_2*h_2^2*p_4*s_2^2*v^2*x + e*f_1*f_2^2*g_2*h_2^2*p_4*s_2^2*v*x + e*f_2*g_2*h_1*h_2^2*p_4*s_2^2*v^2*x + e*f_2*g_2*h_2^2*j*p_4^2*s_2^2*v*x - e*f_1*f_2*h_1*h_2^2*s_1*s_2^2*v^2*x - e*f_1*f_2^2*h_1*h_2^2*s_1*s_2^2*v*x + 2*e*f_2*g_2*h_2^2*p_3*p_4^2*s_2^2*v*x - e*f_1*h_1*h_2^2*p_3*s_1*s_2^2*v^2*x - e*f_1*h_1*h_2^2*p_3^2*s_1*s_2^2*v*x - e*f_2^2*h_1*h_2^2*p_4*s_1*s_2^2*v*x - 2*e*f_1*f_2*g_1*h_2*j*p_3*s_2*v^2 - 3*e*f_1*f_2*g_1*h_2*j*p_3^2*s_2*v - 2*f_1*f_2*g_2*h_1*h_2*j*p_3^2*s_2*x - 2*e*f_2*g_1*h_2*j*p_3*p_4*s_2*v^2 - 3*e*f_2*g_1*h_2*j*p_3^2*p_4*s_2*v - f_1*f_2*g_2*h_1*h_2*j*s_2*v^2*x + e*f_1*f_2*g_2*j*p_3*p_4*v^2*x + e*f_1*f_2*g_2*j*p_3^2*p_4*v*x - 2*f_1*f_2*g_2*h_2*j*p_3^2*p_4*s_2*x + e*f_1*f_2*g_2*h_1*p_3*s_1*v^3*x + e*f_1*f_2*g_2*h_1*p_3^3*s_1*v*x + e*f_1*f_2*g_2*h_2*p_4*s_2*v^3*x - 2*f_2*g_2*h_1*h_2*j*p_3^2*p_4*s_2*x + e*f_2*g_2*h_1*h_2*p_4*s_2*v^3*x - 2*e*f_1*f_2*h_1*j*p_3*s_1*v^2*x - 2*e*f_1*f_2*h_1*j*p_3^2*s_1*v*x - e*f_1*f_2*h_2*j*p_4*s_2*v^2*x - 4*f_1*f_2*g_2*h_1*h_2*p_3*s_2*v^2*x - 
                                    5*f_1*f_2*g_2*h_1*h_2*p_3^2*s_2*v*x - 3*f_1*f_2^2*g_2*h_1*h_2*p_3*s_2*v*x - e*f_1*f_2*h_1*h_2*s_1*s_2*v^3*x + e*f_1*h_1*h_2*j*p_3*s_2*v^2*x + e*f_1*h_1*h_2*j*p_3^2*s_2*v*x - f_1*f_2*g_2*h_2*j*p_4*s_2*v^2*x - f_2*g_2*h_1*h_2*j*p_4*s_2*v^2*x - 4*e*f_1*f_2*h_2*p_3*p_4*s_2*v^2*x - 4*e*f_1*f_2*h_2*p_3^2*p_4*s_2*v*x - 2*e*f_1*f_2^2*h_2*p_3*p_4*s_2*v*x - 3*e*f_2*h_1*h_2*p_3*p_4*s_2*v^2*x - 2*e*f_2*h_1*h_2*p_3^2*p_4*s_2*v*x - 4*f_1*f_2*g_2*h_2*p_3*p_4*s_2*v^2*x - 5*f_1*f_2*g_2*h_2*p_3^2*p_4*s_2*v*x - 3*f_1*f_2^2*g_2*h_2*p_3*p_4*s_2*v*x - 2*e*f_2*h_1*j*p_3*p_4*s_1*v^2*x - 2*e*f_2*h_1*j*p_3^2*p_4*s_1*v*x - e*f_1*h_2*j*p_3*p_4*s_2*v^2*x - e*f_1*h_2*j*p_3^2*p_4*s_2*v*x - 2*e*f_2*h_2*j*p_3*p_4^2*s_2*v*x - 4*f_2*g_2*h_1*h_2*p_3*p_4*s_2*v^2*x - 5*f_2*g_2*h_1*h_2*p_3^2*p_4*s_2*v*x - 3*f_2^2*g_2*h_1*h_2*p_3*p_4*s_2*v*x - e*f_1*h_1*h_2*p_3*s_1*s_2*v^3*x - 2*e*f_1*h_1*h_2*p_3^3*s_1*s_2*v*x - 3*f_2*g_2*h_2*j*p_3*p_4^2*s_2*v*x - e*f_1*f_2*g_1*h_2^2*j*p_3*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*j*p_3*s_2^2*x - e*f_1*f_2*h_1*h_2^2*j*s_2^2*v*x - e*f_2*g_1*h_2^2*j*p_3*p_4*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*j*s_2^2*v*x - f_1*f_2*g_2*h_2^2*j*p_3*p_4*s_2^2*x + 2*e*f_1*f_2*g_2*h_1*p_3^2*s_1*v^2*x + e*f_1*f_2^2*g_2*h_1*p_3*s_1*v^2*x + e*f_1*f_2^2*g_2*h_1*p_3^2*s_1*v*x + e*f_1*f_2^2*g_2*h_2*p_4*s_2*v^2*x - f_2*g_2*h_1*h_2^2*j*p_3*p_4*s_2^2*x - e*f_1*f_2*h_2^2*j*p_4*s_2^2*v*x - 2*f_1*f_2*g_2*h_1*h_2^2*p_3*s_2^2*v*x + e*f_2*g_2*h_2*j*p_4^2*s_2*v^2*x - e*f_1*f_2^2*h_1*h_2*s_1*s_2*v^2*x - e*f_2*h_1*h_2^2*j*p_4*s_2^2*v*x - f_1*f_2*g_2*h_2^2*j*p_4*s_2^2*v*x - f_2*g_2*h_1*h_2^2*j*p_4*s_2^2*v*x - 2*e*f_1*f_2*h_2^2*p_3*p_4*s_2^2*v*x + e*f_2^2*g_2*h_1*p_3*p_4*s_1*v^2*x + e*f_2^2*g_2*h_1*p_3^2*p_4*s_1*v*x + 4*e*f_2*g_2*h_2*p_3*p_4^2*s_2*v^2*x + 
                                    4*e*f_2*g_2*h_2*p_3^2*p_4^2*s_2*v*x + 2*e*f_2^2*g_2*h_2*p_3*p_4^2*s_2*v*x - e*f_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 2*f_1*f_2*g_2*h_2^2*p_3*p_4*s_2^2*v*x - 2*f_2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 3*e*f_1*h_1*h_2*p_3^2*s_1*s_2*v^2*x - e*f_2^2*h_1*h_2*p_4*s_1*s_2*v^2*x - e*f_1*f_2*h_1*h_2*j*s_1*s_2*v^2*x + 4*e*f_1*f_2*g_2*h_2*p_3*p_4*s_2*v^2*x + 4*e*f_1*f_2*g_2*h_2*p_3^2*p_4*s_2*v*x + 2*e*f_1*f_2^2*g_2*h_2*p_3*p_4*s_2*v*x + 4*e*f_2*g_2*h_1*h_2*p_3*p_4*s_2*v^2*x + 4*e*f_2*g_2*h_1*h_2*p_3^2*p_4*s_2*v*x + e*f_2*g_2*h_1*j*p_3*p_4*s_1*v^2*x + e*f_2*g_2*h_1*j*p_3^2*p_4*s_1*v*x + 2*e*f_2*g_2*h_2*j*p_3*p_4^2*s_2*v*x - 4*e*f_1*f_2*h_1*h_2*p_3*s_1*s_2*v^2*x - 4*e*f_1*f_2*h_1*h_2*p_3^2*s_1*s_2*v*x - 2*e*f_1*f_2^2*h_1*h_2*p_3*s_1*s_2*v*x - 2*e*f_1*h_1*h_2*j*p_3*s_1*s_2*v^2*x - 2*e*f_1*h_1*h_2*j*p_3^2*s_1*s_2*v*x - e*f_2*h_1*h_2*j*p_4*s_1*s_2*v^2*x - e*f_2*h_1*h_2*p_3*p_4*s_1*s_2*v^2*x - 2*e*f_2*h_1*h_2*p_3^2*p_4*s_1*s_2*v*x - 2*e*f_2^2*h_1*h_2*p_3*p_4*s_1*s_2*v*x - e*h_1*h_2*j*p_3*p_4*s_1*s_2*v^2*x - e*h_1*h_2*j*p_3^2*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*j*s_2^2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*p_3*s_2^2*v*x + e*f_1*f_2*g_2*h_2^2*j*p_4*s_2^2*v*x + e*f_1*f_2^2*g_2*h_1*h_2*s_1*s_2*v^2*x + e*f_2*g_2*h_1*h_2^2*j*p_4*s_2^2*v*x + 2*e*f_1*f_2*g_2*h_2^2*p_3*p_4*s_2^2*v*x + 2*e*f_2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 2*e*f_1*f_2*h_1*h_2^2*p_3*s_1*s_2^2*v*x + e*f_2^2*g_2*h_1*h_2*p_4*s_1*s_2*v^2*x - e*f_2*h_1*h_2^2*p_3*p_4*s_1*s_2^2*v*x - 3*f_1*f_2*g_2*h_1*h_2*j*p_3*s_2*v*x - 2*e*f_1*f_2*h_2*j*p_3*p_4*s_2*v*x - 3*f_1*f_2*g_2*h_2*j*p_3*p_4*s_2*v*x - 3*f_2*g_2*h_1*h_2*j*p_3*p_4*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*s_1*s_2^2*v^2*x + e*f_1*f_2^2*g_2*h_1*h_2^2*s_1*s_2^2*v*x + e*f_2^2*g_2*h_1*h_2^2*p_4*s_1*s_2^2*v*x + 
                                    e*f_1*f_2*g_2*h_1*h_2*p_3*s_2*v^2*x + 2*e*f_1*f_2*g_2*h_1*h_2*p_3^2*s_2*v*x + e*f_1*f_2*g_2*h_1*j*p_3*s_1*v^2*x + e*f_1*f_2*g_2*h_1*j*p_3^2*s_1*v*x + e*f_1*f_2*g_2*h_2*j*p_4*s_2*v^2*x + e*f_1*f_2*g_2*h_1*h_2*s_1*s_2*v^3*x + e*f_1*f_2*g_2*h_1*h_2*j*p_3*s_2*v*x + 2*e*f_1*f_2*g_2*h_2*j*p_3*p_4*s_2*v*x + e*f_2*g_2*h_1*h_2*j*p_3*p_4*s_2*v*x - 2*e*f_1*f_2*h_1*h_2*j*p_3*s_1*s_2*v*x - 2*e*f_2*h_1*h_2*j*p_3*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2*j*s_1*s_2*v^2*x + 3*e*f_1*f_2*g_2*h_1*h_2*p_3*s_1*s_2*v^2*x + 2*e*f_1*f_2*g_2*h_1*h_2*p_3^2*s_1*s_2*v*x + 2*e*f_1*f_2^2*g_2*h_1*h_2*p_3*s_1*s_2*v*x + e*f_2*g_2*h_1*h_2*j*p_4*s_1*s_2*v^2*x + 2*e*f_2^2*g_2*h_1*h_2*p_3*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*p_3*s_1*s_2^2*v*x + e*f_1*f_2*g_2*h_1*h_2*j*p_3*s_1*s_2*v*x + e*f_2*g_2*h_1*h_2*j*p_3*p_4*s_1*s_2*v*x))/(p_2*p_3*(p_3 + h_2*s_2)*(a + p_1)*(f_1 + p_4)*(h_1 + p_4)*(p_3 + v)*(p_3 + v + h_2*s_2)*(f_2 + j + p_3)*(f_2 + j + p_3 + v)) })}


# Function to generate individual graph with individual parameter changes

generate_individual_plot <- function(param_name, title, xlab, ylab) {
  changes <- seq(-20, 20, 1)
  R_values <- sapply(changes, function(change) {
    updated_values <- basal_values
    updated_values[[param_name]] <- basal_values[[param_name]] * (1 + change / 100)
    calculate_R_value(updated_values)
  })
  
  data_frame <- data.frame(PercentageChange = changes, R_Value = R_values)
  plot <- ggplot(data_frame, aes(x = PercentageChange, y = R_Value)) +
    geom_line() +
    geom_point(data = subset(data_frame, PercentageChange == 0), color = "black", size = 1) +
    labs(title = title, x = xlab, y = ylab) +
    theme_minimal() +
    theme(panel.border = element_rect(colour = "black", fill=NA, size=1),
          axis.title.x = element_text(size = 8),
          axis.title.y = element_text(size = 8),
          plot.title = element_text(size = 9)) +
    ylim(0.4, 0.8)
  
  return(plot)
}

#Graph for each parameter

psi_2_plot <- generate_individual_plot("p_2", "R0 estimation vs Î¨2", "% change (Î¨2)", "R0 estimation")
psi_3_plot <- generate_individual_plot("p_3", "R0 estimation vs Î¨3", "% change (Î¨3)", "R0 estimation")
psi_1_plot <- generate_individual_plot("p_1", "R0 estimation vs Î¨1", "% change (Î¨1)", "R0 estimation")
h_1_plot <- generate_individual_plot("h_1", "R0 estimation vs h1", "% change (h1)", "R0 estimation")
psi_4_plot <- generate_individual_plot("p_4", "R0 estimation vs Î¨4", "% change (Î¨4)", "R0 estimation")
sigma_1_plot <- generate_individual_plot("s_1", "R0 estimation vs Ï1", "% change (Ï1)", "R0 estimation")
g_1_plot <- generate_individual_plot("g_1", "R0 estimation vs É£1", "% change (É£1)", "R0 estimation")
f_1_plot <- generate_individual_plot("f_1", "R0 estimation vs f1", "% change (f1)", "R0 estimation")
epsilon_plot <- generate_individual_plot("e", "R0 estimation vs Îµ", "% change (Îµ)", "R0 estimation")
v_plot <- generate_individual_plot("v", "R0 estimation vs Î½", "% change (Î½)", "R0 estimation")
z_plot <- generate_individual_plot("z", "R0 estimation vs z", "% change (z)", "R0 estimation")
alpha_plot <- generate_individual_plot("a", "R0 estimation vs Î±", "% change (Î±)", "R0 estimation")
x_plot <- generate_individual_plot("x", "R0 estimation vs x", "% change (x)", "R0 estimation")
lambda_plot <- generate_individual_plot("l", "R0 estimation vs Î»", "% change (Î»)", "R0 estimation")
delta_plot <- generate_individual_plot("d", "R0 estimation vs Î´", "% change (Î´)", "R0 estimation")

grid.arrange(psi_2_plot, psi_3_plot, psi_1_plot, sigma_1_plot, g_1_plot, psi_4_plot, 
             h_1_plot, epsilon_plot, f_1_plot, v_plot, alpha_plot, z_plot, x_plot, 
             lambda_plot,delta_plot, ncol = 5)





#4.2 EXTENDED SENSITIVITY ANALYSIS (CONTACT PRECAUTION AND PROPHILAXYS): R NUMBER 

d <- 0.0003996096
x <- 0.7
a <- 0.32
e <- 0.13
v <- 1/4
l <- 76
z <- 0.22 
p_1 <- 1/6 
p_2 <- 1/6
p_3 <- 1/6
p_4 <- 1/12
h_1<-1/10
h_2<-1/10
g_1 <- 0.5
g_2 <- 0
f_1 <-0.90
f_2 <- 0
j <- 0
s_1 <- 0.7
s_2 <- 0


# Contour plot for prophylactic treatment on asymptomatic carriers

j_range <- seq(0, 0.5, by = 0.1)        # Changes in treatment rate
sigma_2_range <- seq(0.5, 1, by = 0.1)  # Changes in treatment effectivness 

# Create the matrix of R0 using changes in j and Ï2 parameters
Contour_1 <- outer (j_range, sigma_2_range, FUN = function(j, s_2) {(d*l*(a + p_1*z)*(p_3^5*p_4^2*x + f_2^2*p_3^3*p_4^2*x + j^2*p_3^3*p_4^2*x + p_3^2*p_4^2*v^3*x + 3*p_3^3*p_4^2*v^2*x + e*f_1*p_3^5*v + e*h_1*p_3^5*v + f_1*h_1*p_3^5*x + e*p_3^5*p_4*v + f_1*p_3^5*p_4*x + h_1*p_3^5*p_4*x + e*f_1*p_3^3*v^3 + 2*e*f_1*p_3^4*v^2 + e*h_1*p_3^3*v^3 + 2*e*h_1*p_3^4*v^2 + e*p_3^3*p_4*v^3 + 2*e*p_3^4*p_4*v^2 + 2*f_2*p_3^4*p_4^2*x + 2*j*p_3^4*p_4^2*x + 3*p_3^4*p_4^2*v*x + h_2^2*p_3^3*p_4^2*s_2^2*x + e*f_1*f_2*p_3^2*v^3 + 3*e*f_1*f_2*p_3^3*v^2 + e*f_1*f_2^2*p_3^3*v - e*f_1*g_1*p_3^3*v^3 - 2*e*f_1*g_1*p_3^4*v^2 + e*f_2*h_1*p_3^2*v^3 + 2*e*f_2*h_1*p_3^3*v^2 + e*f_1*j*p_3^2*v^3 + 3*e*f_1*j*p_3^3*v^2 + e*f_1*j^2*p_3^3*v + f_1*f_2^2*h_1*p_3^3*x + e*h_1*j*p_3^2*v^3 + 2*e*h_1*j*p_3^3*v^2 + f_1*h_1*j^2*p_3^3*x + e*f_2*p_3^2*p_4*v^3 + 3*e*f_2*p_3^3*p_4*v^2 + e*f_2^2*p_3^3*p_4*v + f_1*f_2^2*p_3^3*p_4*x + e*j*p_3^2*p_4*v^3 + 3*e*j*p_3^3*p_4*v^2 + e*j^2*p_3^3*p_4*v - f_2*g_2*p_3^4*p_4^2*x + f_2^2*h_1*p_3^3*p_4*x + f_1*j^2*p_3^3*p_4*x + 2*f_2*j*p_3^3*p_4^2*x + h_1*j^2*p_3^3*p_4*x + f_1*h_1*p_3^2*v^3*x + 3*f_1*h_1*p_3^3*v^2*x - e*p_3^4*p_4^2*v*x + 2*h_2*p_3^4*p_4^2*s_2*x + f_1*p_3^2*p_4*v^3*x + 3*f_1*p_3^3*p_4*v^2*x + f_2*p_3*p_4^2*v^3*x + 5*f_2*p_3^3*p_4^2*v*x + h_1*p_3^2*p_4*v^3*x + 3*h_1*p_3^3*p_4*v^2*x + j*p_3*p_4^2*v^3*x + 5*j*p_3^3*p_4^2*v*x + e*f_1*f_2^2*p_3^2*v^2 + e*f_1*j^2*p_3^2*v^2 + e*f_2^2*p_3^2*p_4*v^2 + e*j^2*p_3^2*p_4*v^2 - f_2^2*g_2*p_3^3*p_4^2*x - e*p_3^2*p_4^2*v^3*x - 2*e*p_3^3*p_4^2*v^2*x + 4*f_2*p_3^2*p_4^2*v^2*x + f_2^2*p_3*p_4^2*v^2*x + 2*f_2^2*p_3^2*p_4^2*v*x + 4*j*p_3^2*p_4^2*v^2*x + j^2*p_3*p_4^2*v^2*x + 2*j^2*p_3^2*p_4^2*v*x + 2*e*f_1*f_2*p_3^4*v - e*f_1*g_1*p_3^5*v + e*f_2*h_1*p_3^4*v + 2*e*f_1*j*p_3^4*v + 2*f_1*f_2*h_1*p_3^4*x + e*h_1*j*p_3^4*v + 2*f_1*h_1*j*p_3^4*x + 
                                                                                        2*e*f_2*p_3^4*p_4*v + 2*f_1*f_2*p_3^4*p_4*x + 2*e*j*p_3^4*p_4*v + 2*f_2*h_1*p_3^4*p_4*x + 2*f_1*j*p_3^4*p_4*x + 2*h_1*j*p_3^4*p_4*x + 3*f_1*h_1*p_3^4*v*x + 3*f_1*p_3^4*p_4*v*x + 3*h_1*p_3^4*p_4*v*x - e*f_1*g_1*j^2*p_3^2*v^2 - e*f_2^2*g_1*p_3^2*p_4*v^2 - e*g_1*j^2*p_3^2*p_4*v^2 + e*f_1*h_2^2*p_3^3*s_2^2*v + e*h_1*h_2^2*p_3^3*s_2^2*v + f_1*h_1*h_2^2*p_3^3*s_2^2*x + e*h_2^2*p_3^3*p_4*s_2^2*v - 3*e*f_2*p_3^2*p_4^2*v^2*x - e*f_2^2*p_3*p_4^2*v^2*x - e*f_2^2*p_3^2*p_4^2*v*x + f_1*h_2^2*p_3^3*p_4*s_2^2*x + 2*f_2^2*h_2*p_3^2*p_4^2*s_2*x - 3*f_2*g_2*p_3^2*p_4^2*v^2*x - f_2^2*g_2*p_3*p_4^2*v^2*x - 2*f_2^2*g_2*p_3^2*p_4^2*v*x + h_1*h_2^2*p_3^3*p_4*s_2^2*x - 3*e*j*p_3^2*p_4^2*v^2*x - e*j^2*p_3*p_4^2*v^2*x - e*j^2*p_3^2*p_4^2*v*x + h_2*j^2*p_3^2*p_4^2*s_2*x + f_2^2*h_2*p_4^2*s_2*v^2*x + 4*h_2*p_3^2*p_4^2*s_2*v^2*x - 2*e*f_1*f_2*g_1*p_3^4*v + 2*e*f_1*f_2*j*p_3^3*v - 2*e*f_1*g_1*j*p_3^4*v - f_1*f_2*g_2*h_1*p_3^4*x + 2*f_1*f_2*h_1*j*p_3^3*x - e*f_2*g_1*p_3^4*p_4*v + 2*e*f_2*j*p_3^3*p_4*v - f_1*f_2*g_2*p_3^4*p_4*x - e*g_1*j*p_3^4*p_4*v + 2*e*f_1*h_2*p_3^4*s_2*v - f_2*g_2*h_1*p_3^4*p_4*x + 2*e*h_1*h_2*p_3^4*s_2*v + 2*f_1*f_2*j*p_3^3*p_4*x + 2*f_2*h_1*j*p_3^3*p_4*x + 2*f_1*h_1*h_2*p_3^4*s_2*x + f_1*f_2*h_1*p_3*v^3*x + 5*f_1*f_2*h_1*p_3^3*v*x + f_1*h_1*j*p_3*v^3*x + 5*f_1*h_1*j*p_3^3*v*x + 2*e*h_2*p_3^4*p_4*s_2*v - e*f_1*p_3^4*p_4*v*x + 2*f_1*h_2*p_3^4*p_4*s_2*x + f_1*f_2*p_3*p_4*v^3*x + 5*f_1*f_2*p_3^3*p_4*v*x - e*h_1*p_3^4*p_4*v*x + 2*h_1*h_2*p_3^4*p_4*s_2*x + f_2*h_1*p_3*p_4*v^3*x + 5*f_2*h_1*p_3^3*p_4*v*x + f_1*j*p_3*p_4*v^3*x + 5*f_1*j*p_3^3*p_4*v*x + h_1*j*p_3*p_4*v^3*x + 5*h_1*j*p_3^3*p_4*v*x + e*f_1*h_2^2*p_3^2*s_2^2*v^2 + e*h_1*h_2^2*p_3^2*s_2^2*v^2 + e*h_2^2*p_3^2*p_4*s_2^2*v^2 + 
                                                                                        2*f_2*h_2^2*p_3^2*p_4^2*s_2^2*x + f_2^2*h_2^2*p_3*p_4^2*s_2^2*x + h_2^2*j*p_3^2*p_4^2*s_2^2*x + f_2*h_2^2*p_4^2*s_2^2*v^2*x + f_2^2*h_2^2*p_4^2*s_2^2*v*x + h_2^2*p_3*p_4^2*s_2^2*v^2*x + 2*h_2^2*p_3^2*p_4^2*s_2^2*v*x - e*f_1*f_2*g_1*p_3^2*v^3 - 3*e*f_1*f_2*g_1*p_3^3*v^2 - e*f_1*f_2^2*g_1*p_3^3*v + 2*e*f_1*f_2*j*p_3^2*v^2 - e*f_1*g_1*j*p_3^2*v^3 - 3*e*f_1*g_1*j*p_3^3*v^2 - e*f_1*g_1*j^2*p_3^3*v - f_1*f_2^2*g_2*h_1*p_3^3*x - e*f_2*g_1*p_3^3*p_4*v^2 - e*f_2^2*g_1*p_3^3*p_4*v + 2*e*f_2*j*p_3^2*p_4*v^2 - f_1*f_2^2*g_2*p_3^3*p_4*x - e*g_1*j*p_3^3*p_4*v^2 - e*g_1*j^2*p_3^3*p_4*v + e*f_1*h_2*p_3^2*s_2*v^3 + 3*e*f_1*h_2*p_3^3*s_2*v^2 - f_2^2*g_2*h_1*p_3^3*p_4*x + e*h_1*h_2*p_3^2*s_2*v^3 + 3*e*h_1*h_2*p_3^3*s_2*v^2 - f_2*g_2*j*p_3^3*p_4^2*x + 4*f_1*f_2*h_1*p_3^2*v^2*x + f_1*f_2^2*h_1*p_3*v^2*x + 2*f_1*f_2^2*h_1*p_3^2*v*x + 4*f_1*h_1*j*p_3^2*v^2*x + f_1*h_1*j^2*p_3*v^2*x + 2*f_1*h_1*j^2*p_3^2*v*x + e*h_2*p_3^2*p_4*s_2*v^3 + 3*e*h_2*p_3^3*p_4*s_2*v^2 - e*f_1*p_3^2*p_4*v^3*x - 2*e*f_1*p_3^3*p_4*v^2*x - e*f_2*p_3*p_4^2*v^3*x - 2*e*f_2*p_3^3*p_4^2*v*x + 4*f_2*h_2*p_3^3*p_4^2*s_2*x + 4*f_1*f_2*p_3^2*p_4*v^2*x + f_1*f_2^2*p_3*p_4*v^2*x + 2*f_1*f_2^2*p_3^2*p_4*v*x - e*h_1*p_3^2*p_4*v^3*x - 2*e*h_1*p_3^3*p_4*v^2*x - f_2*g_2*p_3*p_4^2*v^3*x - 3*f_2*g_2*p_3^3*p_4^2*v*x + 4*f_2*h_1*p_3^2*p_4*v^2*x + f_2^2*h_1*p_3*p_4*v^2*x + 2*f_2^2*h_1*p_3^2*p_4*v*x - e*j*p_3*p_4^2*v^3*x - 2*e*j*p_3^3*p_4^2*v*x + 3*h_2*j*p_3^3*p_4^2*s_2*x + 4*f_1*j*p_3^2*p_4*v^2*x + f_1*j^2*p_3*p_4*v^2*x + 2*f_1*j^2*p_3^2*p_4*v*x + 2*f_2*j*p_3*p_4^2*v^2*x + 4*f_2*j*p_3^2*p_4^2*v*x + f_2*h_2*p_4^2*s_2*v^3*x + 4*h_1*j*p_3^2*p_4*v^2*x + h_1*j^2*p_3*p_4*v^2*x + 2*h_1*j^2*p_3^2*p_4*v*x + h_2*p_3*p_4^2*s_2*v^3*x + 5*h_2*p_3^3*p_4^2*s_2*v*x - 
                                                                                        e*f_1*f_2^2*g_1*p_3^2*v^2 - 2*e*f_1*f_2*g_1*j*p_3^2*v^2 - 2*e*f_2*g_1*j*p_3^2*p_4*v^2 + 4*e*f_1*f_2*h_2*p_3^2*s_2*v^2 + e*f_1*f_2^2*h_2*p_3*s_2*v^2 + 2*e*f_1*f_2^2*h_2*p_3^2*s_2*v - e*f_1*g_1*h_2*p_3^2*s_2*v^3 - 3*e*f_1*g_1*h_2*p_3^3*s_2*v^2 + 3*e*f_2*h_1*h_2*p_3^2*s_2*v^2 + 4*e*f_1*h_2*j*p_3^2*s_2*v^2 + e*f_1*h_2*j^2*p_3*s_2*v^2 + e*f_1*h_2*j^2*p_3^2*s_2*v + 2*f_1*f_2^2*h_1*h_2*p_3^2*s_2*x + 3*e*h_1*h_2*j*p_3^2*s_2*v^2 - 3*f_1*f_2*g_2*h_1*p_3^2*v^2*x - f_1*f_2^2*g_2*h_1*p_3*v^2*x - 2*f_1*f_2^2*g_2*h_1*p_3^2*v*x + f_1*h_1*h_2*j^2*p_3^2*s_2*x + 4*e*f_2*h_2*p_3^2*p_4*s_2*v^2 + e*f_2^2*h_2*p_3*p_4*s_2*v^2 + 2*e*f_2^2*h_2*p_3^2*p_4*s_2*v + f_1*f_2^2*h_1*h_2*s_2*v^2*x - 3*e*f_1*f_2*p_3^2*p_4*v^2*x - e*f_1*f_2^2*p_3*p_4*v^2*x - e*f_1*f_2^2*p_3^2*p_4*v*x + 2*f_1*f_2^2*h_2*p_3^2*p_4*s_2*x + 4*e*h_2*j*p_3^2*p_4*s_2*v^2 + e*h_2*j^2*p_3*p_4*s_2*v^2 + e*h_2*j^2*p_3^2*p_4*s_2*v + e*f_2*g_2*p_3*p_4^2*v^3*x + 2*e*f_2*g_2*p_3^3*p_4^2*v*x - 2*f_2*g_2*h_2*p_3^3*p_4^2*s_2*x - 2*e*f_2*h_1*p_3^2*p_4*v^2*x - 3*f_1*f_2*g_2*p_3^2*p_4*v^2*x - f_1*f_2^2*g_2*p_3*p_4*v^2*x - 2*f_1*f_2^2*g_2*p_3^2*p_4*v*x + 2*f_2^2*h_1*h_2*p_3^2*p_4*s_2*x - 3*e*f_1*j*p_3^2*p_4*v^2*x - e*f_1*j^2*p_3*p_4*v^2*x - e*f_1*j^2*p_3^2*p_4*v*x - 2*e*f_2*j*p_3*p_4^2*v^2*x - 2*e*f_2*j*p_3^2*p_4^2*v*x + f_1*h_2*j^2*p_3^2*p_4*s_2*x - 3*f_2*g_2*h_1*p_3^2*p_4*v^2*x - f_2^2*g_2*h_1*p_3*p_4*v^2*x - 2*f_2^2*g_2*h_1*p_3^2*p_4*v*x + 3*f_2*h_2*j*p_3^2*p_4^2*s_2*x - e*f_1*h_1*p_3^2*s_1*v^3*x - 2*e*f_1*h_1*p_3^3*s_1*v^2*x - e*f_2*h_2*p_4^2*s_2*v^3*x - 2*e*h_1*j*p_3^2*p_4*v^2*x - f_2*g_2*j*p_3*p_4^2*v^2*x - 2*f_2*g_2*j*p_3^2*p_4^2*v*x + f_1*f_2^2*h_2*p_4*s_2*v^2*x + h_1*h_2*j^2*p_3^2*p_4*s_2*x - f_2*g_2*h_2*p_4^2*s_2*v^3*x + 4*f_1*h_1*h_2*p_3^2*s_2*v^2*x + 
                                                                                        f_2^2*h_1*h_2*p_4*s_2*v^2*x + f_2*h_2*j*p_4^2*s_2*v^2*x - e*h_2*p_3*p_4^2*s_2*v^3*x - 2*e*h_2*p_3^3*p_4^2*s_2*v*x + 4*f_1*h_2*p_3^2*p_4*s_2*v^2*x + 5*f_2*h_2*p_3*p_4^2*s_2*v^2*x + 8*f_2*h_2*p_3^2*p_4^2*s_2*v*x + 3*f_2^2*h_2*p_3*p_4^2*s_2*v*x + 4*h_1*h_2*p_3^2*p_4*s_2*v^2*x + 2*h_2*j*p_3*p_4^2*s_2*v^2*x + 5*h_2*j*p_3^2*p_4^2*s_2*v*x + h_2*j^2*p_3*p_4^2*s_2*v*x + e*f_1*f_2*h_2^2*p_3*s_2^2*v^2 + 2*e*f_1*f_2*h_2^2*p_3^2*s_2^2*v + e*f_1*f_2^2*h_2^2*p_3*s_2^2*v - e*f_1*g_1*h_2^2*p_3^3*s_2^2*v + e*f_2*h_1*h_2^2*p_3*s_2^2*v^2 + e*f_2*h_1*h_2^2*p_3^2*s_2^2*v + e*f_1*h_2^2*j*p_3*s_2^2*v^2 + e*f_1*h_2^2*j*p_3^2*s_2^2*v + 2*f_1*f_2*h_1*h_2^2*p_3^2*s_2^2*x + f_1*f_2^2*h_1*h_2^2*p_3*s_2^2*x + e*h_1*h_2^2*j*p_3*s_2^2*v^2 + e*h_1*h_2^2*j*p_3^2*s_2^2*v + f_1*h_1*h_2^2*j*p_3^2*s_2^2*x + e*f_2*h_2^2*p_3*p_4*s_2^2*v^2 + 2*e*f_2*h_2^2*p_3^2*p_4*s_2^2*v + e*f_2^2*h_2^2*p_3*p_4*s_2^2*v + f_1*f_2*h_1*h_2^2*s_2^2*v^2*x + f_1*f_2^2*h_1*h_2^2*s_2^2*v*x + 2*f_1*f_2*h_2^2*p_3^2*p_4*s_2^2*x + f_1*f_2^2*h_2^2*p_3*p_4*s_2^2*x + 3*e*f_2*g_2*p_3^2*p_4^2*v^2*x + e*f_2^2*g_2*p_3*p_4^2*v^2*x + e*f_2^2*g_2*p_3^2*p_4^2*v*x + e*h_2^2*j*p_3*p_4*s_2^2*v^2 + e*h_2^2*j*p_3^2*p_4*s_2^2*v - 2*f_2^2*g_2*h_2*p_3^2*p_4^2*s_2*x + 2*f_2*h_1*h_2^2*p_3^2*p_4*s_2^2*x + f_2^2*h_1*h_2^2*p_3*p_4*s_2^2*x + f_1*h_2^2*j*p_3^2*p_4*s_2^2*x + f_2*h_2^2*j*p_3*p_4^2*s_2^2*x - e*f_2^2*h_2*p_4^2*s_2*v^2*x + f_1*f_2*h_2^2*p_4*s_2^2*v^2*x + f_1*f_2^2*h_2^2*p_4*s_2^2*v*x + h_1*h_2^2*j*p_3^2*p_4*s_2^2*x - f_2^2*g_2*h_2*p_4^2*s_2*v^2*x + f_1*h_1*h_2^2*p_3*s_2^2*v^2*x + 2*f_1*h_1*h_2^2*p_3^2*s_2^2*v*x + f_2*h_1*h_2^2*p_4*s_2^2*v^2*x + f_2^2*h_1*h_2^2*p_4*s_2^2*v*x + f_2*h_2^2*j*p_4^2*s_2^2*v*x - 3*e*h_2*p_3^2*p_4^2*s_2*v^2*x + f_1*h_2^2*p_3*p_4*s_2^2*v^2*x + 
                                                                                        2*f_1*h_2^2*p_3^2*p_4*s_2^2*v*x + 3*f_2*h_2^2*p_3*p_4^2*s_2^2*v*x + h_1*h_2^2*p_3*p_4*s_2^2*v^2*x + 2*h_1*h_2^2*p_3^2*p_4*s_2^2*v*x + h_2^2*j*p_3*p_4^2*s_2^2*v*x - 2*e*f_1*f_2*g_1*j*p_3^3*v - f_1*f_2*g_2*h_1*j*p_3^3*x - 2*e*f_2*g_1*j*p_3^3*p_4*v + e*f_1*f_2*h_2*p_3*s_2*v^3 + 4*e*f_1*f_2*h_2*p_3^3*s_2*v - 2*e*f_1*g_1*h_2*p_3^4*s_2*v + e*f_2*h_1*h_2*p_3*s_2*v^3 + 2*e*f_2*h_1*h_2*p_3^3*s_2*v - f_1*f_2*g_2*j*p_3^3*p_4*x + e*f_1*h_2*j*p_3*s_2*v^3 + 3*e*f_1*h_2*j*p_3^3*s_2*v - f_2*g_2*h_1*j*p_3^3*p_4*x + 4*f_1*f_2*h_1*h_2*p_3^3*s_2*x + e*h_1*h_2*j*p_3*s_2*v^3 + 2*e*h_1*h_2*j*p_3^3*s_2*v - f_1*f_2*g_2*h_1*p_3*v^3*x - 3*f_1*f_2*g_2*h_1*p_3^3*v*x + 3*f_1*h_1*h_2*j*p_3^3*s_2*x + 2*f_1*f_2*h_1*j*p_3*v^2*x + 4*f_1*f_2*h_1*j*p_3^2*v*x + e*f_2*h_2*p_3*p_4*s_2*v^3 + 4*e*f_2*h_2*p_3^3*p_4*s_2*v + f_1*f_2*h_1*h_2*s_2*v^3*x - e*f_1*f_2*p_3*p_4*v^3*x - 2*e*f_1*f_2*p_3^3*p_4*v*x + 4*f_1*f_2*h_2*p_3^3*p_4*s_2*x + e*h_2*j*p_3*p_4*s_2*v^3 + 3*e*h_2*j*p_3^3*p_4*s_2*v - e*f_2*h_1*p_3*p_4*v^3*x - e*f_2*h_1*p_3^3*p_4*v*x - f_1*f_2*g_2*p_3*p_4*v^3*x - 3*f_1*f_2*g_2*p_3^3*p_4*v*x + 4*f_2*h_1*h_2*p_3^3*p_4*s_2*x - e*f_1*j*p_3*p_4*v^3*x - 2*e*f_1*j*p_3^3*p_4*v*x + 3*f_1*h_2*j*p_3^3*p_4*s_2*x - f_2*g_2*h_1*p_3*p_4*v^3*x - 3*f_2*g_2*h_1*p_3^3*p_4*v*x - e*f_1*h_1*p_3^4*s_1*v*x + 2*f_1*f_2*j*p_3*p_4*v^2*x + 4*f_1*f_2*j*p_3^2*p_4*v*x - e*h_1*j*p_3*p_4*v^3*x - e*h_1*j*p_3^3*p_4*v*x + f_1*f_2*h_2*p_4*s_2*v^3*x + 3*h_1*h_2*j*p_3^3*p_4*s_2*x + 2*f_2*h_1*j*p_3*p_4*v^2*x + 4*f_2*h_1*j*p_3^2*p_4*v*x + f_1*h_1*h_2*p_3*s_2*v^3*x + 5*f_1*h_1*h_2*p_3^3*s_2*v*x + f_2*h_1*h_2*p_4*s_2*v^3*x + f_1*h_2*p_3*p_4*s_2*v^3*x + 5*f_1*h_2*p_3^3*p_4*s_2*v*x + h_1*h_2*p_3*p_4*s_2*v^3*x + 5*h_1*h_2*p_3^3*p_4*s_2*v*x - e*f_1*g_1*h_2^2*p_3^2*s_2^2*v^2 - 
                                                                                        f_2*g_2*h_2^2*p_3^2*p_4^2*s_2^2*x - f_2^2*g_2*h_2^2*p_3*p_4^2*s_2^2*x - e*f_2*h_2^2*p_4^2*s_2^2*v^2*x - e*f_2^2*h_2^2*p_4^2*s_2^2*v*x - f_2*g_2*h_2^2*p_4^2*s_2^2*v^2*x - f_2^2*g_2*h_2^2*p_4^2*s_2^2*v*x - e*h_2^2*p_3*p_4^2*s_2^2*v^2*x - e*h_2^2*p_3^2*p_4^2*s_2^2*v*x - e*f_1*f_2*g_1*h_2*p_3*s_2*v^3 - 4*e*f_1*f_2*g_1*h_2*p_3^3*s_2*v + 2*e*f_1*f_2*h_2*j*p_3*s_2*v^2 + 3*e*f_1*f_2*h_2*j*p_3^2*s_2*v - e*f_1*g_1*h_2*j*p_3*s_2*v^3 - 3*e*f_1*g_1*h_2*j*p_3^3*s_2*v + e*f_1*f_2*g_2*h_1*p_3^3*v*x - 2*f_1*f_2*g_2*h_1*h_2*p_3^3*s_2*x + 3*f_1*f_2*h_1*h_2*j*p_3^2*s_2*x - f_1*f_2*g_2*h_1*j*p_3*v^2*x - 2*f_1*f_2*g_2*h_1*j*p_3^2*v*x - 2*e*f_2*g_1*h_2*p_3^3*p_4*s_2*v - f_1*f_2*g_2*h_1*h_2*s_2*v^3*x + e*f_1*f_2*g_2*p_3*p_4*v^3*x + 2*e*f_1*f_2*g_2*p_3^3*p_4*v*x + 2*e*f_2*h_2*j*p_3*p_4*s_2*v^2 + 3*e*f_2*h_2*j*p_3^2*p_4*s_2*v - 2*f_1*f_2*g_2*h_2*p_3^3*p_4*s_2*x + f_1*f_2*h_1*h_2*j*s_2*v^2*x - e*g_1*h_2*j*p_3^3*p_4*s_2*v + e*f_2*g_2*h_1*p_3*p_4*v^3*x + 2*e*f_2*g_2*h_1*p_3^3*p_4*v*x - 2*e*f_1*f_2*j*p_3*p_4*v^2*x - 2*e*f_1*f_2*j*p_3^2*p_4*v*x - 2*f_2*g_2*h_1*h_2*p_3^3*p_4*s_2*x + 3*f_1*f_2*h_2*j*p_3^2*p_4*s_2*x - e*f_1*f_2*h_1*p_3*s_1*v^3*x - 2*e*f_1*f_2*h_1*p_3^3*s_1*v*x - e*f_1*f_2*h_2*p_4*s_2*v^3*x - f_1*f_2*g_2*j*p_3*p_4*v^2*x - 2*f_1*f_2*g_2*j*p_3^2*p_4*v*x + 3*f_2*h_1*h_2*j*p_3^2*p_4*s_2*x - e*f_2*h_1*h_2*p_4*s_2*v^3*x - f_1*f_2*g_2*h_2*p_4*s_2*v^3*x - f_2*g_2*h_1*j*p_3*p_4*v^2*x - 2*f_2*g_2*h_1*j*p_3^2*p_4*v*x + 5*f_1*f_2*h_1*h_2*p_3*s_2*v^2*x + 8*f_1*f_2*h_1*h_2*p_3^2*s_2*v*x + 3*f_1*f_2^2*h_1*h_2*p_3*s_2*v*x - e*f_1*h_1*j*p_3*s_1*v^3*x - 2*e*f_1*h_1*j*p_3^3*s_1*v*x - f_2*g_2*h_1*h_2*p_4*s_2*v^3*x + f_1*f_2*h_2*j*p_4*s_2*v^2*x + 2*f_1*h_1*h_2*j*p_3*s_2*v^2*x + 5*f_1*h_1*h_2*j*p_3^2*s_2*v*x + 
                                                                                        f_1*h_1*h_2*j^2*p_3*s_2*v*x + f_2*h_1*h_2*j*p_4*s_2*v^2*x - e*f_2*h_1*p_3^3*p_4*s_1*v*x - e*f_1*h_2*p_3*p_4*s_2*v^3*x - 2*e*f_1*h_2*p_3^3*p_4*s_2*v*x + 5*f_1*f_2*h_2*p_3*p_4*s_2*v^2*x + 8*f_1*f_2*h_2*p_3^2*p_4*s_2*v*x + 3*f_1*f_2^2*h_2*p_3*p_4*s_2*v*x - e*h_1*h_2*p_3*p_4*s_2*v^3*x - 2*e*h_1*h_2*p_3^3*p_4*s_2*v*x + 5*f_2*h_1*h_2*p_3*p_4*s_2*v^2*x + 8*f_2*h_1*h_2*p_3^2*p_4*s_2*v*x + 3*f_2^2*h_1*h_2*p_3*p_4*s_2*v*x - e*h_1*j*p_3^3*p_4*s_1*v*x + 2*f_1*h_2*j*p_3*p_4*s_2*v^2*x + 5*f_1*h_2*j*p_3^2*p_4*s_2*v*x + f_1*h_2*j^2*p_3*p_4*s_2*v*x + 4*f_2*h_2*j*p_3*p_4^2*s_2*v*x + 2*h_1*h_2*j*p_3*p_4*s_2*v^2*x + 5*h_1*h_2*j*p_3^2*p_4*s_2*v*x + h_1*h_2*j^2*p_3*p_4*s_2*v*x + e*f_2*g_2*h_2^2*p_4^2*s_2^2*v^2*x + e*f_2^2*g_2*h_2^2*p_4^2*s_2^2*v*x - 4*e*f_1*f_2*g_1*h_2*p_3^2*s_2*v^2 - e*f_1*f_2^2*g_1*h_2*p_3*s_2*v^2 - 2*e*f_1*f_2^2*g_1*h_2*p_3^2*s_2*v + e*f_1*f_2*h_2^2*j*p_3*s_2^2*v - 4*e*f_1*g_1*h_2*j*p_3^2*s_2*v^2 - e*f_1*g_1*h_2*j^2*p_3*s_2*v^2 - e*f_1*g_1*h_2*j^2*p_3^2*s_2*v + e*f_1*f_2*g_2*h_1*p_3^2*v^2*x - 2*f_1*f_2^2*g_2*h_1*h_2*p_3^2*s_2*x + f_1*f_2*h_1*h_2^2*j*p_3*s_2^2*x - e*f_2*g_1*h_2*p_3^2*p_4*s_2*v^2 - e*f_2^2*g_1*h_2*p_3*p_4*s_2*v^2 - 2*e*f_2^2*g_1*h_2*p_3^2*p_4*s_2*v - f_1*f_2^2*g_2*h_1*h_2*s_2*v^2*x + 3*e*f_1*f_2*g_2*p_3^2*p_4*v^2*x + e*f_1*f_2^2*g_2*p_3*p_4*v^2*x + e*f_1*f_2^2*g_2*p_3^2*p_4*v*x + e*f_2*h_2^2*j*p_3*p_4*s_2^2*v - 2*f_1*f_2^2*g_2*h_2*p_3^2*p_4*s_2*x + f_1*f_2*h_1*h_2^2*j*s_2^2*v*x - e*g_1*h_2*j*p_3^2*p_4*s_2*v^2 - e*g_1*h_2*j^2*p_3*p_4*s_2*v^2 - e*g_1*h_2*j^2*p_3^2*p_4*s_2*v + 3*e*f_2*g_2*h_1*p_3^2*p_4*v^2*x - 2*f_2^2*g_2*h_1*h_2*p_3^2*p_4*s_2*x + f_1*f_2*h_2^2*j*p_3*p_4*s_2^2*x + e*f_2*g_2*j*p_3*p_4^2*v^2*x + e*f_2*g_2*j*p_3^2*p_4^2*v*x - 3*e*f_1*f_2*h_1*p_3^2*s_1*v^2*x - 
                                                                                        e*f_1*f_2^2*h_1*p_3*s_1*v^2*x - e*f_1*f_2^2*h_1*p_3^2*s_1*v*x - e*f_1*f_2^2*h_2*p_4*s_2*v^2*x - 2*f_2*g_2*h_2*j*p_3^2*p_4^2*s_2*x + e*f_2*g_2*h_2*p_4^2*s_2*v^3*x + f_2*h_1*h_2^2*j*p_3*p_4*s_2^2*x - f_1*f_2^2*g_2*h_2*p_4*s_2*v^2*x + 3*f_1*f_2*h_1*h_2^2*p_3*s_2^2*v*x - 3*e*f_1*h_1*j*p_3^2*s_1*v^2*x - e*f_1*h_1*j^2*p_3*s_1*v^2*x - e*f_1*h_1*j^2*p_3^2*s_1*v*x - e*f_2*h_2*j*p_4^2*s_2*v^2*x - f_2^2*g_2*h_1*h_2*p_4*s_2*v^2*x + f_1*f_2*h_2^2*j*p_4*s_2^2*v*x - f_2*g_2*h_2*j*p_4^2*s_2*v^2*x + f_1*h_1*h_2^2*j*p_3*s_2^2*v*x + f_2*h_1*h_2^2*j*p_4*s_2^2*v*x - e*f_2*h_1*p_3^2*p_4*s_1*v^2*x - e*f_2^2*h_1*p_3*p_4*s_1*v^2*x - e*f_2^2*h_1*p_3^2*p_4*s_1*v*x - 3*e*f_1*h_2*p_3^2*p_4*s_2*v^2*x - 4*e*f_2*h_2*p_3*p_4^2*s_2*v^2*x - 4*e*f_2*h_2*p_3^2*p_4^2*s_2*v*x - 2*e*f_2^2*h_2*p_3*p_4^2*s_2*v*x + 3*f_1*f_2*h_2^2*p_3*p_4*s_2^2*v*x - 3*e*h_1*h_2*p_3^2*p_4*s_2*v^2*x - 4*f_2*g_2*h_2*p_3*p_4^2*s_2*v^2*x - 5*f_2*g_2*h_2*p_3^2*p_4^2*s_2*v*x - 3*f_2^2*g_2*h_2*p_3*p_4^2*s_2*v*x + 3*f_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - e*h_1*j*p_3^2*p_4*s_1*v^2*x - e*h_1*j^2*p_3*p_4*s_1*v^2*x - e*h_1*j^2*p_3^2*p_4*s_1*v*x - e*h_2*j*p_3*p_4^2*s_2*v^2*x - e*h_2*j*p_3^2*p_4^2*s_2*v*x + f_1*h_2^2*j*p_3*p_4*s_2^2*v*x + h_1*h_2^2*j*p_3*p_4*s_2^2*v*x - e*f_1*f_2*g_1*h_2^2*p_3*s_2^2*v^2 - 2*e*f_1*f_2*g_1*h_2^2*p_3^2*s_2^2*v - e*f_1*f_2^2*g_1*h_2^2*p_3*s_2^2*v - e*f_1*g_1*h_2^2*j*p_3*s_2^2*v^2 - e*f_1*g_1*h_2^2*j*p_3^2*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*p_3^2*s_2^2*x - f_1*f_2^2*g_2*h_1*h_2^2*p_3*s_2^2*x - e*f_2*g_1*h_2^2*p_3^2*p_4*s_2^2*v - e*f_2^2*g_1*h_2^2*p_3*p_4*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*s_2^2*v^2*x - f_1*f_2^2*g_2*h_1*h_2^2*s_2^2*v*x - f_1*f_2*g_2*h_2^2*p_3^2*p_4*s_2^2*x - f_1*f_2^2*g_2*h_2^2*p_3*p_4*s_2^2*x - f_2*g_2*h_1*h_2^2*p_3^2*p_4*s_2^2*x - 
                                                                                        f_2^2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*x - e*f_1*f_2*h_2^2*p_4*s_2^2*v^2*x - e*f_1*f_2^2*h_2^2*p_4*s_2^2*v*x - f_2*g_2*h_2^2*j*p_3*p_4^2*s_2^2*x + e*f_2^2*g_2*h_2*p_4^2*s_2*v^2*x - e*f_2*h_1*h_2^2*p_4*s_2^2*v^2*x - f_1*f_2*g_2*h_2^2*p_4*s_2^2*v^2*x - f_1*f_2^2*g_2*h_2^2*p_4*s_2^2*v*x - e*f_2*h_2^2*j*p_4^2*s_2^2*v*x - f_2*g_2*h_1*h_2^2*p_4*s_2^2*v^2*x - f_2^2*g_2*h_1*h_2^2*p_4*s_2^2*v*x - f_2*g_2*h_2^2*j*p_4^2*s_2^2*v*x - e*f_1*h_2^2*p_3*p_4*s_2^2*v^2*x - e*f_1*h_2^2*p_3^2*p_4*s_2^2*v*x - 2*e*f_2*h_2^2*p_3*p_4^2*s_2^2*v*x - e*h_1*h_2^2*p_3*p_4*s_2^2*v^2*x - e*h_1*h_2^2*p_3^2*p_4*s_2^2*v*x - 2*f_2*g_2*h_2^2*p_3*p_4^2*s_2^2*v*x + 4*f_1*f_2*h_1*h_2*j*p_3*s_2*v*x + 4*f_1*f_2*h_2*j*p_3*p_4*s_2*v*x + 4*f_2*h_1*h_2*j*p_3*p_4*s_2*v*x + e*f_1*f_2*g_2*h_2^2*p_4*s_2^2*v^2*x + e*f_1*f_2^2*g_2*h_2^2*p_4*s_2^2*v*x + e*f_2*g_2*h_1*h_2^2*p_4*s_2^2*v^2*x + e*f_2*g_2*h_2^2*j*p_4^2*s_2^2*v*x - e*f_1*f_2*h_1*h_2^2*s_1*s_2^2*v^2*x - e*f_1*f_2^2*h_1*h_2^2*s_1*s_2^2*v*x + 2*e*f_2*g_2*h_2^2*p_3*p_4^2*s_2^2*v*x - e*f_1*h_1*h_2^2*p_3*s_1*s_2^2*v^2*x - e*f_1*h_1*h_2^2*p_3^2*s_1*s_2^2*v*x - e*f_2^2*h_1*h_2^2*p_4*s_1*s_2^2*v*x - 2*e*f_1*f_2*g_1*h_2*j*p_3*s_2*v^2 - 3*e*f_1*f_2*g_1*h_2*j*p_3^2*s_2*v - 2*f_1*f_2*g_2*h_1*h_2*j*p_3^2*s_2*x - 2*e*f_2*g_1*h_2*j*p_3*p_4*s_2*v^2 - 3*e*f_2*g_1*h_2*j*p_3^2*p_4*s_2*v - f_1*f_2*g_2*h_1*h_2*j*s_2*v^2*x + e*f_1*f_2*g_2*j*p_3*p_4*v^2*x + e*f_1*f_2*g_2*j*p_3^2*p_4*v*x - 2*f_1*f_2*g_2*h_2*j*p_3^2*p_4*s_2*x + e*f_1*f_2*g_2*h_1*p_3*s_1*v^3*x + e*f_1*f_2*g_2*h_1*p_3^3*s_1*v*x + e*f_1*f_2*g_2*h_2*p_4*s_2*v^3*x - 2*f_2*g_2*h_1*h_2*j*p_3^2*p_4*s_2*x + e*f_2*g_2*h_1*h_2*p_4*s_2*v^3*x - 2*e*f_1*f_2*h_1*j*p_3*s_1*v^2*x - 2*e*f_1*f_2*h_1*j*p_3^2*s_1*v*x - e*f_1*f_2*h_2*j*p_4*s_2*v^2*x - 4*f_1*f_2*g_2*h_1*h_2*p_3*s_2*v^2*x - 
                                                                                        5*f_1*f_2*g_2*h_1*h_2*p_3^2*s_2*v*x - 3*f_1*f_2^2*g_2*h_1*h_2*p_3*s_2*v*x - e*f_1*f_2*h_1*h_2*s_1*s_2*v^3*x + e*f_1*h_1*h_2*j*p_3*s_2*v^2*x + e*f_1*h_1*h_2*j*p_3^2*s_2*v*x - f_1*f_2*g_2*h_2*j*p_4*s_2*v^2*x - f_2*g_2*h_1*h_2*j*p_4*s_2*v^2*x - 4*e*f_1*f_2*h_2*p_3*p_4*s_2*v^2*x - 4*e*f_1*f_2*h_2*p_3^2*p_4*s_2*v*x - 2*e*f_1*f_2^2*h_2*p_3*p_4*s_2*v*x - 3*e*f_2*h_1*h_2*p_3*p_4*s_2*v^2*x - 2*e*f_2*h_1*h_2*p_3^2*p_4*s_2*v*x - 4*f_1*f_2*g_2*h_2*p_3*p_4*s_2*v^2*x - 5*f_1*f_2*g_2*h_2*p_3^2*p_4*s_2*v*x - 3*f_1*f_2^2*g_2*h_2*p_3*p_4*s_2*v*x - 2*e*f_2*h_1*j*p_3*p_4*s_1*v^2*x - 2*e*f_2*h_1*j*p_3^2*p_4*s_1*v*x - e*f_1*h_2*j*p_3*p_4*s_2*v^2*x - e*f_1*h_2*j*p_3^2*p_4*s_2*v*x - 2*e*f_2*h_2*j*p_3*p_4^2*s_2*v*x - 4*f_2*g_2*h_1*h_2*p_3*p_4*s_2*v^2*x - 5*f_2*g_2*h_1*h_2*p_3^2*p_4*s_2*v*x - 3*f_2^2*g_2*h_1*h_2*p_3*p_4*s_2*v*x - e*f_1*h_1*h_2*p_3*s_1*s_2*v^3*x - 2*e*f_1*h_1*h_2*p_3^3*s_1*s_2*v*x - 3*f_2*g_2*h_2*j*p_3*p_4^2*s_2*v*x - e*f_1*f_2*g_1*h_2^2*j*p_3*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*j*p_3*s_2^2*x - e*f_1*f_2*h_1*h_2^2*j*s_2^2*v*x - e*f_2*g_1*h_2^2*j*p_3*p_4*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*j*s_2^2*v*x - f_1*f_2*g_2*h_2^2*j*p_3*p_4*s_2^2*x + 2*e*f_1*f_2*g_2*h_1*p_3^2*s_1*v^2*x + e*f_1*f_2^2*g_2*h_1*p_3*s_1*v^2*x + e*f_1*f_2^2*g_2*h_1*p_3^2*s_1*v*x + e*f_1*f_2^2*g_2*h_2*p_4*s_2*v^2*x - f_2*g_2*h_1*h_2^2*j*p_3*p_4*s_2^2*x - e*f_1*f_2*h_2^2*j*p_4*s_2^2*v*x - 2*f_1*f_2*g_2*h_1*h_2^2*p_3*s_2^2*v*x + e*f_2*g_2*h_2*j*p_4^2*s_2*v^2*x - e*f_1*f_2^2*h_1*h_2*s_1*s_2*v^2*x - e*f_2*h_1*h_2^2*j*p_4*s_2^2*v*x - f_1*f_2*g_2*h_2^2*j*p_4*s_2^2*v*x - f_2*g_2*h_1*h_2^2*j*p_4*s_2^2*v*x - 2*e*f_1*f_2*h_2^2*p_3*p_4*s_2^2*v*x + e*f_2^2*g_2*h_1*p_3*p_4*s_1*v^2*x + e*f_2^2*g_2*h_1*p_3^2*p_4*s_1*v*x + 4*e*f_2*g_2*h_2*p_3*p_4^2*s_2*v^2*x + 
                                                                                        4*e*f_2*g_2*h_2*p_3^2*p_4^2*s_2*v*x + 2*e*f_2^2*g_2*h_2*p_3*p_4^2*s_2*v*x - e*f_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 2*f_1*f_2*g_2*h_2^2*p_3*p_4*s_2^2*v*x - 2*f_2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 3*e*f_1*h_1*h_2*p_3^2*s_1*s_2*v^2*x - e*f_2^2*h_1*h_2*p_4*s_1*s_2*v^2*x - e*f_1*f_2*h_1*h_2*j*s_1*s_2*v^2*x + 4*e*f_1*f_2*g_2*h_2*p_3*p_4*s_2*v^2*x + 4*e*f_1*f_2*g_2*h_2*p_3^2*p_4*s_2*v*x + 2*e*f_1*f_2^2*g_2*h_2*p_3*p_4*s_2*v*x + 4*e*f_2*g_2*h_1*h_2*p_3*p_4*s_2*v^2*x + 4*e*f_2*g_2*h_1*h_2*p_3^2*p_4*s_2*v*x + e*f_2*g_2*h_1*j*p_3*p_4*s_1*v^2*x + e*f_2*g_2*h_1*j*p_3^2*p_4*s_1*v*x + 2*e*f_2*g_2*h_2*j*p_3*p_4^2*s_2*v*x - 4*e*f_1*f_2*h_1*h_2*p_3*s_1*s_2*v^2*x - 4*e*f_1*f_2*h_1*h_2*p_3^2*s_1*s_2*v*x - 2*e*f_1*f_2^2*h_1*h_2*p_3*s_1*s_2*v*x - 2*e*f_1*h_1*h_2*j*p_3*s_1*s_2*v^2*x - 2*e*f_1*h_1*h_2*j*p_3^2*s_1*s_2*v*x - e*f_2*h_1*h_2*j*p_4*s_1*s_2*v^2*x - e*f_2*h_1*h_2*p_3*p_4*s_1*s_2*v^2*x - 2*e*f_2*h_1*h_2*p_3^2*p_4*s_1*s_2*v*x - 2*e*f_2^2*h_1*h_2*p_3*p_4*s_1*s_2*v*x - e*h_1*h_2*j*p_3*p_4*s_1*s_2*v^2*x - e*h_1*h_2*j*p_3^2*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*j*s_2^2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*p_3*s_2^2*v*x + e*f_1*f_2*g_2*h_2^2*j*p_4*s_2^2*v*x + e*f_1*f_2^2*g_2*h_1*h_2*s_1*s_2*v^2*x + e*f_2*g_2*h_1*h_2^2*j*p_4*s_2^2*v*x + 2*e*f_1*f_2*g_2*h_2^2*p_3*p_4*s_2^2*v*x + 2*e*f_2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 2*e*f_1*f_2*h_1*h_2^2*p_3*s_1*s_2^2*v*x + e*f_2^2*g_2*h_1*h_2*p_4*s_1*s_2*v^2*x - e*f_2*h_1*h_2^2*p_3*p_4*s_1*s_2^2*v*x - 3*f_1*f_2*g_2*h_1*h_2*j*p_3*s_2*v*x - 2*e*f_1*f_2*h_2*j*p_3*p_4*s_2*v*x - 3*f_1*f_2*g_2*h_2*j*p_3*p_4*s_2*v*x - 3*f_2*g_2*h_1*h_2*j*p_3*p_4*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*s_1*s_2^2*v^2*x + e*f_1*f_2^2*g_2*h_1*h_2^2*s_1*s_2^2*v*x + e*f_2^2*g_2*h_1*h_2^2*p_4*s_1*s_2^2*v*x + 
                                                                                        e*f_1*f_2*g_2*h_1*h_2*p_3*s_2*v^2*x + 2*e*f_1*f_2*g_2*h_1*h_2*p_3^2*s_2*v*x + e*f_1*f_2*g_2*h_1*j*p_3*s_1*v^2*x + e*f_1*f_2*g_2*h_1*j*p_3^2*s_1*v*x + e*f_1*f_2*g_2*h_2*j*p_4*s_2*v^2*x + e*f_1*f_2*g_2*h_1*h_2*s_1*s_2*v^3*x + e*f_1*f_2*g_2*h_1*h_2*j*p_3*s_2*v*x + 2*e*f_1*f_2*g_2*h_2*j*p_3*p_4*s_2*v*x + e*f_2*g_2*h_1*h_2*j*p_3*p_4*s_2*v*x - 2*e*f_1*f_2*h_1*h_2*j*p_3*s_1*s_2*v*x - 2*e*f_2*h_1*h_2*j*p_3*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2*j*s_1*s_2*v^2*x + 3*e*f_1*f_2*g_2*h_1*h_2*p_3*s_1*s_2*v^2*x + 2*e*f_1*f_2*g_2*h_1*h_2*p_3^2*s_1*s_2*v*x + 2*e*f_1*f_2^2*g_2*h_1*h_2*p_3*s_1*s_2*v*x + e*f_2*g_2*h_1*h_2*j*p_4*s_1*s_2*v^2*x + 2*e*f_2^2*g_2*h_1*h_2*p_3*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*p_3*s_1*s_2^2*v*x + e*f_1*f_2*g_2*h_1*h_2*j*p_3*s_1*s_2*v*x + e*f_2*g_2*h_1*h_2*j*p_3*p_4*s_1*s_2*v*x))/(p_2*p_3*(p_3 + h_2*s_2)*(a + p_1)*(f_1 + p_4)*(h_1 + p_4)*(p_3 + v)*(p_3 + v + h_2*s_2)*(f_2 + j + p_3)*(f_2 + j + p_3 + v)) })


#Plot
custom_levels <- seq(0.4, 0.6, by = 0.05)
custom_red_palette_1 <- colorRampPalette(c("#DFDFDF", "#CFCFCF","#BFBFBF", "#AFAFAF"))

# Create filled contour plot
filled.contour(j_range, sigma_2_range, Contour_1,
               color.palette = custom_red_palette_1,
  plot.title = title(main = "Treatment on asymptomatic carriers and R0",
                      xlab = "Treatment rate of asymptomatic carriers (j)",
                      ylab = "Fraction of cured patients after treatment (Ï2)"),
               levels = custom_levels,
               plot.axes = {
                 axis(1, at = j_range)
                 axis(2, at = sigma_2_range)
                 # Add contour lines with labels
                 contour(j_range, sigma_2_range, Contour_1,
                         levels = custom_levels,
                         add = TRUE,
                         labcex = 0.8)})




# Contour plot for contact precaution on asymptomatic carriers

f_2_range <- seq(0, 0.5, by = 0.1).      # Changes rate of contact precautions implementation
gamma_2_rango <- seq(0.5, 1, by = 0.1)   # Changes in effectivness of contact precautions


# Create the matrix using outer
Contour_2 <- outer (f_2_range, gamma_2_rango, FUN = function(f_2, g_2) { (d*l*(a + p_1*z)*(p_3^5*p_4^2*x + f_2^2*p_3^3*p_4^2*x + j^2*p_3^3*p_4^2*x + p_3^2*p_4^2*v^3*x + 3*p_3^3*p_4^2*v^2*x + e*f_1*p_3^5*v + e*h_1*p_3^5*v + f_1*h_1*p_3^5*x + e*p_3^5*p_4*v + f_1*p_3^5*p_4*x + h_1*p_3^5*p_4*x + e*f_1*p_3^3*v^3 + 2*e*f_1*p_3^4*v^2 + e*h_1*p_3^3*v^3 + 2*e*h_1*p_3^4*v^2 + e*p_3^3*p_4*v^3 + 2*e*p_3^4*p_4*v^2 + 2*f_2*p_3^4*p_4^2*x + 2*j*p_3^4*p_4^2*x + 3*p_3^4*p_4^2*v*x + h_2^2*p_3^3*p_4^2*s_2^2*x + e*f_1*f_2*p_3^2*v^3 + 3*e*f_1*f_2*p_3^3*v^2 + e*f_1*f_2^2*p_3^3*v - e*f_1*g_1*p_3^3*v^3 - 2*e*f_1*g_1*p_3^4*v^2 + e*f_2*h_1*p_3^2*v^3 + 2*e*f_2*h_1*p_3^3*v^2 + e*f_1*j*p_3^2*v^3 + 3*e*f_1*j*p_3^3*v^2 + e*f_1*j^2*p_3^3*v + f_1*f_2^2*h_1*p_3^3*x + e*h_1*j*p_3^2*v^3 + 2*e*h_1*j*p_3^3*v^2 + f_1*h_1*j^2*p_3^3*x + e*f_2*p_3^2*p_4*v^3 + 3*e*f_2*p_3^3*p_4*v^2 + e*f_2^2*p_3^3*p_4*v + f_1*f_2^2*p_3^3*p_4*x + e*j*p_3^2*p_4*v^3 + 3*e*j*p_3^3*p_4*v^2 + e*j^2*p_3^3*p_4*v - f_2*g_2*p_3^4*p_4^2*x + f_2^2*h_1*p_3^3*p_4*x + f_1*j^2*p_3^3*p_4*x + 2*f_2*j*p_3^3*p_4^2*x + h_1*j^2*p_3^3*p_4*x + f_1*h_1*p_3^2*v^3*x + 3*f_1*h_1*p_3^3*v^2*x - e*p_3^4*p_4^2*v*x + 2*h_2*p_3^4*p_4^2*s_2*x + f_1*p_3^2*p_4*v^3*x + 3*f_1*p_3^3*p_4*v^2*x + f_2*p_3*p_4^2*v^3*x + 5*f_2*p_3^3*p_4^2*v*x + h_1*p_3^2*p_4*v^3*x + 3*h_1*p_3^3*p_4*v^2*x + j*p_3*p_4^2*v^3*x + 5*j*p_3^3*p_4^2*v*x + e*f_1*f_2^2*p_3^2*v^2 + e*f_1*j^2*p_3^2*v^2 + e*f_2^2*p_3^2*p_4*v^2 + e*j^2*p_3^2*p_4*v^2 - f_2^2*g_2*p_3^3*p_4^2*x - e*p_3^2*p_4^2*v^3*x - 2*e*p_3^3*p_4^2*v^2*x + 4*f_2*p_3^2*p_4^2*v^2*x + f_2^2*p_3*p_4^2*v^2*x + 2*f_2^2*p_3^2*p_4^2*v*x + 4*j*p_3^2*p_4^2*v^2*x + j^2*p_3*p_4^2*v^2*x + 2*j^2*p_3^2*p_4^2*v*x + 2*e*f_1*f_2*p_3^4*v - e*f_1*g_1*p_3^5*v + e*f_2*h_1*p_3^4*v + 2*e*f_1*j*p_3^4*v + 2*f_1*f_2*h_1*p_3^4*x + e*h_1*j*p_3^4*v + 2*f_1*h_1*j*p_3^4*x + 
                                                                                             2*e*f_2*p_3^4*p_4*v + 2*f_1*f_2*p_3^4*p_4*x + 2*e*j*p_3^4*p_4*v + 2*f_2*h_1*p_3^4*p_4*x + 2*f_1*j*p_3^4*p_4*x + 2*h_1*j*p_3^4*p_4*x + 3*f_1*h_1*p_3^4*v*x + 3*f_1*p_3^4*p_4*v*x + 3*h_1*p_3^4*p_4*v*x - e*f_1*g_1*j^2*p_3^2*v^2 - e*f_2^2*g_1*p_3^2*p_4*v^2 - e*g_1*j^2*p_3^2*p_4*v^2 + e*f_1*h_2^2*p_3^3*s_2^2*v + e*h_1*h_2^2*p_3^3*s_2^2*v + f_1*h_1*h_2^2*p_3^3*s_2^2*x + e*h_2^2*p_3^3*p_4*s_2^2*v - 3*e*f_2*p_3^2*p_4^2*v^2*x - e*f_2^2*p_3*p_4^2*v^2*x - e*f_2^2*p_3^2*p_4^2*v*x + f_1*h_2^2*p_3^3*p_4*s_2^2*x + 2*f_2^2*h_2*p_3^2*p_4^2*s_2*x - 3*f_2*g_2*p_3^2*p_4^2*v^2*x - f_2^2*g_2*p_3*p_4^2*v^2*x - 2*f_2^2*g_2*p_3^2*p_4^2*v*x + h_1*h_2^2*p_3^3*p_4*s_2^2*x - 3*e*j*p_3^2*p_4^2*v^2*x - e*j^2*p_3*p_4^2*v^2*x - e*j^2*p_3^2*p_4^2*v*x + h_2*j^2*p_3^2*p_4^2*s_2*x + f_2^2*h_2*p_4^2*s_2*v^2*x + 4*h_2*p_3^2*p_4^2*s_2*v^2*x - 2*e*f_1*f_2*g_1*p_3^4*v + 2*e*f_1*f_2*j*p_3^3*v - 2*e*f_1*g_1*j*p_3^4*v - f_1*f_2*g_2*h_1*p_3^4*x + 2*f_1*f_2*h_1*j*p_3^3*x - e*f_2*g_1*p_3^4*p_4*v + 2*e*f_2*j*p_3^3*p_4*v - f_1*f_2*g_2*p_3^4*p_4*x - e*g_1*j*p_3^4*p_4*v + 2*e*f_1*h_2*p_3^4*s_2*v - f_2*g_2*h_1*p_3^4*p_4*x + 2*e*h_1*h_2*p_3^4*s_2*v + 2*f_1*f_2*j*p_3^3*p_4*x + 2*f_2*h_1*j*p_3^3*p_4*x + 2*f_1*h_1*h_2*p_3^4*s_2*x + f_1*f_2*h_1*p_3*v^3*x + 5*f_1*f_2*h_1*p_3^3*v*x + f_1*h_1*j*p_3*v^3*x + 5*f_1*h_1*j*p_3^3*v*x + 2*e*h_2*p_3^4*p_4*s_2*v - e*f_1*p_3^4*p_4*v*x + 2*f_1*h_2*p_3^4*p_4*s_2*x + f_1*f_2*p_3*p_4*v^3*x + 5*f_1*f_2*p_3^3*p_4*v*x - e*h_1*p_3^4*p_4*v*x + 2*h_1*h_2*p_3^4*p_4*s_2*x + f_2*h_1*p_3*p_4*v^3*x + 5*f_2*h_1*p_3^3*p_4*v*x + f_1*j*p_3*p_4*v^3*x + 5*f_1*j*p_3^3*p_4*v*x + h_1*j*p_3*p_4*v^3*x + 5*h_1*j*p_3^3*p_4*v*x + e*f_1*h_2^2*p_3^2*s_2^2*v^2 + e*h_1*h_2^2*p_3^2*s_2^2*v^2 + e*h_2^2*p_3^2*p_4*s_2^2*v^2 + 
                                                                                             2*f_2*h_2^2*p_3^2*p_4^2*s_2^2*x + f_2^2*h_2^2*p_3*p_4^2*s_2^2*x + h_2^2*j*p_3^2*p_4^2*s_2^2*x + f_2*h_2^2*p_4^2*s_2^2*v^2*x + f_2^2*h_2^2*p_4^2*s_2^2*v*x + h_2^2*p_3*p_4^2*s_2^2*v^2*x + 2*h_2^2*p_3^2*p_4^2*s_2^2*v*x - e*f_1*f_2*g_1*p_3^2*v^3 - 3*e*f_1*f_2*g_1*p_3^3*v^2 - e*f_1*f_2^2*g_1*p_3^3*v + 2*e*f_1*f_2*j*p_3^2*v^2 - e*f_1*g_1*j*p_3^2*v^3 - 3*e*f_1*g_1*j*p_3^3*v^2 - e*f_1*g_1*j^2*p_3^3*v - f_1*f_2^2*g_2*h_1*p_3^3*x - e*f_2*g_1*p_3^3*p_4*v^2 - e*f_2^2*g_1*p_3^3*p_4*v + 2*e*f_2*j*p_3^2*p_4*v^2 - f_1*f_2^2*g_2*p_3^3*p_4*x - e*g_1*j*p_3^3*p_4*v^2 - e*g_1*j^2*p_3^3*p_4*v + e*f_1*h_2*p_3^2*s_2*v^3 + 3*e*f_1*h_2*p_3^3*s_2*v^2 - f_2^2*g_2*h_1*p_3^3*p_4*x + e*h_1*h_2*p_3^2*s_2*v^3 + 3*e*h_1*h_2*p_3^3*s_2*v^2 - f_2*g_2*j*p_3^3*p_4^2*x + 4*f_1*f_2*h_1*p_3^2*v^2*x + f_1*f_2^2*h_1*p_3*v^2*x + 2*f_1*f_2^2*h_1*p_3^2*v*x + 4*f_1*h_1*j*p_3^2*v^2*x + f_1*h_1*j^2*p_3*v^2*x + 2*f_1*h_1*j^2*p_3^2*v*x + e*h_2*p_3^2*p_4*s_2*v^3 + 3*e*h_2*p_3^3*p_4*s_2*v^2 - e*f_1*p_3^2*p_4*v^3*x - 2*e*f_1*p_3^3*p_4*v^2*x - e*f_2*p_3*p_4^2*v^3*x - 2*e*f_2*p_3^3*p_4^2*v*x + 4*f_2*h_2*p_3^3*p_4^2*s_2*x + 4*f_1*f_2*p_3^2*p_4*v^2*x + f_1*f_2^2*p_3*p_4*v^2*x + 2*f_1*f_2^2*p_3^2*p_4*v*x - e*h_1*p_3^2*p_4*v^3*x - 2*e*h_1*p_3^3*p_4*v^2*x - f_2*g_2*p_3*p_4^2*v^3*x - 3*f_2*g_2*p_3^3*p_4^2*v*x + 4*f_2*h_1*p_3^2*p_4*v^2*x + f_2^2*h_1*p_3*p_4*v^2*x + 2*f_2^2*h_1*p_3^2*p_4*v*x - e*j*p_3*p_4^2*v^3*x - 2*e*j*p_3^3*p_4^2*v*x + 3*h_2*j*p_3^3*p_4^2*s_2*x + 4*f_1*j*p_3^2*p_4*v^2*x + f_1*j^2*p_3*p_4*v^2*x + 2*f_1*j^2*p_3^2*p_4*v*x + 2*f_2*j*p_3*p_4^2*v^2*x + 4*f_2*j*p_3^2*p_4^2*v*x + f_2*h_2*p_4^2*s_2*v^3*x + 4*h_1*j*p_3^2*p_4*v^2*x + h_1*j^2*p_3*p_4*v^2*x + 2*h_1*j^2*p_3^2*p_4*v*x + h_2*p_3*p_4^2*s_2*v^3*x + 5*h_2*p_3^3*p_4^2*s_2*v*x - 
                                                                                             e*f_1*f_2^2*g_1*p_3^2*v^2 - 2*e*f_1*f_2*g_1*j*p_3^2*v^2 - 2*e*f_2*g_1*j*p_3^2*p_4*v^2 + 4*e*f_1*f_2*h_2*p_3^2*s_2*v^2 + e*f_1*f_2^2*h_2*p_3*s_2*v^2 + 2*e*f_1*f_2^2*h_2*p_3^2*s_2*v - e*f_1*g_1*h_2*p_3^2*s_2*v^3 - 3*e*f_1*g_1*h_2*p_3^3*s_2*v^2 + 3*e*f_2*h_1*h_2*p_3^2*s_2*v^2 + 4*e*f_1*h_2*j*p_3^2*s_2*v^2 + e*f_1*h_2*j^2*p_3*s_2*v^2 + e*f_1*h_2*j^2*p_3^2*s_2*v + 2*f_1*f_2^2*h_1*h_2*p_3^2*s_2*x + 3*e*h_1*h_2*j*p_3^2*s_2*v^2 - 3*f_1*f_2*g_2*h_1*p_3^2*v^2*x - f_1*f_2^2*g_2*h_1*p_3*v^2*x - 2*f_1*f_2^2*g_2*h_1*p_3^2*v*x + f_1*h_1*h_2*j^2*p_3^2*s_2*x + 4*e*f_2*h_2*p_3^2*p_4*s_2*v^2 + e*f_2^2*h_2*p_3*p_4*s_2*v^2 + 2*e*f_2^2*h_2*p_3^2*p_4*s_2*v + f_1*f_2^2*h_1*h_2*s_2*v^2*x - 3*e*f_1*f_2*p_3^2*p_4*v^2*x - e*f_1*f_2^2*p_3*p_4*v^2*x - e*f_1*f_2^2*p_3^2*p_4*v*x + 2*f_1*f_2^2*h_2*p_3^2*p_4*s_2*x + 4*e*h_2*j*p_3^2*p_4*s_2*v^2 + e*h_2*j^2*p_3*p_4*s_2*v^2 + e*h_2*j^2*p_3^2*p_4*s_2*v + e*f_2*g_2*p_3*p_4^2*v^3*x + 2*e*f_2*g_2*p_3^3*p_4^2*v*x - 2*f_2*g_2*h_2*p_3^3*p_4^2*s_2*x - 2*e*f_2*h_1*p_3^2*p_4*v^2*x - 3*f_1*f_2*g_2*p_3^2*p_4*v^2*x - f_1*f_2^2*g_2*p_3*p_4*v^2*x - 2*f_1*f_2^2*g_2*p_3^2*p_4*v*x + 2*f_2^2*h_1*h_2*p_3^2*p_4*s_2*x - 3*e*f_1*j*p_3^2*p_4*v^2*x - e*f_1*j^2*p_3*p_4*v^2*x - e*f_1*j^2*p_3^2*p_4*v*x - 2*e*f_2*j*p_3*p_4^2*v^2*x - 2*e*f_2*j*p_3^2*p_4^2*v*x + f_1*h_2*j^2*p_3^2*p_4*s_2*x - 3*f_2*g_2*h_1*p_3^2*p_4*v^2*x - f_2^2*g_2*h_1*p_3*p_4*v^2*x - 2*f_2^2*g_2*h_1*p_3^2*p_4*v*x + 3*f_2*h_2*j*p_3^2*p_4^2*s_2*x - e*f_1*h_1*p_3^2*s_1*v^3*x - 2*e*f_1*h_1*p_3^3*s_1*v^2*x - e*f_2*h_2*p_4^2*s_2*v^3*x - 2*e*h_1*j*p_3^2*p_4*v^2*x - f_2*g_2*j*p_3*p_4^2*v^2*x - 2*f_2*g_2*j*p_3^2*p_4^2*v*x + f_1*f_2^2*h_2*p_4*s_2*v^2*x + h_1*h_2*j^2*p_3^2*p_4*s_2*x - f_2*g_2*h_2*p_4^2*s_2*v^3*x + 4*f_1*h_1*h_2*p_3^2*s_2*v^2*x + 
                                                                                             f_2^2*h_1*h_2*p_4*s_2*v^2*x + f_2*h_2*j*p_4^2*s_2*v^2*x - e*h_2*p_3*p_4^2*s_2*v^3*x - 2*e*h_2*p_3^3*p_4^2*s_2*v*x + 4*f_1*h_2*p_3^2*p_4*s_2*v^2*x + 5*f_2*h_2*p_3*p_4^2*s_2*v^2*x + 8*f_2*h_2*p_3^2*p_4^2*s_2*v*x + 3*f_2^2*h_2*p_3*p_4^2*s_2*v*x + 4*h_1*h_2*p_3^2*p_4*s_2*v^2*x + 2*h_2*j*p_3*p_4^2*s_2*v^2*x + 5*h_2*j*p_3^2*p_4^2*s_2*v*x + h_2*j^2*p_3*p_4^2*s_2*v*x + e*f_1*f_2*h_2^2*p_3*s_2^2*v^2 + 2*e*f_1*f_2*h_2^2*p_3^2*s_2^2*v + e*f_1*f_2^2*h_2^2*p_3*s_2^2*v - e*f_1*g_1*h_2^2*p_3^3*s_2^2*v + e*f_2*h_1*h_2^2*p_3*s_2^2*v^2 + e*f_2*h_1*h_2^2*p_3^2*s_2^2*v + e*f_1*h_2^2*j*p_3*s_2^2*v^2 + e*f_1*h_2^2*j*p_3^2*s_2^2*v + 2*f_1*f_2*h_1*h_2^2*p_3^2*s_2^2*x + f_1*f_2^2*h_1*h_2^2*p_3*s_2^2*x + e*h_1*h_2^2*j*p_3*s_2^2*v^2 + e*h_1*h_2^2*j*p_3^2*s_2^2*v + f_1*h_1*h_2^2*j*p_3^2*s_2^2*x + e*f_2*h_2^2*p_3*p_4*s_2^2*v^2 + 2*e*f_2*h_2^2*p_3^2*p_4*s_2^2*v + e*f_2^2*h_2^2*p_3*p_4*s_2^2*v + f_1*f_2*h_1*h_2^2*s_2^2*v^2*x + f_1*f_2^2*h_1*h_2^2*s_2^2*v*x + 2*f_1*f_2*h_2^2*p_3^2*p_4*s_2^2*x + f_1*f_2^2*h_2^2*p_3*p_4*s_2^2*x + 3*e*f_2*g_2*p_3^2*p_4^2*v^2*x + e*f_2^2*g_2*p_3*p_4^2*v^2*x + e*f_2^2*g_2*p_3^2*p_4^2*v*x + e*h_2^2*j*p_3*p_4*s_2^2*v^2 + e*h_2^2*j*p_3^2*p_4*s_2^2*v - 2*f_2^2*g_2*h_2*p_3^2*p_4^2*s_2*x + 2*f_2*h_1*h_2^2*p_3^2*p_4*s_2^2*x + f_2^2*h_1*h_2^2*p_3*p_4*s_2^2*x + f_1*h_2^2*j*p_3^2*p_4*s_2^2*x + f_2*h_2^2*j*p_3*p_4^2*s_2^2*x - e*f_2^2*h_2*p_4^2*s_2*v^2*x + f_1*f_2*h_2^2*p_4*s_2^2*v^2*x + f_1*f_2^2*h_2^2*p_4*s_2^2*v*x + h_1*h_2^2*j*p_3^2*p_4*s_2^2*x - f_2^2*g_2*h_2*p_4^2*s_2*v^2*x + f_1*h_1*h_2^2*p_3*s_2^2*v^2*x + 2*f_1*h_1*h_2^2*p_3^2*s_2^2*v*x + f_2*h_1*h_2^2*p_4*s_2^2*v^2*x + f_2^2*h_1*h_2^2*p_4*s_2^2*v*x + f_2*h_2^2*j*p_4^2*s_2^2*v*x - 3*e*h_2*p_3^2*p_4^2*s_2*v^2*x + f_1*h_2^2*p_3*p_4*s_2^2*v^2*x + 
                                                                                             2*f_1*h_2^2*p_3^2*p_4*s_2^2*v*x + 3*f_2*h_2^2*p_3*p_4^2*s_2^2*v*x + h_1*h_2^2*p_3*p_4*s_2^2*v^2*x + 2*h_1*h_2^2*p_3^2*p_4*s_2^2*v*x + h_2^2*j*p_3*p_4^2*s_2^2*v*x - 2*e*f_1*f_2*g_1*j*p_3^3*v - f_1*f_2*g_2*h_1*j*p_3^3*x - 2*e*f_2*g_1*j*p_3^3*p_4*v + e*f_1*f_2*h_2*p_3*s_2*v^3 + 4*e*f_1*f_2*h_2*p_3^3*s_2*v - 2*e*f_1*g_1*h_2*p_3^4*s_2*v + e*f_2*h_1*h_2*p_3*s_2*v^3 + 2*e*f_2*h_1*h_2*p_3^3*s_2*v - f_1*f_2*g_2*j*p_3^3*p_4*x + e*f_1*h_2*j*p_3*s_2*v^3 + 3*e*f_1*h_2*j*p_3^3*s_2*v - f_2*g_2*h_1*j*p_3^3*p_4*x + 4*f_1*f_2*h_1*h_2*p_3^3*s_2*x + e*h_1*h_2*j*p_3*s_2*v^3 + 2*e*h_1*h_2*j*p_3^3*s_2*v - f_1*f_2*g_2*h_1*p_3*v^3*x - 3*f_1*f_2*g_2*h_1*p_3^3*v*x + 3*f_1*h_1*h_2*j*p_3^3*s_2*x + 2*f_1*f_2*h_1*j*p_3*v^2*x + 4*f_1*f_2*h_1*j*p_3^2*v*x + e*f_2*h_2*p_3*p_4*s_2*v^3 + 4*e*f_2*h_2*p_3^3*p_4*s_2*v + f_1*f_2*h_1*h_2*s_2*v^3*x - e*f_1*f_2*p_3*p_4*v^3*x - 2*e*f_1*f_2*p_3^3*p_4*v*x + 4*f_1*f_2*h_2*p_3^3*p_4*s_2*x + e*h_2*j*p_3*p_4*s_2*v^3 + 3*e*h_2*j*p_3^3*p_4*s_2*v - e*f_2*h_1*p_3*p_4*v^3*x - e*f_2*h_1*p_3^3*p_4*v*x - f_1*f_2*g_2*p_3*p_4*v^3*x - 3*f_1*f_2*g_2*p_3^3*p_4*v*x + 4*f_2*h_1*h_2*p_3^3*p_4*s_2*x - e*f_1*j*p_3*p_4*v^3*x - 2*e*f_1*j*p_3^3*p_4*v*x + 3*f_1*h_2*j*p_3^3*p_4*s_2*x - f_2*g_2*h_1*p_3*p_4*v^3*x - 3*f_2*g_2*h_1*p_3^3*p_4*v*x - e*f_1*h_1*p_3^4*s_1*v*x + 2*f_1*f_2*j*p_3*p_4*v^2*x + 4*f_1*f_2*j*p_3^2*p_4*v*x - e*h_1*j*p_3*p_4*v^3*x - e*h_1*j*p_3^3*p_4*v*x + f_1*f_2*h_2*p_4*s_2*v^3*x + 3*h_1*h_2*j*p_3^3*p_4*s_2*x + 2*f_2*h_1*j*p_3*p_4*v^2*x + 4*f_2*h_1*j*p_3^2*p_4*v*x + f_1*h_1*h_2*p_3*s_2*v^3*x + 5*f_1*h_1*h_2*p_3^3*s_2*v*x + f_2*h_1*h_2*p_4*s_2*v^3*x + f_1*h_2*p_3*p_4*s_2*v^3*x + 5*f_1*h_2*p_3^3*p_4*s_2*v*x + h_1*h_2*p_3*p_4*s_2*v^3*x + 5*h_1*h_2*p_3^3*p_4*s_2*v*x - e*f_1*g_1*h_2^2*p_3^2*s_2^2*v^2 - 
                                                                                             f_2*g_2*h_2^2*p_3^2*p_4^2*s_2^2*x - f_2^2*g_2*h_2^2*p_3*p_4^2*s_2^2*x - e*f_2*h_2^2*p_4^2*s_2^2*v^2*x - e*f_2^2*h_2^2*p_4^2*s_2^2*v*x - f_2*g_2*h_2^2*p_4^2*s_2^2*v^2*x - f_2^2*g_2*h_2^2*p_4^2*s_2^2*v*x - e*h_2^2*p_3*p_4^2*s_2^2*v^2*x - e*h_2^2*p_3^2*p_4^2*s_2^2*v*x - e*f_1*f_2*g_1*h_2*p_3*s_2*v^3 - 4*e*f_1*f_2*g_1*h_2*p_3^3*s_2*v + 2*e*f_1*f_2*h_2*j*p_3*s_2*v^2 + 3*e*f_1*f_2*h_2*j*p_3^2*s_2*v - e*f_1*g_1*h_2*j*p_3*s_2*v^3 - 3*e*f_1*g_1*h_2*j*p_3^3*s_2*v + e*f_1*f_2*g_2*h_1*p_3^3*v*x - 2*f_1*f_2*g_2*h_1*h_2*p_3^3*s_2*x + 3*f_1*f_2*h_1*h_2*j*p_3^2*s_2*x - f_1*f_2*g_2*h_1*j*p_3*v^2*x - 2*f_1*f_2*g_2*h_1*j*p_3^2*v*x - 2*e*f_2*g_1*h_2*p_3^3*p_4*s_2*v - f_1*f_2*g_2*h_1*h_2*s_2*v^3*x + e*f_1*f_2*g_2*p_3*p_4*v^3*x + 2*e*f_1*f_2*g_2*p_3^3*p_4*v*x + 2*e*f_2*h_2*j*p_3*p_4*s_2*v^2 + 3*e*f_2*h_2*j*p_3^2*p_4*s_2*v - 2*f_1*f_2*g_2*h_2*p_3^3*p_4*s_2*x + f_1*f_2*h_1*h_2*j*s_2*v^2*x - e*g_1*h_2*j*p_3^3*p_4*s_2*v + e*f_2*g_2*h_1*p_3*p_4*v^3*x + 2*e*f_2*g_2*h_1*p_3^3*p_4*v*x - 2*e*f_1*f_2*j*p_3*p_4*v^2*x - 2*e*f_1*f_2*j*p_3^2*p_4*v*x - 2*f_2*g_2*h_1*h_2*p_3^3*p_4*s_2*x + 3*f_1*f_2*h_2*j*p_3^2*p_4*s_2*x - e*f_1*f_2*h_1*p_3*s_1*v^3*x - 2*e*f_1*f_2*h_1*p_3^3*s_1*v*x - e*f_1*f_2*h_2*p_4*s_2*v^3*x - f_1*f_2*g_2*j*p_3*p_4*v^2*x - 2*f_1*f_2*g_2*j*p_3^2*p_4*v*x + 3*f_2*h_1*h_2*j*p_3^2*p_4*s_2*x - e*f_2*h_1*h_2*p_4*s_2*v^3*x - f_1*f_2*g_2*h_2*p_4*s_2*v^3*x - f_2*g_2*h_1*j*p_3*p_4*v^2*x - 2*f_2*g_2*h_1*j*p_3^2*p_4*v*x + 5*f_1*f_2*h_1*h_2*p_3*s_2*v^2*x + 8*f_1*f_2*h_1*h_2*p_3^2*s_2*v*x + 3*f_1*f_2^2*h_1*h_2*p_3*s_2*v*x - e*f_1*h_1*j*p_3*s_1*v^3*x - 2*e*f_1*h_1*j*p_3^3*s_1*v*x - f_2*g_2*h_1*h_2*p_4*s_2*v^3*x + f_1*f_2*h_2*j*p_4*s_2*v^2*x + 2*f_1*h_1*h_2*j*p_3*s_2*v^2*x + 5*f_1*h_1*h_2*j*p_3^2*s_2*v*x + 
                                                                                             f_1*h_1*h_2*j^2*p_3*s_2*v*x + f_2*h_1*h_2*j*p_4*s_2*v^2*x - e*f_2*h_1*p_3^3*p_4*s_1*v*x - e*f_1*h_2*p_3*p_4*s_2*v^3*x - 2*e*f_1*h_2*p_3^3*p_4*s_2*v*x + 5*f_1*f_2*h_2*p_3*p_4*s_2*v^2*x + 8*f_1*f_2*h_2*p_3^2*p_4*s_2*v*x + 3*f_1*f_2^2*h_2*p_3*p_4*s_2*v*x - e*h_1*h_2*p_3*p_4*s_2*v^3*x - 2*e*h_1*h_2*p_3^3*p_4*s_2*v*x + 5*f_2*h_1*h_2*p_3*p_4*s_2*v^2*x + 8*f_2*h_1*h_2*p_3^2*p_4*s_2*v*x + 3*f_2^2*h_1*h_2*p_3*p_4*s_2*v*x - e*h_1*j*p_3^3*p_4*s_1*v*x + 2*f_1*h_2*j*p_3*p_4*s_2*v^2*x + 5*f_1*h_2*j*p_3^2*p_4*s_2*v*x + f_1*h_2*j^2*p_3*p_4*s_2*v*x + 4*f_2*h_2*j*p_3*p_4^2*s_2*v*x + 2*h_1*h_2*j*p_3*p_4*s_2*v^2*x + 5*h_1*h_2*j*p_3^2*p_4*s_2*v*x + h_1*h_2*j^2*p_3*p_4*s_2*v*x + e*f_2*g_2*h_2^2*p_4^2*s_2^2*v^2*x + e*f_2^2*g_2*h_2^2*p_4^2*s_2^2*v*x - 4*e*f_1*f_2*g_1*h_2*p_3^2*s_2*v^2 - e*f_1*f_2^2*g_1*h_2*p_3*s_2*v^2 - 2*e*f_1*f_2^2*g_1*h_2*p_3^2*s_2*v + e*f_1*f_2*h_2^2*j*p_3*s_2^2*v - 4*e*f_1*g_1*h_2*j*p_3^2*s_2*v^2 - e*f_1*g_1*h_2*j^2*p_3*s_2*v^2 - e*f_1*g_1*h_2*j^2*p_3^2*s_2*v + e*f_1*f_2*g_2*h_1*p_3^2*v^2*x - 2*f_1*f_2^2*g_2*h_1*h_2*p_3^2*s_2*x + f_1*f_2*h_1*h_2^2*j*p_3*s_2^2*x - e*f_2*g_1*h_2*p_3^2*p_4*s_2*v^2 - e*f_2^2*g_1*h_2*p_3*p_4*s_2*v^2 - 2*e*f_2^2*g_1*h_2*p_3^2*p_4*s_2*v - f_1*f_2^2*g_2*h_1*h_2*s_2*v^2*x + 3*e*f_1*f_2*g_2*p_3^2*p_4*v^2*x + e*f_1*f_2^2*g_2*p_3*p_4*v^2*x + e*f_1*f_2^2*g_2*p_3^2*p_4*v*x + e*f_2*h_2^2*j*p_3*p_4*s_2^2*v - 2*f_1*f_2^2*g_2*h_2*p_3^2*p_4*s_2*x + f_1*f_2*h_1*h_2^2*j*s_2^2*v*x - e*g_1*h_2*j*p_3^2*p_4*s_2*v^2 - e*g_1*h_2*j^2*p_3*p_4*s_2*v^2 - e*g_1*h_2*j^2*p_3^2*p_4*s_2*v + 3*e*f_2*g_2*h_1*p_3^2*p_4*v^2*x - 2*f_2^2*g_2*h_1*h_2*p_3^2*p_4*s_2*x + f_1*f_2*h_2^2*j*p_3*p_4*s_2^2*x + e*f_2*g_2*j*p_3*p_4^2*v^2*x + e*f_2*g_2*j*p_3^2*p_4^2*v*x - 3*e*f_1*f_2*h_1*p_3^2*s_1*v^2*x - 
                                                                                             e*f_1*f_2^2*h_1*p_3*s_1*v^2*x - e*f_1*f_2^2*h_1*p_3^2*s_1*v*x - e*f_1*f_2^2*h_2*p_4*s_2*v^2*x - 2*f_2*g_2*h_2*j*p_3^2*p_4^2*s_2*x + e*f_2*g_2*h_2*p_4^2*s_2*v^3*x + f_2*h_1*h_2^2*j*p_3*p_4*s_2^2*x - f_1*f_2^2*g_2*h_2*p_4*s_2*v^2*x + 3*f_1*f_2*h_1*h_2^2*p_3*s_2^2*v*x - 3*e*f_1*h_1*j*p_3^2*s_1*v^2*x - e*f_1*h_1*j^2*p_3*s_1*v^2*x - e*f_1*h_1*j^2*p_3^2*s_1*v*x - e*f_2*h_2*j*p_4^2*s_2*v^2*x - f_2^2*g_2*h_1*h_2*p_4*s_2*v^2*x + f_1*f_2*h_2^2*j*p_4*s_2^2*v*x - f_2*g_2*h_2*j*p_4^2*s_2*v^2*x + f_1*h_1*h_2^2*j*p_3*s_2^2*v*x + f_2*h_1*h_2^2*j*p_4*s_2^2*v*x - e*f_2*h_1*p_3^2*p_4*s_1*v^2*x - e*f_2^2*h_1*p_3*p_4*s_1*v^2*x - e*f_2^2*h_1*p_3^2*p_4*s_1*v*x - 3*e*f_1*h_2*p_3^2*p_4*s_2*v^2*x - 4*e*f_2*h_2*p_3*p_4^2*s_2*v^2*x - 4*e*f_2*h_2*p_3^2*p_4^2*s_2*v*x - 2*e*f_2^2*h_2*p_3*p_4^2*s_2*v*x + 3*f_1*f_2*h_2^2*p_3*p_4*s_2^2*v*x - 3*e*h_1*h_2*p_3^2*p_4*s_2*v^2*x - 4*f_2*g_2*h_2*p_3*p_4^2*s_2*v^2*x - 5*f_2*g_2*h_2*p_3^2*p_4^2*s_2*v*x - 3*f_2^2*g_2*h_2*p_3*p_4^2*s_2*v*x + 3*f_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - e*h_1*j*p_3^2*p_4*s_1*v^2*x - e*h_1*j^2*p_3*p_4*s_1*v^2*x - e*h_1*j^2*p_3^2*p_4*s_1*v*x - e*h_2*j*p_3*p_4^2*s_2*v^2*x - e*h_2*j*p_3^2*p_4^2*s_2*v*x + f_1*h_2^2*j*p_3*p_4*s_2^2*v*x + h_1*h_2^2*j*p_3*p_4*s_2^2*v*x - e*f_1*f_2*g_1*h_2^2*p_3*s_2^2*v^2 - 2*e*f_1*f_2*g_1*h_2^2*p_3^2*s_2^2*v - e*f_1*f_2^2*g_1*h_2^2*p_3*s_2^2*v - e*f_1*g_1*h_2^2*j*p_3*s_2^2*v^2 - e*f_1*g_1*h_2^2*j*p_3^2*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*p_3^2*s_2^2*x - f_1*f_2^2*g_2*h_1*h_2^2*p_3*s_2^2*x - e*f_2*g_1*h_2^2*p_3^2*p_4*s_2^2*v - e*f_2^2*g_1*h_2^2*p_3*p_4*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*s_2^2*v^2*x - f_1*f_2^2*g_2*h_1*h_2^2*s_2^2*v*x - f_1*f_2*g_2*h_2^2*p_3^2*p_4*s_2^2*x - f_1*f_2^2*g_2*h_2^2*p_3*p_4*s_2^2*x - f_2*g_2*h_1*h_2^2*p_3^2*p_4*s_2^2*x - 
                                                                                             f_2^2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*x - e*f_1*f_2*h_2^2*p_4*s_2^2*v^2*x - e*f_1*f_2^2*h_2^2*p_4*s_2^2*v*x - f_2*g_2*h_2^2*j*p_3*p_4^2*s_2^2*x + e*f_2^2*g_2*h_2*p_4^2*s_2*v^2*x - e*f_2*h_1*h_2^2*p_4*s_2^2*v^2*x - f_1*f_2*g_2*h_2^2*p_4*s_2^2*v^2*x - f_1*f_2^2*g_2*h_2^2*p_4*s_2^2*v*x - e*f_2*h_2^2*j*p_4^2*s_2^2*v*x - f_2*g_2*h_1*h_2^2*p_4*s_2^2*v^2*x - f_2^2*g_2*h_1*h_2^2*p_4*s_2^2*v*x - f_2*g_2*h_2^2*j*p_4^2*s_2^2*v*x - e*f_1*h_2^2*p_3*p_4*s_2^2*v^2*x - e*f_1*h_2^2*p_3^2*p_4*s_2^2*v*x - 2*e*f_2*h_2^2*p_3*p_4^2*s_2^2*v*x - e*h_1*h_2^2*p_3*p_4*s_2^2*v^2*x - e*h_1*h_2^2*p_3^2*p_4*s_2^2*v*x - 2*f_2*g_2*h_2^2*p_3*p_4^2*s_2^2*v*x + 4*f_1*f_2*h_1*h_2*j*p_3*s_2*v*x + 4*f_1*f_2*h_2*j*p_3*p_4*s_2*v*x + 4*f_2*h_1*h_2*j*p_3*p_4*s_2*v*x + e*f_1*f_2*g_2*h_2^2*p_4*s_2^2*v^2*x + e*f_1*f_2^2*g_2*h_2^2*p_4*s_2^2*v*x + e*f_2*g_2*h_1*h_2^2*p_4*s_2^2*v^2*x + e*f_2*g_2*h_2^2*j*p_4^2*s_2^2*v*x - e*f_1*f_2*h_1*h_2^2*s_1*s_2^2*v^2*x - e*f_1*f_2^2*h_1*h_2^2*s_1*s_2^2*v*x + 2*e*f_2*g_2*h_2^2*p_3*p_4^2*s_2^2*v*x - e*f_1*h_1*h_2^2*p_3*s_1*s_2^2*v^2*x - e*f_1*h_1*h_2^2*p_3^2*s_1*s_2^2*v*x - e*f_2^2*h_1*h_2^2*p_4*s_1*s_2^2*v*x - 2*e*f_1*f_2*g_1*h_2*j*p_3*s_2*v^2 - 3*e*f_1*f_2*g_1*h_2*j*p_3^2*s_2*v - 2*f_1*f_2*g_2*h_1*h_2*j*p_3^2*s_2*x - 2*e*f_2*g_1*h_2*j*p_3*p_4*s_2*v^2 - 3*e*f_2*g_1*h_2*j*p_3^2*p_4*s_2*v - f_1*f_2*g_2*h_1*h_2*j*s_2*v^2*x + e*f_1*f_2*g_2*j*p_3*p_4*v^2*x + e*f_1*f_2*g_2*j*p_3^2*p_4*v*x - 2*f_1*f_2*g_2*h_2*j*p_3^2*p_4*s_2*x + e*f_1*f_2*g_2*h_1*p_3*s_1*v^3*x + e*f_1*f_2*g_2*h_1*p_3^3*s_1*v*x + e*f_1*f_2*g_2*h_2*p_4*s_2*v^3*x - 2*f_2*g_2*h_1*h_2*j*p_3^2*p_4*s_2*x + e*f_2*g_2*h_1*h_2*p_4*s_2*v^3*x - 2*e*f_1*f_2*h_1*j*p_3*s_1*v^2*x - 2*e*f_1*f_2*h_1*j*p_3^2*s_1*v*x - e*f_1*f_2*h_2*j*p_4*s_2*v^2*x - 4*f_1*f_2*g_2*h_1*h_2*p_3*s_2*v^2*x - 
                                                                                             5*f_1*f_2*g_2*h_1*h_2*p_3^2*s_2*v*x - 3*f_1*f_2^2*g_2*h_1*h_2*p_3*s_2*v*x - e*f_1*f_2*h_1*h_2*s_1*s_2*v^3*x + e*f_1*h_1*h_2*j*p_3*s_2*v^2*x + e*f_1*h_1*h_2*j*p_3^2*s_2*v*x - f_1*f_2*g_2*h_2*j*p_4*s_2*v^2*x - f_2*g_2*h_1*h_2*j*p_4*s_2*v^2*x - 4*e*f_1*f_2*h_2*p_3*p_4*s_2*v^2*x - 4*e*f_1*f_2*h_2*p_3^2*p_4*s_2*v*x - 2*e*f_1*f_2^2*h_2*p_3*p_4*s_2*v*x - 3*e*f_2*h_1*h_2*p_3*p_4*s_2*v^2*x - 2*e*f_2*h_1*h_2*p_3^2*p_4*s_2*v*x - 4*f_1*f_2*g_2*h_2*p_3*p_4*s_2*v^2*x - 5*f_1*f_2*g_2*h_2*p_3^2*p_4*s_2*v*x - 3*f_1*f_2^2*g_2*h_2*p_3*p_4*s_2*v*x - 2*e*f_2*h_1*j*p_3*p_4*s_1*v^2*x - 2*e*f_2*h_1*j*p_3^2*p_4*s_1*v*x - e*f_1*h_2*j*p_3*p_4*s_2*v^2*x - e*f_1*h_2*j*p_3^2*p_4*s_2*v*x - 2*e*f_2*h_2*j*p_3*p_4^2*s_2*v*x - 4*f_2*g_2*h_1*h_2*p_3*p_4*s_2*v^2*x - 5*f_2*g_2*h_1*h_2*p_3^2*p_4*s_2*v*x - 3*f_2^2*g_2*h_1*h_2*p_3*p_4*s_2*v*x - e*f_1*h_1*h_2*p_3*s_1*s_2*v^3*x - 2*e*f_1*h_1*h_2*p_3^3*s_1*s_2*v*x - 3*f_2*g_2*h_2*j*p_3*p_4^2*s_2*v*x - e*f_1*f_2*g_1*h_2^2*j*p_3*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*j*p_3*s_2^2*x - e*f_1*f_2*h_1*h_2^2*j*s_2^2*v*x - e*f_2*g_1*h_2^2*j*p_3*p_4*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*j*s_2^2*v*x - f_1*f_2*g_2*h_2^2*j*p_3*p_4*s_2^2*x + 2*e*f_1*f_2*g_2*h_1*p_3^2*s_1*v^2*x + e*f_1*f_2^2*g_2*h_1*p_3*s_1*v^2*x + e*f_1*f_2^2*g_2*h_1*p_3^2*s_1*v*x + e*f_1*f_2^2*g_2*h_2*p_4*s_2*v^2*x - f_2*g_2*h_1*h_2^2*j*p_3*p_4*s_2^2*x - e*f_1*f_2*h_2^2*j*p_4*s_2^2*v*x - 2*f_1*f_2*g_2*h_1*h_2^2*p_3*s_2^2*v*x + e*f_2*g_2*h_2*j*p_4^2*s_2*v^2*x - e*f_1*f_2^2*h_1*h_2*s_1*s_2*v^2*x - e*f_2*h_1*h_2^2*j*p_4*s_2^2*v*x - f_1*f_2*g_2*h_2^2*j*p_4*s_2^2*v*x - f_2*g_2*h_1*h_2^2*j*p_4*s_2^2*v*x - 2*e*f_1*f_2*h_2^2*p_3*p_4*s_2^2*v*x + e*f_2^2*g_2*h_1*p_3*p_4*s_1*v^2*x + e*f_2^2*g_2*h_1*p_3^2*p_4*s_1*v*x + 4*e*f_2*g_2*h_2*p_3*p_4^2*s_2*v^2*x + 
                                                                                             4*e*f_2*g_2*h_2*p_3^2*p_4^2*s_2*v*x + 2*e*f_2^2*g_2*h_2*p_3*p_4^2*s_2*v*x - e*f_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 2*f_1*f_2*g_2*h_2^2*p_3*p_4*s_2^2*v*x - 2*f_2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 3*e*f_1*h_1*h_2*p_3^2*s_1*s_2*v^2*x - e*f_2^2*h_1*h_2*p_4*s_1*s_2*v^2*x - e*f_1*f_2*h_1*h_2*j*s_1*s_2*v^2*x + 4*e*f_1*f_2*g_2*h_2*p_3*p_4*s_2*v^2*x + 4*e*f_1*f_2*g_2*h_2*p_3^2*p_4*s_2*v*x + 2*e*f_1*f_2^2*g_2*h_2*p_3*p_4*s_2*v*x + 4*e*f_2*g_2*h_1*h_2*p_3*p_4*s_2*v^2*x + 4*e*f_2*g_2*h_1*h_2*p_3^2*p_4*s_2*v*x + e*f_2*g_2*h_1*j*p_3*p_4*s_1*v^2*x + e*f_2*g_2*h_1*j*p_3^2*p_4*s_1*v*x + 2*e*f_2*g_2*h_2*j*p_3*p_4^2*s_2*v*x - 4*e*f_1*f_2*h_1*h_2*p_3*s_1*s_2*v^2*x - 4*e*f_1*f_2*h_1*h_2*p_3^2*s_1*s_2*v*x - 2*e*f_1*f_2^2*h_1*h_2*p_3*s_1*s_2*v*x - 2*e*f_1*h_1*h_2*j*p_3*s_1*s_2*v^2*x - 2*e*f_1*h_1*h_2*j*p_3^2*s_1*s_2*v*x - e*f_2*h_1*h_2*j*p_4*s_1*s_2*v^2*x - e*f_2*h_1*h_2*p_3*p_4*s_1*s_2*v^2*x - 2*e*f_2*h_1*h_2*p_3^2*p_4*s_1*s_2*v*x - 2*e*f_2^2*h_1*h_2*p_3*p_4*s_1*s_2*v*x - e*h_1*h_2*j*p_3*p_4*s_1*s_2*v^2*x - e*h_1*h_2*j*p_3^2*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*j*s_2^2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*p_3*s_2^2*v*x + e*f_1*f_2*g_2*h_2^2*j*p_4*s_2^2*v*x + e*f_1*f_2^2*g_2*h_1*h_2*s_1*s_2*v^2*x + e*f_2*g_2*h_1*h_2^2*j*p_4*s_2^2*v*x + 2*e*f_1*f_2*g_2*h_2^2*p_3*p_4*s_2^2*v*x + 2*e*f_2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 2*e*f_1*f_2*h_1*h_2^2*p_3*s_1*s_2^2*v*x + e*f_2^2*g_2*h_1*h_2*p_4*s_1*s_2*v^2*x - e*f_2*h_1*h_2^2*p_3*p_4*s_1*s_2^2*v*x - 3*f_1*f_2*g_2*h_1*h_2*j*p_3*s_2*v*x - 2*e*f_1*f_2*h_2*j*p_3*p_4*s_2*v*x - 3*f_1*f_2*g_2*h_2*j*p_3*p_4*s_2*v*x - 3*f_2*g_2*h_1*h_2*j*p_3*p_4*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*s_1*s_2^2*v^2*x + e*f_1*f_2^2*g_2*h_1*h_2^2*s_1*s_2^2*v*x + e*f_2^2*g_2*h_1*h_2^2*p_4*s_1*s_2^2*v*x + 
                                                                                             e*f_1*f_2*g_2*h_1*h_2*p_3*s_2*v^2*x + 2*e*f_1*f_2*g_2*h_1*h_2*p_3^2*s_2*v*x + e*f_1*f_2*g_2*h_1*j*p_3*s_1*v^2*x + e*f_1*f_2*g_2*h_1*j*p_3^2*s_1*v*x + e*f_1*f_2*g_2*h_2*j*p_4*s_2*v^2*x + e*f_1*f_2*g_2*h_1*h_2*s_1*s_2*v^3*x + e*f_1*f_2*g_2*h_1*h_2*j*p_3*s_2*v*x + 2*e*f_1*f_2*g_2*h_2*j*p_3*p_4*s_2*v*x + e*f_2*g_2*h_1*h_2*j*p_3*p_4*s_2*v*x - 2*e*f_1*f_2*h_1*h_2*j*p_3*s_1*s_2*v*x - 2*e*f_2*h_1*h_2*j*p_3*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2*j*s_1*s_2*v^2*x + 3*e*f_1*f_2*g_2*h_1*h_2*p_3*s_1*s_2*v^2*x + 2*e*f_1*f_2*g_2*h_1*h_2*p_3^2*s_1*s_2*v*x + 2*e*f_1*f_2^2*g_2*h_1*h_2*p_3*s_1*s_2*v*x + e*f_2*g_2*h_1*h_2*j*p_4*s_1*s_2*v^2*x + 2*e*f_2^2*g_2*h_1*h_2*p_3*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*p_3*s_1*s_2^2*v*x + e*f_1*f_2*g_2*h_1*h_2*j*p_3*s_1*s_2*v*x + e*f_2*g_2*h_1*h_2*j*p_3*p_4*s_1*s_2*v*x))/(p_2*p_3*(p_3 + h_2*s_2)*(a + p_1)*(f_1 + p_4)*(h_1 + p_4)*(p_3 + v)*(p_3 + v + h_2*s_2)*(f_2 + j + p_3)*(f_2 + j + p_3 + v)) })

# Contour plot
num_levels_2 <- seq(0.15, 0.6, by = 0.05)
custom_blue_red_palette_2 <- colorRampPalette(c("#F3F3F3","#F2F2F2","#F1F1F1" ,"#F0F0F0", '#EFEFEF', "#DFDFDF", "#CFCFCF","#BFBFBF", "#AFAFAF"))


filled.contour(f_2_range, gamma_2_rango, Contour_2,  
               color.palette =custom_blue_red_palette_2,
               plot.title = title(main = "Isolation of asymptomatic carriers and R0", 
                                  xlab = "Isolation rate of asymptomatic carriers (f2)", 
                                  ylab = "É£2: Effectivness of contact precautions"),
                                  levels = num_levels_2,
                 plot.axes = {
                   axis(1, at = f_2_range)
                   axis(2, at = gamma_2_rango)
                 contour(f_2_range, gamma_2_rango, Contour_2,
                         levels = num_levels_2,
                         add = TRUE,
                         labcex = 0.8)})







#4.3 EXTENDED SENSITIVITY ANALYSIS: CDI INCIDENCE


# Load necessary libraries
if (!require(pacman)) install.packages("pacman")
library(pacman)

# Use p_load function from 'pacman' to load required packages
p_load(deSolve, reshape2, ggplot2, dplyr)


# Define initial conditions for the model, representing the starting number of individuals in each compartment.

initial_conditions <- c(
  R = 600,                    # Non-susceptible population
  S = 0,                      # Susceptible population
  E = 0,                      # Asymptomatic carriers type E
  C = 0,                      # Asymptomatic carriers type C
  K_1 = 0,                    # Treated asymptomatic carriers type K1 with contact precautions
  K_2 = 0,                    # Treated asymptomatic carriers type K2 with contact precautions
  G_1 = 0,                    # Isolated asymptomatic carriers type G1 with treatment
  G_2 = 0,                    # Isolated asymptomatic carriers type G2 with treatment
  I = 0,                      # Symptomatic patients 
  A = 0,                      # symptomatic patients with treatment and contact precautions
  Admission = 0,              # Cumulative number of admissions
  Incidence = 0,              # Cumulative number of cases
  dDischarge_overall=0,       # Number of overall discharges
  dDischarge_colonized=0      # Number of asymptomatic carriers discharges    
) 

# Define the SIR model function to simulate the dynamics of infection within a hospital
parameters <- c(
  delta = 0.0003996096,    # Transmission rate of infected individuals (Any value that will be optimized for the number of observed cases)
  equis = 0.7,             # Relative transmission for colonized patients.
  alfa = 0.32,             # Rate of antibiotic use.
  epsilon = 0.13,          # Fraction of asymptomatic carriers who develop symptomatic disease during hospitalization
  ve = 1/4,                # Progression rate to symptomatic disease.
  lambda = 76,             # Admission rate to the hospital or facility.
  ene = 0.08,              # Overall proportion of asymptomatic carriers at admission.
  pi = 0.005,              # Proportion of infected patients at admission.
  eme = 0.12,              # Proportion of pre-symptomatic patients at admission. 
  zeta = 0.22,             # Proportion of susceptible patients at admission (patient with history of antibiotic use before admission).
  psi_1 = 1/6,             # Discharge rate for non-colonized population.
  psi_2 = 1/6,             # Discharge rate for susceptible population.
  psi_3 = 1/6,             # Discharge rate for asymptomatic carriers.
  psi_4 = 1/12,            # Discharge rate for symptomatic population.
  ache_1 = 1/10,           # Bacterial clearance rate due to treatment for infected patients.
  ache_2 = 1/10,           # Bacterial clearance rate due to treatment for asymptomatic patients.
  gamma_1 = 0.5,           # Relative reduction of transmission due to contact precautions on symptomatic patients (Effectiveness of contact precautions).
  gamma_2 = 0,             # Relative reduction of transmission due to contact precautions on asymptomatic patients (Effectiveness of contact precautions).
  efe_2 = 0,               # Diagnosis rate of asymptomatic carriers.
  efe_1 = 0.90,            # Diagnosis rate of symptomatic carriers.
  jota = 0,                # Treatment rate of asymptomatic carriers.
  sigma_1 = 0.7,           # Fraction of cured symptomatic carriers after treatment (Effectiveness of treatment).
  sigma_2 = 0              # Fraction of cured asymptomatic carriers after treatment (Effectiveness of treatment).
)


follow_up_duration = 570 #Study period in days.
times <- seq(from = 0, to = follow_up_duration, by = 1) # Time steps (days)

# Model structure
comp_model <- function(time, state, parameters) {  
  with(as.list(c(state, parameters)), { 
    
    # Calculate the proportion of patients arriving at C compartment from community
    kappa=1-eme
    
    # Calculate the proportion of susceptible arriving at S compartment from community
    omega= 1-(zeta+pi+ene)
    
    # Define the force of infection (beta1,beta2, beta3 and beta4) for each group capable of transmitting the infection, 
    B1 = delta                          #For symptomatic patients
    B2 = delta * (1-gamma_1)            #For symptomatic under contact precautions
    B3 = delta * equis                  #For asymptomatic carriers
    B4 = delta * equis * (1-gamma_2)    #For asymptomatic carriers under contact precautions
    
    # Differential equations describing the flow between compartments
    
    dR= lambda*omega - psi_1*R - alfa*R
    dS= alfa*R - (B1*I+B2*A+B3*E+B3*C+B3*K_1+B3*K_2+B4*G_1+B4*G_2)*S - psi_2*S + sigma_2*ache_2*K_1 + sigma_2*ache_2*K_2 + sigma_1*ache_1*A + lambda*zeta
    
    dE= epsilon*(B1*I+B2*A+B3*E+B3*C+B3*K_1+B3*K_2+B4*G_1+B4*G_2)*S + lambda*ene*eme - jota*E - ve*E - efe_2*E - psi_3*E
    dC= (1-epsilon)*(B1*I+B2*A+B3*E+B3*C+B3*K_1+B3*K_2+B4*G_1+B4*G_2)*S + lambda*ene*kappa - psi_3*C - jota*C - efe_2*C + (1-sigma_1)*ache_1*A
    
    dK_1= jota*E - sigma_2*ache_2*K_1 - psi_3*K_1 - ve*K_1
    dK_2= jota*C - sigma_2*ache_2*K_2 - psi_3*K_2
    
    dG_1= efe_2*E - psi_3*G_1 - ve*G_1 
    dG_2= efe_2*C - psi_3*G_2 
    
    dI= ve*E + lambda*pi - psi_4*I - efe_1*I 
    dA= efe_1*I - (1-sigma_1)*ache_1*A - sigma_1*ache_1*A - psi_4*A + ve*G_1 + ve*K_1
    
    dAdmission= lambda
    dIncidence= efe_1*I + ve*G_1 + ve*K_1 
    
    dDischarge_overall = (psi_1*R + psi_2*S + psi_3*E + psi_3*C + psi_3*K_1 + psi_3*K_2 + psi_3*G_1 + psi_3*G_2 + psi_4*I + psi_4*A )
    dDischarge_colonized = (psi_3*E + psi_3*C + psi_3*K_1 + psi_3*K_2 + psi_3*G_1 + psi_3*G_2) 
    
    # Return the number of people in each compartments at each time step 
    
    return(list(c(dR, dS, dE, dC, dK_1,dK_2, dG_1, dG_2, dI, dA, dAdmission, dIncidence, dDischarge_overall, dDischarge_colonized))) 
  })
}

# Run simulation
model_output <- as.data.frame(ode(y = initial_conditions, 
                                  times = times, 
                                  func = comp_model,
                                  parms = parameters))
View(model_output)



# Function for performing sensitivity analysis on model parameters

sensitivity_analysis <- function(param, percent_change) {
  results <- data.frame(Parameter = character(), PercentChange = numeric(), Result = numeric())
  
  for (p in percent_change) {
    # Adjust  parameters by the percent change
    temp_params <- parameters
    temp_params[param] <- parameters[param] * (1 + p / 100)
    
    # Run the model simulation
    output <- ode(y = initial_conditions, times = times, func = comp_model, parms = temp_params)
    output_df <- as.data.frame(output)
    
    # Compute the result (Incidence / Admission) * 1000
    result <- (tail(output_df$Incidence, 1) / tail(output_df$Admission, 1)) * 1000
    results <- rbind(results, data.frame(Parameter = param, PercentChange = p, Result = result))
  }
  
  return(results)
}

# Define the range of percent changes from -20% to +20%
percent_changes <- seq(-20, 20, by = 1)

# Conduct sensitivity analysis for parameter of interest
params_to_analyze <- c("delta", "lambda", "alfa", "psi_1", "psi_2", "psi_3", "psi_4", "ache_1", "zeta", "equis", "epsilon", "ve", "gamma_1", "sigma_1", "efe_1", "ene", "eme", "pi" )
results_list <- lapply(params_to_analyze, function(x) sensitivity_analysis(x, percent_changes))

# Combine results in data frame
all_results <- do.call(rbind, results_list)
View(all_results)


# Function to create a line chart for a specific parameter

cre_graph_lin <- function(data, parameter_name, graph_title, xlab, ylab) {
  # Filter data for the specific parameter
  data_filtered <- data %>% filter(Parameter == parameter_name)
  # Create the plot
  ggplot(data = data_filtered, aes(x = PercentChange, y = Result)) +
    geom_line() +
    geom_point(data = filter(data_filtered, PercentChange == 0), color = "black", size = 1) +
    ggtitle(graph_title) + 
    labs(x = xlab, y = ylab) + 
    theme_minimal() +
    theme(panel.border = element_rect(colour = "black", fill=NA, size=1),
          axis.title.x = element_text(size = 8),
          axis.title.y = element_text(size = 8),
          plot.title = element_text(size = 9)) +
    ylim(12, 19)  

}

# Generate and display line charts for each parameter

graph_delta <- cre_graph_lin(all_results, "delta", "Incidence vs Î´", "% change (Î´)", "CDI Incidence")
graph_lambda <- cre_graph_lin(all_results, "lambda", "Incidence vs Î»", "% change (Î»)", "CDI Incidence")
graph_alfa <- cre_graph_lin(all_results, "alfa", "Incidence vs Î±", "% change (Î±)", "CDI Incidence")
graph_psi_1 <- cre_graph_lin(all_results, "psi_1", "Incidence vs Î¨1", "% change (Î¨1)", "CDI Incidence")
graph_psi_2 <- cre_graph_lin(all_results, "psi_2", "Incidence vs Î¨2", "% change (Î¨2)", "CDI Incidence")
graph_psi_3 <- cre_graph_lin(all_results, "psi_3", "Incidence vs Î¨3", "% change (Î¨3)", "CDI Incidence")
graph_psi_4 <- cre_graph_lin(all_results, "psi_4", "Incidence vs Î¨4", "% change (Î¨4)", "CDI Incidence")
graph_ache_1 <- cre_graph_lin(all_results, "ache_1", "Incidence vs h1", "% change (h1)", "CDI Incidence")
graph_zeta <- cre_graph_lin(all_results, "zeta", "Incidence vs z", "% change (z)", "CDI Incidence")
graph_equis <- cre_graph_lin(all_results, "equis", "Incidence vs x", "% change (x)", "CDI Incidence")
graph_epsilon <- cre_graph_lin(all_results, "epsilon", "Incidence vs Îµ", "% change (Îµ)", "CDI Incidence")
graph_ve <- cre_graph_lin(all_results, "ve", "Incidence vs Î½", "% change (Î½)", "CDI Incidence")
graph_gamma_1 <- cre_graph_lin(all_results, "gamma_1", "Incidence vs É£1", "% change (É£1)", "CDI Incidence")
graph_sigma_1 <- cre_graph_lin(all_results, "sigma_1", "Incidence vs Ï1", "% change (Ï1)", "CDI Incidence")
graph_efe_1 <- cre_graph_lin(all_results, "efe_1", "Incidence vs f1", "% change (f1)", "CDI Incidence")
graph_ene <- cre_graph_lin(all_results, "ene", "Incidence vs n", "% change (n)", "CDI Incidence")
graph_eme <- cre_graph_lin(all_results, "eme", "Incidence vs m", "% change (m)", "CDI Incidence")
graph_pi <- cre_graph_lin(all_results, "pi", "Incidence vs Ï", "% change (Ï)", "CDI Incidence")

# Merged figures 
grid.arrange(graph_psi_3, graph_psi_2, graph_psi_4, graph_psi_1, graph_gamma_1, graph_sigma_1, graph_ache_1, graph_efe_1, graph_zeta, graph_alfa, graph_ve,graph_pi,graph_eme,graph_epsilon, graph_ene, graph_equis, graph_lambda,graph_delta,
  ncol = 6)






#4.4 EXTENDED SENSITIVITY ANALYSIS (CONTACT PRECAUTION AND PROPHILAXYS): CDI INCIDENCE 

# This section extends the sensitivity analysis to focus on the effects of treatment and isolation strategies on asymptomatic carriers of C. difficile. 
# It examines how variations in treatment rates and the effectiveness of isolation measures can impact the incidence of CDI.
# Define the model and initial conditions here (similar to the provided code above in section 4.3) 

# Function to simulate and calculate the incidence rate per 1000 admissions for a specific combination of two parameters 
# This allows for the examination of interactions between treatment and isolation parameters on the overall model outcome.

run_simulation_2 <- function(param1, param2, param1_name, param2_name) {
  parameters[param1_name] <- param1
  parameters[param2_name] <- param2
  output <- as.data.frame(ode(y = initial_conditions, times = times, func = comp_model, parms = parameters))
  output <- output %>%
    mutate(Incidence_1000 = (Incidence/Admission)*1000)
  return(tail(output$Incidence_1000, 1))
}

# Function to generate a data matrix for contour plot visualization.
generate_contour_data_2 <- function(param1_range, param2_range, param1_name, param2_name) {
  results <- expand.grid(param1 = param1_range, param2 = param2_range)
  results$Incidence_1000 <- mapply(run_simulation_2, results$param1, results$param2, MoreArgs = list(param1_name = param1_name, param2_name = param2_name))
  return(results)
}

# Generate data for the first matrix, varying j and sigma_2
contour_data1 <- generate_contour_data_2(seq(0, 0.5, by = 0.1), seq(0.5, 1, by = 0.1), "jota", "sigma_2")

# Generate data for the second matrix, varying f2 and gamma_2
contour_data2 <- generate_contour_data_2(seq(0, 0.5, by = 0.1), seq(0.5, 1, by = 0.1), "efe_2", "gamma_2")

# Transform the generated datasets into a matrix format suitable for contour plotting.
matrix_data_1 <- acast(contour_data1, param1 ~ param2, value.var = "Incidence_1000")
matrix_data_2 <- acast(contour_data2, param1 ~ param2, value.var = "Incidence_1000")



# Creating the first contour plot to assess the impact of prophilactyc antibiotic treatment and
# the effectiveness of contact precautions on CDI incidence.

num_levels_3 <- seq(12.5, 15, by = 0.5)

j_range <- seq(0, 0.5, by = 0.1)
sigma_2_range <- seq(0.5, 1, by = 0.1)


custom_red_palette_3 <- colorRampPalette(c( '#EFEFEF', "#DFDFDF", "#CFCFCF","#BFBFBF", "#AFAFAF"))
Figure_Contour_1_1 = filled.contour(j_range, sigma_2_range, matrix_data_1,  color.palette = custom_red_palette_3,
                                    plot.title = title(main = "Treatment on asymptomatic carriers and CDI incidence", 
                                                       xlab = "Treatment rate of asymptomatic carriers (j)" , 
                                                       ylab = "Effectiveness of treatment  (Ï2)"),
                                    levels = num_levels_3,
                                    plot.axes = {
                                      axis(1, at = j_range)
                                      axis(2, at = sigma_2_range)
                                      contour(j_range, sigma_2_range, matrix_data_1,
                                              levels = num_levels_3,
                                              add = TRUE,
                                              labcex = 1.0)  })




# Creating the second contour plot to assess the impact of isolation rates and the effectiveness 
# of contact precautions on CDI incidence.

efe_2_range <- seq(0, 0.5, by = 0.1)
gamma_2_range <- seq(0.5, 1, by = 0.1)


num_levels_4 <- seq(11, 15, by = 0.5)
custom_red_palette <- colorRampPalette(c("#F2F2F2","#F1F1F1" ,"#F0F0F0",'#EFEFEF', "#DFDFDF", "#CFCFCF","#BFBFBF", "#AFAFAF"))
Figure_Contour_1_2 = filled.contour(efe_2_range, gamma_2_range, matrix_data_2, 
                                    color.palette = custom_red_palette,
                                    plot.title = title(main = "Isolation of asymptomatic carriers and CDI incidence", 
                                                       xlab = "Isolation rate of asymptomatic carriers (f2)", 
                                                       ylab = "Effectiveness of contact precautions (É£2)"),
                                    levels = num_levels_4,
                                    plot.axes = {
                                      axis(1, at = efe_2_range)
                                      axis(2, at = gamma_2_range)
                                      contour(efe_2_range, gamma_2_range, matrix_data_2,
                                              levels = num_levels_4,
                                              add = TRUE,
                                              labcex = 1.0)   })

