
# Load necessary libraries
install.packages("pacman")
library(pacman)

p_load(gdtools, epiR, ggplot2, dplyr, gdtools, gridExtra)


#2.1 Mote Carlo Simulations. 
#The reproduction number fuctiond erivate from Next Generation Matrix analyis 
#derivated from script - 5. Matlab - Reproduction number (5.1)
 
#Reproduction number function:

R_formula = expression((d*l*(a + p_1*z)*(p_3^5*p_4^2*x + f_2^2*p_3^3*p_4^2*x + j^2*p_3^3*p_4^2*x + p_3^2*p_4^2*v^3*x + 3*p_3^3*p_4^2*v^2*x + e*f_1*p_3^5*v + e*h_1*p_3^5*v + f_1*h_1*p_3^5*x + e*p_3^5*p_4*v + f_1*p_3^5*p_4*x + h_1*p_3^5*p_4*x + e*f_1*p_3^3*v^3 + 2*e*f_1*p_3^4*v^2 + e*h_1*p_3^3*v^3 + 2*e*h_1*p_3^4*v^2 + e*p_3^3*p_4*v^3 + 2*e*p_3^4*p_4*v^2 + 2*f_2*p_3^4*p_4^2*x + 2*j*p_3^4*p_4^2*x + 3*p_3^4*p_4^2*v*x + h_2^2*p_3^3*p_4^2*s_2^2*x + e*f_1*f_2*p_3^2*v^3 + 3*e*f_1*f_2*p_3^3*v^2 + e*f_1*f_2^2*p_3^3*v + e*f_2*h_1*p_3^2*v^3 + 2*e*f_2*h_1*p_3^3*v^2 - e*g_1*h_1*p_3^3*v^3 - 2*e*g_1*h_1*p_3^4*v^2 + e*f_1*j*p_3^2*v^3 + 3*e*f_1*j*p_3^3*v^2 + e*f_1*j^2*p_3^3*v + f_1*f_2^2*h_1*p_3^3*x + e*h_1*j*p_3^2*v^3 + 2*e*h_1*j*p_3^3*v^2 + f_1*h_1*j^2*p_3^3*x + e*f_2*p_3^2*p_4*v^3 + 3*e*f_2*p_3^3*p_4*v^2 + e*f_2^2*p_3^3*p_4*v - e*g_1*p_3^3*p_4*v^3 - 2*e*g_1*p_3^4*p_4*v^2 + f_1*f_2^2*p_3^3*p_4*x + e*j*p_3^2*p_4*v^3 + 3*e*j*p_3^3*p_4*v^2 + e*j^2*p_3^3*p_4*v - f_2*g_2*p_3^4*p_4^2*x + f_2^2*h_1*p_3^3*p_4*x + f_1*j^2*p_3^3*p_4*x + 2*f_2*j*p_3^3*p_4^2*x + h_1*j^2*p_3^3*p_4*x + e*h_1^2*p_3^4*v*x + f_1*h_1*p_3^2*v^3*x + 3*f_1*h_1*p_3^3*v^2*x - e*p_3^4*p_4^2*v*x + 2*h_2*p_3^4*p_4^2*s_2*x + f_1*p_3^2*p_4*v^3*x + 3*f_1*p_3^3*p_4*v^2*x + f_2*p_3*p_4^2*v^3*x + 5*f_2*p_3^3*p_4^2*v*x + h_1*p_3^2*p_4*v^3*x + 3*h_1*p_3^3*p_4*v^2*x + j*p_3*p_4^2*v^3*x + 5*j*p_3^3*p_4^2*v*x + e*f_1*f_2^2*p_3^2*v^2 + e*f_1*j^2*p_3^2*v^2 + e*f_2^2*p_3^2*p_4*v^2 + e*j^2*p_3^2*p_4*v^2 - f_2^2*g_2*p_3^3*p_4^2*x + e*h_1^2*p_3^2*v^3*x + 2*e*h_1^2*p_3^3*v^2*x - e*p_3^2*p_4^2*v^3*x - 2*e*p_3^3*p_4^2*v^2*x + 4*f_2*p_3^2*p_4^2*v^2*x + f_2^2*p_3*p_4^2*v^2*x + 2*f_2^2*p_3^2*p_4^2*v*x + 4*j*p_3^2*p_4^2*v^2*x + j^2*p_3*p_4^2*v^2*x + 2*j^2*p_3^2*p_4^2*v*x + 2*e*f_1*f_2*p_3^4*v + e*f_2*h_1*p_3^4*v - e*g_1*h_1*p_3^5*v + 2*e*f_1*j*p_3^4*v + 2*f_1*f_2*h_1*p_3^4*x + e*h_1*j*p_3^4*v + 2*f_1*h_1*j*p_3^4*x + 2*e*f_2*p_3^4*p_4*v - e*g_1*p_3^5*p_4*v + 2*f_1*f_2*p_3^4*p_4*x + 2*e*j*p_3^4*p_4*v + 2*f_2*h_1*p_3^4*p_4*x + 2*f_1*j*p_3^4*p_4*x + 2*h_1*j*p_3^4*p_4*x + 3*f_1*h_1*p_3^4*v*x + 3*f_1*p_3^4*p_4*v*x + 3*h_1*p_3^4*p_4*v*x + e*f_1*h_2^2*p_3^3*s_2^2*v + e*h_1*h_2^2*p_3^3*s_2^2*v + 2*e*f_2*h_1^2*p_3^2*v^2*x + f_1*h_1*h_2^2*p_3^3*s_2^2*x + 2*e*h_1^2*j*p_3^2*v^2*x + e*h_2^2*p_3^3*p_4*s_2^2*v - 3*e*f_2*p_3^2*p_4^2*v^2*x - e*f_2^2*p_3*p_4^2*v^2*x - e*f_2^2*p_3^2*p_4^2*v*x + f_1*h_2^2*p_3^3*p_4*s_2^2*x + 2*f_2^2*h_2*p_3^2*p_4^2*s_2*x - 3*f_2*g_2*p_3^2*p_4^2*v^2*x - f_2^2*g_2*p_3*p_4^2*v^2*x - 2*f_2^2*g_2*p_3^2*p_4^2*v*x + h_1*h_2^2*p_3^3*p_4*s_2^2*x - 3*e*j*p_3^2*p_4^2*v^2*x - e*j^2*p_3*p_4^2*v^2*x - e*j^2*p_3^2*p_4^2*v*x + h_2*j^2*p_3^2*p_4^2*s_2*x - e*h_1^2*p_3^2*s_1*v^3*x - 2*e*h_1^2*p_3^3*s_1*v^2*x + 
                                           f_2^2*h_2*p_4^2*s_2*v^2*x + 4*h_2*p_3^2*p_4^2*s_2*v^2*x - e*f_2*g_1*h_1*p_3^4*v + 2*e*f_1*f_2*j*p_3^3*v - f_1*f_2*g_2*h_1*p_3^4*x - e*g_1*h_1*j*p_3^4*v + 2*f_1*f_2*h_1*j*p_3^3*x - e*f_2*g_1*p_3^4*p_4*v + 2*e*f_2*j*p_3^3*p_4*v - f_1*f_2*g_2*p_3^4*p_4*x - e*g_1*j*p_3^4*p_4*v + 2*e*f_1*h_2*p_3^4*s_2*v - f_2*g_2*h_1*p_3^4*p_4*x + 2*e*h_1*h_2*p_3^4*s_2*v + 2*f_1*f_2*j*p_3^3*p_4*x + 2*f_2*h_1*j*p_3^3*p_4*x - e*f_1*h_1*p_3^4*v*x + 2*f_1*h_1*h_2*p_3^4*s_2*x + f_1*f_2*h_1*p_3*v^3*x + 5*f_1*f_2*h_1*p_3^3*v*x + f_1*h_1*j*p_3*v^3*x + 5*f_1*h_1*j*p_3^3*v*x + 2*e*h_2*p_3^4*p_4*s_2*v - e*f_1*p_3^4*p_4*v*x + 2*f_1*h_2*p_3^4*p_4*s_2*x + f_1*f_2*p_3*p_4*v^3*x + 5*f_1*f_2*p_3^3*p_4*v*x + 2*h_1*h_2*p_3^4*p_4*s_2*x + f_2*h_1*p_3*p_4*v^3*x + 5*f_2*h_1*p_3^3*p_4*v*x + f_1*j*p_3*p_4*v^3*x + 5*f_1*j*p_3^3*p_4*v*x + h_1*j*p_3*p_4*v^3*x + 5*h_1*j*p_3^3*p_4*v*x + e*f_1*h_2^2*p_3^2*s_2^2*v^2 + e*h_1*h_2^2*p_3^2*s_2^2*v^2 + e*h_2^2*p_3^2*p_4*s_2^2*v^2 + 2*f_2*h_2^2*p_3^2*p_4^2*s_2^2*x + f_2^2*h_2^2*p_3*p_4^2*s_2^2*x + h_2^2*j*p_3^2*p_4^2*s_2^2*x + f_2*h_2^2*p_4^2*s_2^2*v^2*x + f_2^2*h_2^2*p_4^2*s_2^2*v*x + h_2^2*p_3*p_4^2*s_2^2*v^2*x + 2*h_2^2*p_3^2*p_4^2*s_2^2*v*x - e*f_2*g_1*h_1*p_3^2*v^3 - 2*e*f_2*g_1*h_1*p_3^3*v^2 + 2*e*f_1*f_2*j*p_3^2*v^2 - f_1*f_2^2*g_2*h_1*p_3^3*x - e*g_1*h_1*j*p_3^2*v^3 - 2*e*g_1*h_1*j*p_3^3*v^2 - e*f_2*g_1*p_3^2*p_4*v^3 - 2*e*f_2*g_1*p_3^3*p_4*v^2 + 2*e*f_2*j*p_3^2*p_4*v^2 - f_1*f_2^2*g_2*p_3^3*p_4*x - e*g_1*j*p_3^2*p_4*v^3 - 2*e*g_1*j*p_3^3*p_4*v^2 + e*f_1*h_2*p_3^2*s_2*v^3 + 3*e*f_1*h_2*p_3^3*s_2*v^2 - f_2^2*g_2*h_1*p_3^3*p_4*x + e*h_1*h_2*p_3^2*s_2*v^3 + 3*e*h_1*h_2*p_3^3*s_2*v^2 - f_2*g_2*j*p_3^3*p_4^2*x - e*f_1*h_1*p_3^2*v^3*x - 2*e*f_1*h_1*p_3^3*v^2*x + e*f_2*h_1^2*p_3*v^3*x + e*f_2*h_1^2*p_3^3*v*x + 4*f_1*f_2*h_1*p_3^2*v^2*x + f_1*f_2^2*h_1*p_3*v^2*x + 2*f_1*f_2^2*h_1*p_3^2*v*x + e*h_1^2*j*p_3*v^3*x + e*h_1^2*j*p_3^3*v*x + 4*f_1*h_1*j*p_3^2*v^2*x + f_1*h_1*j^2*p_3*v^2*x + 2*f_1*h_1*j^2*p_3^2*v*x + e*h_2*p_3^2*p_4*s_2*v^3 + 3*e*h_2*p_3^3*p_4*s_2*v^2 - e*f_1*p_3^2*p_4*v^3*x - 2*e*f_1*p_3^3*p_4*v^2*x - e*f_2*p_3*p_4^2*v^3*x - 2*e*f_2*p_3^3*p_4^2*v*x + 4*f_2*h_2*p_3^3*p_4^2*s_2*x + 4*f_1*f_2*p_3^2*p_4*v^2*x + f_1*f_2^2*p_3*p_4*v^2*x + 2*f_1*f_2^2*p_3^2*p_4*v*x - f_2*g_2*p_3*p_4^2*v^3*x - 3*f_2*g_2*p_3^3*p_4^2*v*x + 4*f_2*h_1*p_3^2*p_4*v^2*x + f_2^2*h_1*p_3*p_4*v^2*x + 2*f_2^2*h_1*p_3^2*p_4*v*x - e*j*p_3*p_4^2*v^3*x - 2*e*j*p_3^3*p_4^2*v*x + 3*h_2*j*p_3^3*p_4^2*s_2*x - e*h_1^2*p_3^4*s_1*v*x + 4*f_1*j*p_3^2*p_4*v^2*x + f_1*j^2*p_3*p_4*v^2*x + 2*f_1*j^2*p_3^2*p_4*v*x + 2*f_2*j*p_3*p_4^2*v^2*x + 4*f_2*j*p_3^2*p_4^2*v*x + f_2*h_2*p_4^2*s_2*v^3*x + 4*h_1*j*p_3^2*p_4*v^2*x + h_1*j^2*p_3*p_4*v^2*x + 2*h_1*j^2*p_3^2*p_4*v*x + h_2*p_3*p_4^2*s_2*v^3*x + 5*h_2*p_3^3*p_4^2*s_2*v*x + 4*e*f_1*f_2*h_2*p_3^2*s_2*v^2 + e*f_1*f_2^2*h_2*p_3*s_2*v^2 + 
                                           2*e*f_1*f_2^2*h_2*p_3^2*s_2*v + 3*e*f_2*h_1*h_2*p_3^2*s_2*v^2 - e*g_1*h_1*h_2*p_3^2*s_2*v^3 - 3*e*g_1*h_1*h_2*p_3^3*s_2*v^2 + 4*e*f_1*h_2*j*p_3^2*s_2*v^2 + e*f_1*h_2*j^2*p_3*s_2*v^2 + e*f_1*h_2*j^2*p_3^2*s_2*v - 3*e*f_1*f_2*h_1*p_3^2*v^2*x - e*f_1*f_2^2*h_1*p_3*v^2*x - e*f_1*f_2^2*h_1*p_3^2*v*x + 2*f_1*f_2^2*h_1*h_2*p_3^2*s_2*x + 3*e*h_1*h_2*j*p_3^2*s_2*v^2 - e*f_2*g_2*h_1^2*p_3*v^3*x - e*f_2*g_2*h_1^2*p_3^3*v*x - 3*f_1*f_2*g_2*h_1*p_3^2*v^2*x - f_1*f_2^2*g_2*h_1*p_3*v^2*x - 2*f_1*f_2^2*g_2*h_1*p_3^2*v*x - 3*e*f_1*h_1*j*p_3^2*v^2*x - e*f_1*h_1*j^2*p_3*v^2*x - e*f_1*h_1*j^2*p_3^2*v*x + f_1*h_1*h_2*j^2*p_3^2*s_2*x + e*f_2*h_1^2*h_2*s_2*v^3*x + 4*e*f_2*h_2*p_3^2*p_4*s_2*v^2 + e*f_2^2*h_2*p_3*p_4*s_2*v^2 + 2*e*f_2^2*h_2*p_3^2*p_4*s_2*v + f_1*f_2^2*h_1*h_2*s_2*v^2*x - e*g_1*h_2*p_3^2*p_4*s_2*v^3 - 3*e*g_1*h_2*p_3^3*p_4*s_2*v^2 - 3*e*f_1*f_2*p_3^2*p_4*v^2*x - e*f_1*f_2^2*p_3*p_4*v^2*x - e*f_1*f_2^2*p_3^2*p_4*v*x + 2*f_1*f_2^2*h_2*p_3^2*p_4*s_2*x + 4*e*h_2*j*p_3^2*p_4*s_2*v^2 + e*h_2*j^2*p_3*p_4*s_2*v^2 + e*h_2*j^2*p_3^2*p_4*s_2*v + e*f_2*g_2*p_3*p_4^2*v^3*x + 2*e*f_2*g_2*p_3^3*p_4^2*v*x - 2*f_2*g_2*h_2*p_3^3*p_4^2*s_2*x - e*f_2*h_1*p_3^2*p_4*v^2*x - e*f_2^2*h_1*p_3*p_4*v^2*x - e*f_2^2*h_1*p_3^2*p_4*v*x - 3*f_1*f_2*g_2*p_3^2*p_4*v^2*x - f_1*f_2^2*g_2*p_3*p_4*v^2*x - 2*f_1*f_2^2*g_2*p_3^2*p_4*v*x + 2*f_2^2*h_1*h_2*p_3^2*p_4*s_2*x - 3*e*f_1*j*p_3^2*p_4*v^2*x - e*f_1*j^2*p_3*p_4*v^2*x - e*f_1*j^2*p_3^2*p_4*v*x - 2*e*f_2*j*p_3*p_4^2*v^2*x - 2*e*f_2*j*p_3^2*p_4^2*v*x + f_1*h_2*j^2*p_3^2*p_4*s_2*x - 3*f_2*g_2*h_1*p_3^2*p_4*v^2*x - f_2^2*g_2*h_1*p_3*p_4*v^2*x - 2*f_2^2*g_2*h_1*p_3^2*p_4*v*x + 3*f_2*h_2*j*p_3^2*p_4^2*s_2*x - e*f_2*h_1^2*p_3*s_1*v^3*x - e*f_2*h_1^2*p_3^3*s_1*v*x - e*f_2*h_2*p_4^2*s_2*v^3*x - e*h_1*j*p_3^2*p_4*v^2*x - e*h_1*j^2*p_3*p_4*v^2*x - e*h_1*j^2*p_3^2*p_4*v*x - f_2*g_2*j*p_3*p_4^2*v^2*x - 2*f_2*g_2*j*p_3^2*p_4^2*v*x + f_1*f_2^2*h_2*p_4*s_2*v^2*x + h_1*h_2*j^2*p_3^2*p_4*s_2*x + e*h_1^2*h_2*p_3*s_2*v^3*x + 2*e*h_1^2*h_2*p_3^3*s_2*v*x - f_2*g_2*h_2*p_4^2*s_2*v^3*x + 4*f_1*h_1*h_2*p_3^2*s_2*v^2*x + f_2^2*h_1*h_2*p_4*s_2*v^2*x - e*h_1^2*j*p_3*s_1*v^3*x - e*h_1^2*j*p_3^3*s_1*v*x + f_2*h_2*j*p_4^2*s_2*v^2*x - e*h_1*p_3^2*p_4*s_1*v^3*x - 2*e*h_1*p_3^3*p_4*s_1*v^2*x - e*h_2*p_3*p_4^2*s_2*v^3*x - 2*e*h_2*p_3^3*p_4^2*s_2*v*x + 4*f_1*h_2*p_3^2*p_4*s_2*v^2*x + 5*f_2*h_2*p_3*p_4^2*s_2*v^2*x + 8*f_2*h_2*p_3^2*p_4^2*s_2*v*x + 3*f_2^2*h_2*p_3*p_4^2*s_2*v*x + 4*h_1*h_2*p_3^2*p_4*s_2*v^2*x + 2*h_2*j*p_3*p_4^2*s_2*v^2*x + 5*h_2*j*p_3^2*p_4^2*s_2*v*x + h_2*j^2*p_3*p_4^2*s_2*v*x + e*f_1*f_2*h_2^2*p_3*s_2^2*v^2 + 2*e*f_1*f_2*h_2^2*p_3^2*s_2^2*v + e*f_1*f_2^2*h_2^2*p_3*s_2^2*v + 
                                           e*f_2*h_1*h_2^2*p_3*s_2^2*v^2 + e*f_2*h_1*h_2^2*p_3^2*s_2^2*v - e*g_1*h_1*h_2^2*p_3^3*s_2^2*v + e*f_1*h_2^2*j*p_3*s_2^2*v^2 + e*f_1*h_2^2*j*p_3^2*s_2^2*v + 2*f_1*f_2*h_1*h_2^2*p_3^2*s_2^2*x + f_1*f_2^2*h_1*h_2^2*p_3*s_2^2*x - 2*e*f_2*g_2*h_1^2*p_3^2*v^2*x + e*h_1*h_2^2*j*p_3*s_2^2*v^2 + e*h_1*h_2^2*j*p_3^2*s_2^2*v + f_1*h_1*h_2^2*j*p_3^2*s_2^2*x + e*f_2*h_2^2*p_3*p_4*s_2^2*v^2 + 2*e*f_2*h_2^2*p_3^2*p_4*s_2^2*v + e*f_2^2*h_2^2*p_3*p_4*s_2^2*v + f_1*f_2*h_1*h_2^2*s_2^2*v^2*x + f_1*f_2^2*h_1*h_2^2*s_2^2*v*x - e*g_1*h_2^2*p_3^3*p_4*s_2^2*v + 2*f_1*f_2*h_2^2*p_3^2*p_4*s_2^2*x + f_1*f_2^2*h_2^2*p_3*p_4*s_2^2*x + 3*e*f_2*g_2*p_3^2*p_4^2*v^2*x + e*f_2^2*g_2*p_3*p_4^2*v^2*x + e*f_2^2*g_2*p_3^2*p_4^2*v*x + e*h_2^2*j*p_3*p_4*s_2^2*v^2 + e*h_2^2*j*p_3^2*p_4*s_2^2*v - 2*f_2^2*g_2*h_2*p_3^2*p_4^2*s_2*x + 2*f_2*h_1*h_2^2*p_3^2*p_4*s_2^2*x + f_2^2*h_1*h_2^2*p_3*p_4*s_2^2*x + f_1*h_2^2*j*p_3^2*p_4*s_2^2*x + f_2*h_2^2*j*p_3*p_4^2*s_2^2*x - 2*e*f_2*h_1^2*p_3^2*s_1*v^2*x - e*f_2^2*h_2*p_4^2*s_2*v^2*x + f_1*f_2*h_2^2*p_4*s_2^2*v^2*x + f_1*f_2^2*h_2^2*p_4*s_2^2*v*x + h_1*h_2^2*j*p_3^2*p_4*s_2^2*x + 3*e*h_1^2*h_2*p_3^2*s_2*v^2*x - f_2^2*g_2*h_2*p_4^2*s_2*v^2*x + f_1*h_1*h_2^2*p_3*s_2^2*v^2*x + 2*f_1*h_1*h_2^2*p_3^2*s_2^2*v*x + f_2*h_1*h_2^2*p_4*s_2^2*v^2*x + f_2^2*h_1*h_2^2*p_4*s_2^2*v*x - 2*e*h_1^2*j*p_3^2*s_1*v^2*x + f_2*h_2^2*j*p_4^2*s_2^2*v*x - 3*e*h_2*p_3^2*p_4^2*s_2*v^2*x + f_1*h_2^2*p_3*p_4*s_2^2*v^2*x + 2*f_1*h_2^2*p_3^2*p_4*s_2^2*v*x + 3*f_2*h_2^2*p_3*p_4^2*s_2^2*v*x + h_1*h_2^2*p_3*p_4*s_2^2*v^2*x + 2*h_1*h_2^2*p_3^2*p_4*s_2^2*v*x + h_2^2*j*p_3*p_4^2*s_2^2*v*x - f_1*f_2*g_2*h_1*j*p_3^3*x + e*f_1*f_2*h_2*p_3*s_2*v^3 + 4*e*f_1*f_2*h_2*p_3^3*s_2*v + e*f_2*h_1*h_2*p_3*s_2*v^3 + 2*e*f_2*h_1*h_2*p_3^3*s_2*v - 2*e*g_1*h_1*h_2*p_3^4*s_2*v - f_1*f_2*g_2*j*p_3^3*p_4*x + e*f_1*h_2*j*p_3*s_2*v^3 + 3*e*f_1*h_2*j*p_3^3*s_2*v - e*f_1*f_2*h_1*p_3*v^3*x - 2*e*f_1*f_2*h_1*p_3^3*v*x - f_2*g_2*h_1*j*p_3^3*p_4*x + 4*f_1*f_2*h_1*h_2*p_3^3*s_2*x + e*h_1*h_2*j*p_3*s_2*v^3 + 2*e*h_1*h_2*j*p_3^3*s_2*v - f_1*f_2*g_2*h_1*p_3*v^3*x - 3*f_1*f_2*g_2*h_1*p_3^3*v*x - e*f_1*h_1*j*p_3*v^3*x - 2*e*f_1*h_1*j*p_3^3*v*x + 3*f_1*h_1*h_2*j*p_3^3*s_2*x + 
                                           2*f_1*f_2*h_1*j*p_3*v^2*x + 4*f_1*f_2*h_1*j*p_3^2*v*x + e*f_2*h_2*p_3*p_4*s_2*v^3 + 4*e*f_2*h_2*p_3^3*p_4*s_2*v + f_1*f_2*h_1*h_2*s_2*v^3*x - 2*e*g_1*h_2*p_3^4*p_4*s_2*v - e*f_1*f_2*p_3*p_4*v^3*x - 2*e*f_1*f_2*p_3^3*p_4*v*x + 4*f_1*f_2*h_2*p_3^3*p_4*s_2*x + e*h_2*j*p_3*p_4*s_2*v^3 + 3*e*h_2*j*p_3^3*p_4*s_2*v - e*f_2*h_1*p_3^3*p_4*v*x - f_1*f_2*g_2*p_3*p_4*v^3*x - 3*f_1*f_2*g_2*p_3^3*p_4*v*x + 4*f_2*h_1*h_2*p_3^3*p_4*s_2*x - e*f_1*j*p_3*p_4*v^3*x - 2*e*f_1*j*p_3^3*p_4*v*x + 3*f_1*h_2*j*p_3^3*p_4*s_2*x - f_2*g_2*h_1*p_3*p_4*v^3*x - 3*f_2*g_2*h_1*p_3^3*p_4*v*x + 2*f_1*f_2*j*p_3*p_4*v^2*x + 4*f_1*f_2*j*p_3^2*p_4*v*x - e*h_1*j*p_3^3*p_4*v*x + f_1*f_2*h_2*p_4*s_2*v^3*x + 3*h_1*h_2*j*p_3^3*p_4*s_2*x + 2*f_2*h_1*j*p_3*p_4*v^2*x + 4*f_2*h_1*j*p_3^2*p_4*v*x + f_1*h_1*h_2*p_3*s_2*v^3*x + 5*f_1*h_1*h_2*p_3^3*s_2*v*x + f_2*h_1*h_2*p_4*s_2*v^3*x - e*h_1*p_3^4*p_4*s_1*v*x + f_1*h_2*p_3*p_4*s_2*v^3*x + 5*f_1*h_2*p_3^3*p_4*s_2*v*x + h_1*h_2*p_3*p_4*s_2*v^3*x + 5*h_1*h_2*p_3^3*p_4*s_2*v*x - e*g_1*h_1*h_2^2*p_3^2*s_2^2*v^2 + e*f_2*h_1^2*h_2^2*s_2^2*v^2*x - e*g_1*h_2^2*p_3^2*p_4*s_2^2*v^2 - f_2*g_2*h_2^2*p_3^2*p_4^2*s_2^2*x - f_2^2*g_2*h_2^2*p_3*p_4^2*s_2^2*x - e*f_2*h_2^2*p_4^2*s_2^2*v^2*x - e*f_2^2*h_2^2*p_4^2*s_2^2*v*x + e*h_1^2*h_2^2*p_3*s_2^2*v^2*x + e*h_1^2*h_2^2*p_3^2*s_2^2*v*x - f_2*g_2*h_2^2*p_4^2*s_2^2*v^2*x - f_2^2*g_2*h_2^2*p_4^2*s_2^2*v*x - e*h_2^2*p_3*p_4^2*s_2^2*v^2*x - e*h_2^2*p_3^2*p_4^2*s_2^2*v*x - e*f_2*g_1*h_1*h_2*p_3*s_2*v^3 - 2*e*f_2*g_1*h_1*h_2*p_3^3*s_2*v + 2*e*f_1*f_2*h_2*j*p_3*s_2*v^2 + 3*e*f_1*f_2*h_2*j*p_3^2*s_2*v + e*f_1*f_2*g_2*h_1*p_3*v^3*x + 2*e*f_1*f_2*g_2*h_1*p_3^3*v*x - 2*f_1*f_2*g_2*h_1*h_2*p_3^3*s_2*x - e*g_1*h_1*h_2*j*p_3*s_2*v^3 - 2*e*g_1*h_1*h_2*j*p_3^3*s_2*v - 2*e*f_1*f_2*h_1*j*p_3*v^2*x - 2*e*f_1*f_2*h_1*j*p_3^2*v*x + 3*f_1*f_2*h_1*h_2*j*p_3^2*s_2*x - e*f_1*f_2*h_1*h_2*s_2*v^3*x - f_1*f_2*g_2*h_1*j*p_3*v^2*x - 2*f_1*f_2*g_2*h_1*j*p_3^2*v*x - e*f_2*g_1*h_2*p_3*p_4*s_2*v^3 - 2*e*f_2*g_1*h_2*p_3^3*p_4*s_2*v - f_1*f_2*g_2*h_1*h_2*s_2*v^3*x + e*f_1*f_2*g_2*p_3*p_4*v^3*x + 2*e*f_1*f_2*g_2*p_3^3*p_4*v*x + 2*e*f_2*h_2*j*p_3*p_4*s_2*v^2 + 3*e*f_2*h_2*j*p_3^2*p_4*s_2*v - 2*f_1*f_2*g_2*h_2*p_3^3*p_4*s_2*x + f_1*f_2*h_1*h_2*j*s_2*v^2*x - e*g_1*h_2*j*p_3*p_4*s_2*v^3 - 2*e*g_1*h_2*j*p_3^3*p_4*s_2*v + e*f_2*g_2*h_1*p_3^3*p_4*v*x - 2*e*f_1*f_2*j*p_3*p_4*v^2*x - 2*e*f_1*f_2*j*p_3^2*p_4*v*x - 2*f_2*g_2*h_1*h_2*p_3^3*p_4*s_2*x + 3*f_1*f_2*h_2*j*p_3^2*p_4*s_2*x - e*f_1*f_2*h_2*p_4*s_2*v^3*x - 2*e*f_2*h_1*j*p_3*p_4*v^2*x - 2*e*f_2*h_1*j*p_3^2*p_4*v*x - f_1*f_2*g_2*j*p_3*p_4*v^2*x - 2*f_1*f_2*g_2*j*p_3^2*p_4*v*x + 3*f_2*h_1*h_2*j*p_3^2*p_4*s_2*x - e*f_1*h_1*h_2*p_3*s_2*v^3*x - 2*e*f_1*h_1*h_2*p_3^3*s_2*v*x - f_1*f_2*g_2*h_2*p_4*s_2*v^3*x - f_2*g_2*h_1*j*p_3*p_4*v^2*x - 2*f_2*g_2*h_1*j*p_3^2*p_4*v*x + 5*f_1*f_2*h_1*h_2*p_3*s_2*v^2*x + 
                                           8*f_1*f_2*h_1*h_2*p_3^2*s_2*v*x + 3*f_1*f_2^2*h_1*h_2*p_3*s_2*v*x - f_2*g_2*h_1*h_2*p_4*s_2*v^3*x + f_1*f_2*h_2*j*p_4*s_2*v^2*x + 2*f_1*h_1*h_2*j*p_3*s_2*v^2*x + 5*f_1*h_1*h_2*j*p_3^2*s_2*v*x + f_1*h_1*h_2*j^2*p_3*s_2*v*x + f_2*h_1*h_2*j*p_4*s_2*v^2*x - e*f_2*h_1*p_3*p_4*s_1*v^3*x - e*f_2*h_1*p_3^3*p_4*s_1*v*x - e*f_1*h_2*p_3*p_4*s_2*v^3*x - 2*e*f_1*h_2*p_3^3*p_4*s_2*v*x + 5*f_1*f_2*h_2*p_3*p_4*s_2*v^2*x + 8*f_1*f_2*h_2*p_3^2*p_4*s_2*v*x + 3*f_1*f_2^2*h_2*p_3*p_4*s_2*v*x + 5*f_2*h_1*h_2*p_3*p_4*s_2*v^2*x + 8*f_2*h_1*h_2*p_3^2*p_4*s_2*v*x + 3*f_2^2*h_1*h_2*p_3*p_4*s_2*v*x - e*h_1*j*p_3*p_4*s_1*v^3*x - e*h_1*j*p_3^3*p_4*s_1*v*x + 2*f_1*h_2*j*p_3*p_4*s_2*v^2*x + 5*f_1*h_2*j*p_3^2*p_4*s_2*v*x + f_1*h_2*j^2*p_3*p_4*s_2*v*x + 4*f_2*h_2*j*p_3*p_4^2*s_2*v*x + 2*h_1*h_2*j*p_3*p_4*s_2*v^2*x + 5*h_1*h_2*j*p_3^2*p_4*s_2*v*x + h_1*h_2*j^2*p_3*p_4*s_2*v*x - e*f_2*g_2*h_1^2*h_2^2*s_2^2*v^2*x + e*f_2*g_2*h_2^2*p_4^2*s_2^2*v^2*x + e*f_2^2*g_2*h_2^2*p_4^2*s_2^2*v*x - e*f_2*h_1^2*h_2^2*s_1*s_2^2*v^2*x - e*h_1^2*h_2^2*p_3*s_1*s_2^2*v^2*x - e*h_1^2*h_2^2*p_3^2*s_1*s_2^2*v*x - 3*e*f_2*g_1*h_1*h_2*p_3^2*s_2*v^2 + e*f_1*f_2*h_2^2*j*p_3*s_2^2*v + 3*e*f_1*f_2*g_2*h_1*p_3^2*v^2*x + e*f_1*f_2^2*g_2*h_1*p_3*v^2*x + e*f_1*f_2^2*g_2*h_1*p_3^2*v*x - 2*f_1*f_2^2*g_2*h_1*h_2*p_3^2*s_2*x - 3*e*g_1*h_1*h_2*j*p_3^2*s_2*v^2 + f_1*f_2*h_1*h_2^2*j*p_3*s_2^2*x - e*f_1*f_2^2*h_1*h_2*s_2*v^2*x - e*f_2*g_2*h_1^2*h_2*s_2*v^3*x - 3*e*f_2*g_1*h_2*p_3^2*p_4*s_2*v^2 - f_1*f_2^2*g_2*h_1*h_2*s_2*v^2*x + 3*e*f_1*f_2*g_2*p_3^2*p_4*v^2*x + e*f_1*f_2^2*g_2*p_3*p_4*v^2*x + e*f_1*f_2^2*g_2*p_3^2*p_4*v*x + e*f_2*h_2^2*j*p_3*p_4*s_2^2*v - 2*f_1*f_2^2*g_2*h_2*p_3^2*p_4*s_2*x + f_1*f_2*h_1*h_2^2*j*s_2^2*v*x - 3*e*g_1*h_2*j*p_3^2*p_4*s_2*v^2 + e*f_2*g_2*h_1*p_3^2*p_4*v^2*x + e*f_2^2*g_2*h_1*p_3*p_4*v^2*x + e*f_2^2*g_2*h_1*p_3^2*p_4*v*x - 2*f_2^2*g_2*h_1*h_2*p_3^2*p_4*s_2*x + f_1*f_2*h_2^2*j*p_3*p_4*s_2^2*x + e*f_2*g_2*j*p_3*p_4^2*v^2*x + e*f_2*g_2*j*p_3^2*p_4^2*v*x - e*f_1*f_2^2*h_2*p_4*s_2*v^2*x - 2*f_2*g_2*h_2*j*p_3^2*p_4^2*s_2*x + e*f_2*g_2*h_1^2*p_3*s_1*v^3*x + e*f_2*g_2*h_1^2*p_3^3*s_1*v*x + e*f_2*g_2*h_2*p_4^2*s_2*v^3*x + f_2*h_1*h_2^2*j*p_3*p_4*s_2^2*x - 3*e*f_1*h_1*h_2*p_3^2*s_2*v^2*x + 3*e*f_2*h_1^2*h_2*p_3*s_2*v^2*x + 2*e*f_2*h_1^2*h_2*p_3^2*s_2*v*x - e*f_2^2*h_1*h_2*p_4*s_2*v^2*x - f_1*f_2^2*g_2*h_2*p_4*s_2*v^2*x + 3*f_1*f_2*h_1*h_2^2*p_3*s_2^2*v*x - e*f_2*h_2*j*p_4^2*s_2*v^2*x - f_2^2*g_2*h_1*h_2*p_4*s_2*v^2*x - e*f_2*h_1^2*h_2*s_1*s_2*v^3*x + f_1*f_2*h_2^2*j*p_4*s_2^2*v*x + e*h_1^2*h_2*j*p_3*s_2*v^2*x + e*h_1^2*h_2*j*p_3^2*s_2*v*x - f_2*g_2*h_2*j*p_4^2*s_2*v^2*x + f_1*h_1*h_2^2*j*p_3*s_2^2*v*x + f_2*h_1*h_2^2*j*p_4*s_2^2*v*x -
                                           2*e*f_2*h_1*p_3^2*p_4*s_1*v^2*x - 3*e*f_1*h_2*p_3^2*p_4*s_2*v^2*x - 4*e*f_2*h_2*p_3*p_4^2*s_2*v^2*x - 4*e*f_2*h_2*p_3^2*p_4^2*s_2*v*x - 2*e*f_2^2*h_2*p_3*p_4^2*s_2*v*x + 3*f_1*f_2*h_2^2*p_3*p_4*s_2^2*v*x - 4*f_2*g_2*h_2*p_3*p_4^2*s_2*v^2*x - 5*f_2*g_2*h_2*p_3^2*p_4^2*s_2*v*x - 3*f_2^2*g_2*h_2*p_3*p_4^2*s_2*v*x + 3*f_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 2*e*h_1*j*p_3^2*p_4*s_1*v^2*x - e*h_2*j*p_3*p_4^2*s_2*v^2*x - e*h_2*j*p_3^2*p_4^2*s_2*v*x - e*h_1^2*h_2*p_3*s_1*s_2*v^3*x - 2*e*h_1^2*h_2*p_3^3*s_1*s_2*v*x + f_1*h_2^2*j*p_3*p_4*s_2^2*v*x + h_1*h_2^2*j*p_3*p_4*s_2^2*v*x - e*f_2*g_1*h_1*h_2^2*p_3*s_2^2*v^2 - e*f_2*g_1*h_1*h_2^2*p_3^2*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*p_3^2*s_2^2*x - f_1*f_2^2*g_2*h_1*h_2^2*p_3*s_2^2*x - e*g_1*h_1*h_2^2*j*p_3*s_2^2*v^2 - e*g_1*h_1*h_2^2*j*p_3^2*s_2^2*v - e*f_1*f_2*h_1*h_2^2*s_2^2*v^2*x - e*f_1*f_2^2*h_1*h_2^2*s_2^2*v*x - e*f_2*g_1*h_2^2*p_3*p_4*s_2^2*v^2 - e*f_2*g_1*h_2^2*p_3^2*p_4*s_2^2*v - f_1*f_2*g_2*h_1*h_2^2*s_2^2*v^2*x - f_1*f_2^2*g_2*h_1*h_2^2*s_2^2*v*x - f_1*f_2*g_2*h_2^2*p_3^2*p_4*s_2^2*x - f_1*f_2^2*g_2*h_2^2*p_3*p_4*s_2^2*x - e*g_1*h_2^2*j*p_3*p_4*s_2^2*v^2 - e*g_1*h_2^2*j*p_3^2*p_4*s_2^2*v - f_2*g_2*h_1*h_2^2*p_3^2*p_4*s_2^2*x - f_2^2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*x - e*f_1*f_2*h_2^2*p_4*s_2^2*v^2*x - e*f_1*f_2^2*h_2^2*p_4*s_2^2*v*x - f_2*g_2*h_2^2*j*p_3*p_4^2*s_2^2*x + 2*e*f_2*g_2*h_1^2*p_3^2*s_1*v^2*x + e*f_2^2*g_2*h_2*p_4^2*s_2*v^2*x - e*f_1*h_1*h_2^2*p_3*s_2^2*v^2*x - e*f_1*h_1*h_2^2*p_3^2*s_2^2*v*x + e*f_2*h_1^2*h_2^2*p_3*s_2^2*v*x - e*f_2^2*h_1*h_2^2*p_4*s_2^2*v*x - f_1*f_2*g_2*h_2^2*p_4*s_2^2*v^2*x - f_1*f_2^2*g_2*h_2^2*p_4*s_2^2*v*x - e*f_2*h_2^2*j*p_4^2*s_2^2*v*x - f_2*g_2*h_1*h_2^2*p_4*s_2^2*v^2*x - f_2^2*g_2*h_1*h_2^2*p_4*s_2^2*v*x - f_2*g_2*h_2^2*j*p_4^2*s_2^2*v*x - e*f_1*h_2^2*p_3*p_4*s_2^2*v^2*x - e*f_1*h_2^2*p_3^2*p_4*s_2^2*v*x - 2*e*f_2*h_2^2*p_3*p_4^2*s_2^2*v*x - 2*f_2*g_2*h_2^2*p_3*p_4^2*s_2^2*v*x - 3*e*h_1^2*h_2*p_3^2*s_1*s_2*v^2*x - e*h_1^2*h_2*j*p_3*s_1*s_2*v^2*x - e*h_1^2*h_2*j*p_3^2*s_1*s_2*v*x - 3*e*h_1*h_2*p_3^2*p_4*s_1*s_2*v^2*x + 4*f_1*f_2*h_1*h_2*j*p_3*s_2*v*x + 4*f_1*f_2*h_2*j*p_3*p_4*s_2*v*x + 4*f_2*h_1*h_2*j*p_3*p_4*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*s_2^2*v^2*x + e*f_1*f_2^2*g_2*h_1*h_2^2*s_2^2*v*x + e*f_1*f_2*g_2*h_2^2*p_4*s_2^2*v^2*x + e*f_1*f_2^2*g_2*h_2^2*p_4*s_2^2*v*x - e*f_2*g_2*h_1^2*h_2^2*p_3*s_2^2*v*x + e*f_2^2*g_2*h_1*h_2^2*p_4*s_2^2*v*x + e*f_2*g_2*h_2^2*j*p_4^2*s_2^2*v*x + 2*e*f_2*g_2*h_2^2*p_3*p_4^2*s_2^2*v*x - e*f_2*h_1^2*h_2^2*p_3*s_1*s_2^2*v*x - e*f_2*h_1*h_2^2*p_4*s_1*s_2^2*v^2*x - e*h_1*h_2^2*p_3*p_4*s_1*s_2^2*v^2*x - e*h_1*h_2^2*p_3^2*p_4*s_1*s_2^2*v*x + e*f_1*f_2*g_2*h_1*j*p_3*v^2*x + 
                                           e*f_1*f_2*g_2*h_1*j*p_3^2*v*x - 2*f_1*f_2*g_2*h_1*h_2*j*p_3^2*s_2*x + e*f_1*f_2*g_2*h_1*h_2*s_2*v^3*x - e*f_1*f_2*h_1*h_2*j*s_2*v^2*x - f_1*f_2*g_2*h_1*h_2*j*s_2*v^2*x + e*f_1*f_2*g_2*j*p_3*p_4*v^2*x + e*f_1*f_2*g_2*j*p_3^2*p_4*v*x - 2*f_1*f_2*g_2*h_2*j*p_3^2*p_4*s_2*x + e*f_1*f_2*g_2*h_2*p_4*s_2*v^3*x + e*f_2*g_2*h_1*j*p_3*p_4*v^2*x + e*f_2*g_2*h_1*j*p_3^2*p_4*v*x - 4*e*f_1*f_2*h_1*h_2*p_3*s_2*v^2*x - 4*e*f_1*f_2*h_1*h_2*p_3^2*s_2*v*x - 2*e*f_1*f_2^2*h_1*h_2*p_3*s_2*v*x - 2*f_2*g_2*h_1*h_2*j*p_3^2*p_4*s_2*x - e*f_1*f_2*h_2*j*p_4*s_2*v^2*x - 4*f_1*f_2*g_2*h_1*h_2*p_3*s_2*v^2*x - 5*f_1*f_2*g_2*h_1*h_2*p_3^2*s_2*v*x - 3*f_1*f_2^2*g_2*h_1*h_2*p_3*s_2*v*x - e*f_1*h_1*h_2*j*p_3*s_2*v^2*x - e*f_1*h_1*h_2*j*p_3^2*s_2*v*x - e*f_2*h_1*h_2*j*p_4*s_2*v^2*x - f_1*f_2*g_2*h_2*j*p_4*s_2*v^2*x - f_2*g_2*h_1*h_2*j*p_4*s_2*v^2*x - 4*e*f_1*f_2*h_2*p_3*p_4*s_2*v^2*x - 4*e*f_1*f_2*h_2*p_3^2*p_4*s_2*v*x - 2*e*f_1*f_2^2*h_2*p_3*p_4*s_2*v*x + e*f_2*g_2*h_1*p_3*p_4*s_1*v^3*x + e*f_2*g_2*h_1*p_3^3*p_4*s_1*v*x - e*f_2*h_1*h_2*p_3*p_4*s_2*v^2*x - 2*e*f_2*h_1*h_2*p_3^2*p_4*s_2*v*x - 2*e*f_2^2*h_1*h_2*p_3*p_4*s_2*v*x - 4*f_1*f_2*g_2*h_2*p_3*p_4*s_2*v^2*x - 5*f_1*f_2*g_2*h_2*p_3^2*p_4*s_2*v*x - 3*f_1*f_2^2*g_2*h_2*p_3*p_4*s_2*v*x - e*f_1*h_2*j*p_3*p_4*s_2*v^2*x - e*f_1*h_2*j*p_3^2*p_4*s_2*v*x - 2*e*f_2*h_2*j*p_3*p_4^2*s_2*v*x - 4*f_2*g_2*h_1*h_2*p_3*p_4*s_2*v^2*x - 5*f_2*g_2*h_1*h_2*p_3^2*p_4*s_2*v*x - 3*f_2^2*g_2*h_1*h_2*p_3*p_4*s_2*v*x - e*f_2*h_1*h_2*p_4*s_1*s_2*v^3*x - 3*f_2*g_2*h_2*j*p_3*p_4^2*s_2*v*x - e*h_1*h_2*p_3*p_4*s_1*s_2*v^3*x - 2*e*h_1*h_2*p_3^3*p_4*s_1*s_2*v*x + e*f_2*g_2*h_1^2*h_2^2*s_1*s_2^2*v^2*x - f_1*f_2*g_2*h_1*h_2^2*j*p_3*s_2^2*x + e*f_1*f_2^2*g_2*h_1*h_2*s_2*v^2*x - e*f_1*f_2*h_1*h_2^2*j*s_2^2*v*x - f_1*f_2*g_2*h_1*h_2^2*j*s_2^2*v*x - f_1*f_2*g_2*h_2^2*j*p_3*p_4*s_2^2*x + e*f_1*f_2^2*g_2*h_2*p_4*s_2*v^2*x - 2*e*f_1*f_2*h_1*h_2^2*p_3*s_2^2*v*x - f_2*g_2*h_1*h_2^2*j*p_3*p_4*s_2^2*x - 3*e*f_2*g_2*h_1^2*h_2*p_3*s_2*v^2*x - 2*e*f_2*g_2*h_1^2*h_2*p_3^2*s_2*v*x + e*f_2^2*g_2*h_1*h_2*p_4*s_2*v^2*x - e*f_1*f_2*h_2^2*j*p_4*s_2^2*v*x - 2*f_1*f_2*g_2*h_1*h_2^2*p_3*s_2^2*v*x + e*f_2*g_2*h_2*j*p_4^2*s_2*v^2*x - e*f_2*h_1*h_2^2*j*p_4*s_2^2*v*x + e*f_2*g_2*h_1^2*h_2*s_1*s_2*v^3*x - f_1*f_2*g_2*h_2^2*j*p_4*s_2^2*v*x - f_2*g_2*h_1*h_2^2*j*p_4*s_2^2*v*x - 2*e*f_1*f_2*h_2^2*p_3*p_4*s_2^2*v*x + 2*e*f_2*g_2*h_1*p_3^2*p_4*s_1*v^2*x + 4*e*f_2*g_2*h_2*p_3*p_4^2*s_2*v^2*x + 4*e*f_2*g_2*h_2*p_3^2*p_4^2*s_2*v*x + 2*e*f_2^2*g_2*h_2*p_3*p_4^2*s_2*v*x - e*f_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 2*f_1*f_2*g_2*h_2^2*p_3*p_4*s_2^2*v*x - 2*f_2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x - 3*e*f_2*h_1^2*h_2*p_3*s_1*s_2*v^2*x - 
                                           2*e*f_2*h_1^2*h_2*p_3^2*s_1*s_2*v*x + 4*e*f_1*f_2*g_2*h_2*p_3*p_4*s_2*v^2*x + 4*e*f_1*f_2*g_2*h_2*p_3^2*p_4*s_2*v*x + 2*e*f_1*f_2^2*g_2*h_2*p_3*p_4*s_2*v*x + e*f_2*g_2*h_1*h_2*p_3*p_4*s_2*v^2*x + 2*e*f_2*g_2*h_1*h_2*p_3^2*p_4*s_2*v*x + 2*e*f_2^2*g_2*h_1*h_2*p_3*p_4*s_2*v*x + 2*e*f_2*g_2*h_2*j*p_3*p_4^2*s_2*v*x + e*f_2*g_2*h_1*h_2*p_4*s_1*s_2*v^3*x - 3*e*f_2*h_1*h_2*p_3*p_4*s_1*s_2*v^2*x - 2*e*f_2*h_1*h_2*p_3^2*p_4*s_1*s_2*v*x - e*h_1*h_2*j*p_3*p_4*s_1*s_2*v^2*x - e*h_1*h_2*j*p_3^2*p_4*s_1*s_2*v*x + e*f_1*f_2*g_2*h_1*h_2^2*j*s_2^2*v*x + 2*e*f_1*f_2*g_2*h_1*h_2^2*p_3*s_2^2*v*x + e*f_1*f_2*g_2*h_2^2*j*p_4*s_2^2*v*x + e*f_2*g_2*h_1*h_2^2*j*p_4*s_2^2*v*x + 2*e*f_1*f_2*g_2*h_2^2*p_3*p_4*s_2^2*v*x + e*f_2*g_2*h_1*h_2^2*p_3*p_4*s_2^2*v*x + 3*e*f_2*g_2*h_1^2*h_2*p_3*s_1*s_2*v^2*x + 2*e*f_2*g_2*h_1^2*h_2*p_3^2*s_1*s_2*v*x - e*f_2*h_1*h_2^2*p_3*p_4*s_1*s_2^2*v*x - 2*e*f_1*f_2*h_1*h_2*j*p_3*s_2*v*x - 3*f_1*f_2*g_2*h_1*h_2*j*p_3*s_2*v*x - 2*e*f_1*f_2*h_2*j*p_3*p_4*s_2*v*x - 2*e*f_2*h_1*h_2*j*p_3*p_4*s_2*v*x - 3*f_1*f_2*g_2*h_2*j*p_3*p_4*s_2*v*x - 3*f_2*g_2*h_1*h_2*j*p_3*p_4*s_2*v*x + e*f_2*g_2*h_1^2*h_2^2*p_3*s_1*s_2^2*v*x + e*f_2*g_2*h_1*h_2^2*p_4*s_1*s_2^2*v^2*x + e*f_1*f_2*g_2*h_1*h_2*j*s_2*v^2*x + 4*e*f_1*f_2*g_2*h_1*h_2*p_3*s_2*v^2*x + 4*e*f_1*f_2*g_2*h_1*h_2*p_3^2*s_2*v*x + 2*e*f_1*f_2^2*g_2*h_1*h_2*p_3*s_2*v*x + e*f_1*f_2*g_2*h_2*j*p_4*s_2*v^2*x + e*f_2*g_2*h_1*h_2*j*p_4*s_2*v^2*x + 2*e*f_1*f_2*g_2*h_1*h_2*j*p_3*s_2*v*x + 2*e*f_1*f_2*g_2*h_2*j*p_3*p_4*s_2*v*x + 2*e*f_2*g_2*h_1*h_2*j*p_3*p_4*s_2*v*x + 3*e*f_2*g_2*h_1*h_2*p_3*p_4*s_1*s_2*v^2*x + 2*e*f_2*g_2*h_1*h_2*p_3^2*p_4*s_1*s_2*v*x + e*f_2*g_2*h_1*h_2^2*p_3*p_4*s_1*s_2^2*v*x))/(p_2*p_3*(p_3 + h_2*s_2)*(a + p_1)*(f_1 + p_4)*(h_1 + p_4)*(p_3 + v)*(p_3 + v + h_2*s_2)*(f_2 + j + p_3)*(f_2 + j + p_3 + v)))



#Input parameter for Monte Carlo simulations

num_simulations <- 1000 # Number of simulations

#Gamma distribution function
calc_gamma_params <- function(mean, sd) {
  shape <- (mean / sd)^2
  scale <- sd^2 / mean
  return(list(shape = shape, scale = scale))
}

#Funtion for generating random gamma values for each variable
generate_gamma_values <- function(mean, sd, n) {
  params <- calc_gamma_params(mean, sd)
  rgamma(n, shape = params$shape, scale = params$scale)
}



# Beta function distribution
calc_beta_params <- function(mean, sd) {
  var <- sd^2
  alpha <- ((1 - mean) / var - 1 / mean) * mean^2
  beta <- alpha * (1 / mean - 1)
  return(list(alpha = alpha, beta = beta))
}

# Funtion for generating random beta values for each variable
generate_beta_values <- function(mean, sd, n) {
  params <- calc_beta_params(mean, sd)
  rbeta(n, shape1 = params$alpha, shape2 = params$beta)
}


#Input parameters (values): randome generation of value parameters according their distribution, meand and standard deviation
delta_values_basal <- generate_gamma_values(0.0004043506, 8.087012e-05, num_simulations)
alfa_values_basal <- generate_gamma_values(0.32, 0.064, num_simulations)
psi_1_values_basal <- generate_gamma_values(1/6, 1/30, num_simulations)
psi_2_values_basal <- generate_gamma_values(1/6, 1/30, num_simulations)
psi_3_values_basal <- generate_gamma_values(1/6, 1/30, num_simulations)
psi_4_values_basal <- generate_gamma_values(1/12, 1/60, num_simulations)
ache_values_basal <- generate_gamma_values(1/5, 1/25, num_simulations)
ache_2_values_basal <- generate_gamma_values(1/5, 1/25, num_simulations)
lambda_values_basal <- generate_gamma_values(76, 15.2, num_simulations)
zeta_values_basal <- generate_beta_values(0.22, 0.044, num_simulations)
equis_values_basal <- generate_beta_values(0.7, 0.14, num_simulations)
epsilon_values_basal <- generate_beta_values(0.13, 0.026, num_simulations)
ve_values_basal <- generate_gamma_values(1/4, 1/20, num_simulations)
gamma_1_values_basal <- generate_beta_values(0.5, 0.1, num_simulations)
gamma_2_values_basal <- generate_gamma_values(0.5, 0.1, num_simulations)
sigma_2_values_basal <- generate_gamma_values(0.7, 0.14, num_simulations)
sigma_1_values_basal <- generate_beta_values(0.7, 0.14, num_simulations)
jota_values_basal <- rnorm(num_simulations, mean = 0, sd = 0)
efe_1_values_basal <- generate_beta_values(0.90, 0.18, num_simulations)
efe_2_values_basal <- rnorm(num_simulations, mean = 0, sd = 0)


#Plots of parameter values 
plot_1 <- ggplot(data.frame(val=delta_values_basal), aes(x=val)) + geom_histogram(bins=30, fill="gray", color="black") + ggtitle("δ distribution") + xlab("δ values") + theme_minimal() +  theme(panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1))
plot_2 <- ggplot(data.frame(val=alfa_values_basal), aes(x=val)) + geom_histogram(bins=30, fill="gray", color="black") + ggtitle("α distribution") + xlab("α values") + theme_minimal() +  theme(panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1))
plot_3 <- ggplot(data.frame(val=psi_1_values_basal), aes(x=val)) + geom_histogram(bins=30, fill="gray", color="black") + ggtitle("Ψ1 distribution") + xlab("Ψ1 values") + theme_minimal() +  theme(panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1))
plot_4 <- ggplot(data.frame(val=psi_2_values_basal), aes(x=val)) + geom_histogram(bins=30, fill="gray", color="black") + ggtitle("Ψ2 distribution") + xlab("Ψ2 values") + theme_minimal() +  theme(panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1))
plot_5 <- ggplot(data.frame(val=psi_3_values_basal), aes(x=val)) + geom_histogram(bins=30, fill="gray", color="black") + ggtitle("Ψ3 distribution") + xlab("Ψ3 values")+ theme_minimal() +  theme(panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1))
plot_6 <- ggplot(data.frame(val=psi_4_values_basal), aes(x=val)) + geom_histogram(bins=30, fill="gray", color="black") + ggtitle("Ψ4 distribution") + xlab("Ψ4 values")+ theme_minimal() +  theme(panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1))
plot_7 <- ggplot(data.frame(val=ache_values_basal), aes(x=val)) + geom_histogram(bins=30, fill="gray", color="black") + ggtitle("h1 distribution") + xlab("h1 values")+ theme_minimal() +  theme(panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1))
plot_8 <- ggplot(data.frame(val=lambda_values_basal), aes(x=val)) + geom_histogram(bins=30, fill="gray", color="black") + ggtitle("λ distribution") + xlab("λ values") + theme_minimal() +  theme(panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1))
plot_9 <- ggplot(data.frame(val=zeta_values_basal), aes(x=val)) + geom_histogram(bins=30, fill="gray", color="black") + ggtitle("z distribution") + xlab("z values") + theme_minimal() +  theme(panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1))
plot_10 <- ggplot(data.frame(val=equis_values_basal), aes(x=val)) + geom_histogram(bins=30, fill="gray", color="black") + ggtitle("x distribution") + xlab("x values") + theme_minimal() +  theme(panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1))
plot_11 <- ggplot(data.frame(val=epsilon_values_basal), aes(x=val)) + geom_histogram(bins=30, fill="gray", color="black") + ggtitle("ε distribution") + xlab("ε values") + theme_minimal() +  theme(panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1))
plot_12 <- ggplot(data.frame(val=ve_values_basal), aes(x=val)) + geom_histogram(bins=30, fill="gray", color="black") + ggtitle("ν distribution") + xlab("ν values") + theme_minimal() +  theme(panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1))
plot_13 <- ggplot(data.frame(val=gamma_1_values_basal), aes(x=val)) + geom_histogram(bins=30, fill="gray", color="black") + ggtitle("ɣ1 distribution") + xlab("ɣ1 values") + theme_minimal() +  theme(panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1))
plot_14 <- ggplot(data.frame(val=sigma_1_values_basal), aes(x=val)) + geom_histogram(bins=30, fill="gray", color="black") + ggtitle("σ1 distribution") + xlab("σ1 values") + theme_minimal() +  theme(panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1))
plot_15 <- ggplot(data.frame(val=efe_1_values_basal), aes(x=val)) + geom_histogram(bins=30, fill="gray", color="black") + ggtitle("f1 distribution") + xlab("f1 values") + theme_minimal() +  theme(panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1))


grid.arrange(plot_1, plot_2, plot_3,plot_4,plot_5,plot_6,plot_7,plot_8,plot_9,plot_10,plot_11,plot_12,plot_13,plot_14,plot_15, ncol=5)



#2.2 Monte Carlo simulation 

# Assignation of simulated parameters vectors to reproducion number input parameters 
equation_values <- numeric(num_simulations)
for (i in 1:num_simulations) {
  equation_values[i] <- eval(R_formula, envir = list(
    d = delta_values_basal[i], a = alfa_values_basal[i], p_1 = psi_1_values_basal[i], p_2 = psi_2_values_basal[i],
    p_3 = psi_3_values_basal[i], p_4 = psi_4_values_basal[i], h_1 = ache_values_basal[i], h_2 = ache_2_values_basal[i],
    l = lambda_values_basal[i], z = zeta_values_basal[i], x = equis_values_basal[i], e = epsilon_values_basal[i], v = ve_values_basal[i],
    s_1 = sigma_1_values_basal[i], s_2 = sigma_2_values_basal[i], g_1 = gamma_1_values_basal[i],  g_2 = gamma_2_values_basal[i], 
    j = jota_values_basal[i], f_1 = efe_1_values_basal[i], f_2 = efe_2_values_basal[i]
  ))
}

equation_values_2<-equation_values

equation_values <- as.data.frame(equation_values)
equation_values$equation_values <- round(equation_values$equation_values, digits = 1)
equation_values$equation_values <- as.numeric(equation_values$equation_values)
View(equation_values)


# Monte Carlo simulation outputs - Reproduction number distribution
ggplot(equation_values, aes(x = equation_values)) + 
  geom_bar(fill = "gray", color="black", stat = "count") +  # Asumiendo que deseas contar los valores. Ajusta según sea necesario.
  theme_minimal() +  # Usa un tema minimalista como base
  theme(panel.background = element_blank(),  # Hace el fondo del panel transparente
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +  # Añade un contorno negro alrededor del gráfico
  xlab("Reproduction number estimations (value)") +  # Añade nombre al eje X
  ylab("Count") +  # Añade nombre al eje Y
  ggtitle("a) Distribution of basic reproduction number")  # 


# Monte Carlo simulation outputs - Reproduction number box plot
ggplot(equation_values, aes(y = equation_values)) +  # Asegúrate de que 'y = value' sea correcto
  geom_boxplot(fill = "gray", colour = "black") +  # Boxplot con relleno gris y contorno negro
  theme_minimal() +  # Tema minimalista
  theme(panel.background = element_blank(), 
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  scale_x_continuous(breaks = NULL, labels = NULL) +
  xlab("Reproduction number
    estimation (value)") +  # Añade nombre al eje X
  ylab("Count") +  # Añade nombre al eje Y
  ggtitle("b) Boxplot") # Elimina la escala y los números del eje x


# Reproduction number characteristics
hist(equation_values$equation_values)
boxplot(equation_values$equation_values)
mean(equation_values$equation_values)
sd(equation_values$equation_values)
min(equation_values$equation_values)
max(equation_values$equation_values)

count_greater_than_1 <- sum( equation_values$equation_values > 1)




#Partial Rank Correlation Coefficients.

#Input parameter values and output reproduction number
sensi_analysis <- as.data.frame (cbind(delta_values_basal, alfa_values_basal, psi_1_values_basal,
                    psi_2_values_basal, psi_3_values_basal, psi_4_values_basal, 
                    ache_values_basal, lambda_values_basal, zeta_values_basal, 
                    equis_values_basal, epsilon_values_basal, ve_values_basal, 
                    gamma_1_values_basal, sigma_1_values_basal, efe_1_values_basal,equation_values))

View(sensi_analysis)

prcc_results <- epi.prcc(sensi_analysis, sided.test = 2, conf.level = 0.95)
prcc_results <- as.data.frame(prcc_results)
prcc_results$est <- round(prcc_results$est, 3)
prcc_results$lower <- round(prcc_results$lower, 3)
prcc_results$upper <- round(prcc_results$upper, 3)
View(prcc_results)



# Function for Scatter plots for correlation between inputs and outputs
crear_grafico <- function(data_x, data_y, title, xlab, ylab) {
  ggplot(data.frame(x = data_x, y = data_y), aes(x = x, y = y)) + 
    geom_point(size = 0.01) + 
    geom_smooth(method = "lm", formula = 'y ~ x', se = FALSE, color = "red", size = 0.2, linetype = "solid") + 
    ggtitle(title) + 
    labs(x = xlab, y = ylab) +
    theme_minimal(base_size = 8) + 
    theme(panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          panel.background = element_blank(),
          panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.8))
}

# Scatter plots 
g0 <-  crear_grafico(delta_values_basal, equation_values_2, "δ vs R0", "δ values", "R0 estimation")
g1 <-  crear_grafico(alfa_values_basal, equation_values_2, "α vs R0", "α values", "R0 estimation")
g2 <-  crear_grafico(psi_1_values_basal, equation_values_2, "Ψ1 vs R0", "Ψ1 values", "R0 estimation")
g3 <-  crear_grafico(psi_2_values_basal, equation_values_2, "Ψ2 vs R0", "Ψ2 values", "R0 estimation")
g4 <-  crear_grafico(psi_3_values_basal, equation_values_2, "Ψ3 vs R0", "Ψ3 values", "R0 estimation")
g5 <-  crear_grafico(psi_4_values_basal, equation_values_2, "Ψ4 vs R0", "Ψ4 values", "R0 estimation")
g6 <-  crear_grafico(ache_values_basal, equation_values_2, "h1 vs R0", "h1 values", "R0 estimation")
g7 <-  crear_grafico(lambda_values_basal, equation_values_2, "λ vs R0", "λ values", "R0 estimation")
g8 <-  crear_grafico(zeta_values_basal, equation_values_2, "z vs R0", "z values", "R0 estimation")
g9 <-  crear_grafico(equis_values_basal, equation_values_2, "x vs R0", "x values", "R0 estimation")
g10 <- crear_grafico(epsilon_values_basal, equation_values_2, "ε vs R0", "ε values", "R0 estimation")
g11 <- crear_grafico(ve_values_basal, equation_values_2, "ν vs R0", "ν values", "R0 estimation")
g12 <- crear_grafico(gamma_1_values_basal, equation_values_2, "ɣ1 vs R0", "ɣ1 values", "R0 estimation")
g13 <- crear_grafico(sigma_1_values_basal, equation_values_2, "σ1 vs R0", "σ1 values", "R0 estimation")
g14 <- crear_grafico(efe_1_values_basal, equation_values_2, "f1 vs R0", "f1 values", "R0 estimation")


# Organizar todos los gráficos en una sola figura
grid.arrange (g0, g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, g11, g12, g13,
              g14, ncol = 5, nrow = 3  # Ajusta nrow según sea necesario para acomodar todos los gráficos
)


#2.4 Local Sensitivity Analysis (Figure)

#Dataframe of indexes
#Numeric resultd used for this figure derivates from the seinsitivity index analysis 
#presented in script 5. Matlab - Reproduction number (5.2)

indexes <- data.frame(
  Variable = c("psi_2", "psi_1", "psi_3", "psi_4", "delta", "equis", "alpha", 
               "v", "z", "h_1", "g_1", "sigma", "epsilon", "lambda", "efe_1"),
  Index = c(-1.0004, -0.2279, -0.9292, -0.0240, 1.0004, 
            0.9307, 0.2279, -0.0015, 0.0949, -0.0377, -0.0095, 
            -0.0112, -0.0038, 1.0004, -0.0079)
)


#Sensitivity analysis figure

Figure_3 <- ggplot(indexes, aes(x = reorder(Variable, -Index), y = Index)) +
  geom_hline(yintercept = c(-1.1, -1.0, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, 
                            -0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 
                            0.7, 0.8, 0.9, 1, 1.1), colour = "gray", 
             linetype = "dashed") +
  geom_bar(stat = "identity", fill = "darkgrey", colour = "black") +
  labs(x = "", y = "Percentual change on R0 or sensitivity index (SI)", 
       title = "Sensitivity Index (SI)") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, hjust = 1),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  ) +
  coord_flip() +
  guides(fill = "none") +
  scale_y_continuous(
    limits = c(-1.1, 1.1),
    breaks = c( -1.1, -1.0, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, 
                -0.1, 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1),
    labels = c("", "-1.0","","-0.8","","-0.6","","-0.4","","-0.2","", "0", "", 
               "0.2", "", "0.4", "", "0.6", "", "0.8", "", "1.0", "")
  ) +
  scale_x_discrete(labels = c("δ: Transmission rate of infected patients (SI=1.000) ",
                              "λ: Admission rate (SI=1.000) ",
                              "x: Transmission rate of colonized patients (SI=0.930)", 
                              "α: Antibiotic use during hospitalization (SI=0.227)",
                              "z: Antibiotic use during hospitalization (SI=0.094)",
                              "ν: Incubation period (SI=-0.001)",    
                              "ε: Fraction of progression to syndromic disease (SI=-0.003)",
                              "f1: Diagnosis rate of infected patients (SI=-0.007)",
                              "ɣ1: Effectiveness of contact precautions (SI=-0.009)",
                              "σ1: Effectiveness of CDI treatment (SI=-0.011)",
                              "Ψ4: Discharge rate (I)= (SI=-0.024)", 
                              "h1: Bacterial clearance rate due to treatment (SI=-0.037)",  
                              "Ψ1: Discharge rate (R) (SI=-0.227)",
                              "Ψ3: Discharge rate (C) (SI=-0.929)", 
                              "Ψ2: Discharge rate (S) (SI=-1.000)" ))

Figure_3

#2.5 Extended Sensitivity Analysis.
# Cargar las bibliotecas necesarias
library(ggplot2)
library(dplyr)
library(gridExtra)

# Parámetros basales
original_values = list(
  d = 0.0003926286,
  g_1 = 0.5,
  g_2 = 0.5,
  x = 0.7,
  e = 0.13,
  s_1 = 0.7,
  s_2 = 0.7,
  v = 1 / 4,
  j = 0,
  f_1 = 0.95,
  f_2 = 0,
  h_1 = 1/5,
  h_2 =1/5,
  p_1 = 1 / 6, 
  p_2 = 1 / 6,
  p_3 = 1 / 6,
  p_4 = 1 / 12,
  l = 76,
  a = 0.35,
  z = 0.22)




# Función para calcular el valor de R con una lista de parámetros
calculate_R_value <- function(params) {
  with(params, { (d*l*(a + p_1*z)*(e*f_1^2*p_3^3 + p_3^3*p_4^2*x + e*f_1*p_3^3*p_4 + e*h_1*p_3^3*v + f_1*h_1*p_3^3*x + e*p_3^3*p_4*v + f_1*p_3^3*p_4*x + h_1*p_3^3*p_4*x + e*f_1^2*f_2*p_3^2 + e*f_1^2*j*p_3^2 + 2*f_2*p_3^2*p_4^2*x + f_2^2*p_3*p_4^2*x + 2*j*p_3^2*p_4^2*x + j^2*p_3*p_4^2*x + p_3^2*p_4^2*v*x + e*f_1^2*h_2*p_3^2*s_2 - f_2*g_2*p_3^2*p_4^2*x - f_2^2*g_2*p_3*p_4^2*x + f_2^2*h_2*p_4^2*s_2*x + e*h_1^2*p_3^2*v*x - e*p_3^2*p_4^2*v*x + h_2*p_3^2*p_4^2*s_2*x + e*f_1*f_2*p_3^2*p_4 + e*f_1*j*p_3^2*p_4 + e*f_2*h_1*p_3^2*v - e*g_1*h_1*p_3^3*v + 2*f_1*f_2*h_1*p_3^2*x + f_1*f_2^2*h_1*p_3*x + e*h_1*j*p_3^2*v + 2*f_1*h_1*j*p_3^2*x + f_1*h_1*j^2*p_3*x + e*f_2*p_3^2*p_4*v - e*g_1*p_3^3*p_4*v + 2*f_1*f_2*p_3^2*p_4*x + f_1*f_2^2*p_3*p_4*x + e*j*p_3^2*p_4*v + 2*f_2*h_1*p_3^2*p_4*x + f_2^2*h_1*p_3*p_4*x + 2*f_1*j*p_3^2*p_4*x + f_1*j^2*p_3*p_4*x + 2*f_2*j*p_3*p_4^2*x + 2*h_1*j*p_3^2*p_4*x + h_1*j^2*p_3*p_4*x + f_1*h_1*p_3^2*v*x + f_1*p_3^2*p_4*v*x + f_2*p_3*p_4^2*v*x + h_1*p_3^2*p_4*v*x + j*p_3*p_4^2*v*x + h_1*j*p_3*p_4*v*x + e*f_1^2*f_2*h_2*p_3*s_2 - e*f_2*g_1*h_1*p_3^2*v + e*f_1^2*h_2*j*p_3*s_2 - f_1*f_2*g_2*h_1*p_3^2*x - f_1*f_2^2*g_2*h_1*p_3*x - e*g_1*h_1*j*p_3^2*v + e*f_1*h_2*p_3^2*p_4*s_2 + f_1*f_2^2*h_1*h_2*s_2*x - e*f_2*g_1*p_3^2*p_4*v - f_1*f_2*g_2*p_3^2*p_4*x - f_1*f_2^2*g_2*p_3*p_4*x - e*g_1*j*p_3^2*p_4*v - f_2*g_2*h_1*p_3^2*p_4*x - f_2^2*g_2*h_1*p_3*p_4*x + e*h_1*h_2*p_3^2*s_2*v - f_2*g_2*j*p_3*p_4^2*x + f_1*f_2^2*h_2*p_4*s_2*x - e*f_1*h_1*p_3^2*v*x + e*f_2*h_1^2*p_3*v*x + f_1*h_1*h_2*p_3^2*s_2*x + f_2^2*h_1*h_2*p_4*s_2*x + f_2*h_2*j*p_4^2*s_2*x + e*h_1^2*j*p_3*v*x + e*h_2*p_3^2*p_4*s_2*v - e*f_1*p_3^2*p_4*v*x - e*f_2*p_3*p_4^2*v*x + f_1*h_2*p_3^2*p_4*s_2*x + 2*f_2*h_2*p_3*p_4^2*s_2*x - f_2*g_2*p_3*p_4^2*v*x + h_1*h_2*p_3^2*p_4*s_2*x - e*j*p_3*p_4^2*v*x + h_2*j*p_3*p_4^2*s_2*x + f_2*h_2*p_4^2*s_2*v*x + h_2*p_3*p_4^2*s_2*v*x - f_2^2*g_2*h_2*p_4^2*s_2*x - e*h_1^2*p_3^2*s_1*v*x + 2*f_1*f_2*h_1*j*p_3*x + 2*f_1*f_2*j*p_3*p_4*x + 2*f_2*h_1*j*p_3*p_4*x + 
                                     f_1*f_2*h_1*p_3*v*x + f_1*h_1*j*p_3*v*x + f_1*f_2*p_3*p_4*v*x + f_2*h_1*p_3*p_4*v*x + f_1*j*p_3*p_4*v*x + e*f_1*f_2*h_2*p_3*p_4*s_2 - f_1*f_2*g_2*h_1*j*p_3*x + e*f_1*h_2*j*p_3*p_4*s_2 + f_1*f_2*h_1*h_2*j*s_2*x + e*f_2*h_1*h_2*p_3*s_2*v - f_1*f_2*g_2*j*p_3*p_4*x - e*f_1*f_2*h_1*p_3*v*x - f_2*g_2*h_1*j*p_3*p_4*x + 2*f_1*f_2*h_1*h_2*p_3*s_2*x + e*h_1*h_2*j*p_3*s_2*v - f_1*f_2*g_2*h_1*p_3*v*x + f_1*f_2*h_2*j*p_4*s_2*x - e*f_1*h_1*j*p_3*v*x + f_1*h_1*h_2*j*p_3*s_2*x + f_2*h_1*h_2*j*p_4*s_2*x + e*f_2*h_2*p_3*p_4*s_2*v + f_1*f_2*h_1*h_2*s_2*v*x - e*f_1*f_2*p_3*p_4*v*x + 2*f_1*f_2*h_2*p_3*p_4*s_2*x + e*h_2*j*p_3*p_4*s_2*v - f_1*f_2*g_2*p_3*p_4*v*x + 2*f_2*h_1*h_2*p_3*p_4*s_2*x - e*f_1*j*p_3*p_4*v*x + f_1*h_2*j*p_3*p_4*s_2*x - f_2*g_2*h_1*p_3*p_4*v*x + f_1*f_2*h_2*p_4*s_2*v*x + h_1*h_2*j*p_3*p_4*s_2*x + f_1*h_1*h_2*p_3*s_2*v*x + f_2*h_1*h_2*p_4*s_2*v*x + f_1*h_2*p_3*p_4*s_2*v*x + h_1*h_2*p_3*p_4*s_2*v*x - f_1*f_2^2*g_2*h_1*h_2*s_2*x - e*g_1*h_1*h_2*p_3^2*s_2*v - f_1*f_2^2*g_2*h_2*p_4*s_2*x - e*f_2*g_2*h_1^2*p_3*v*x - f_2^2*g_2*h_1*h_2*p_4*s_2*x - f_2*g_2*h_2*j*p_4^2*s_2*x + e*f_2*h_1^2*h_2*s_2*v*x - e*g_1*h_2*p_3^2*p_4*s_2*v + e*f_2*g_2*p_3*p_4^2*v*x - f_2*g_2*h_2*p_3*p_4^2*s_2*x - e*f_2*h_1^2*p_3*s_1*v*x - e*f_2*h_2*p_4^2*s_2*v*x + e*h_1^2*h_2*p_3*s_2*v*x - f_2*g_2*h_2*p_4^2*s_2*v*x - e*h_1^2*j*p_3*s_1*v*x - e*h_1*p_3^2*p_4*s_1*v*x - e*h_2*p_3*p_4^2*s_2*v*x - e*f_2*g_2*h_1^2*h_2*s_2*v*x + e*f_2*g_2*h_1^2*p_3*s_1*v*x + e*f_2*g_2*h_2*p_4^2*s_2*v*x - e*f_2*h_1^2*h_2*s_1*s_2*v*x - e*h_1^2*h_2*p_3*s_1*s_2*v*x - f_1*f_2*g_2*h_1*h_2*j*s_2*x - e*f_2*g_1*h_1*h_2*p_3*s_2*v + e*f_1*f_2*g_2*h_1*p_3*v*x - f_1*f_2*g_2*h_1*h_2*p_3*s_2*x - e*g_1*h_1*h_2*j*p_3*s_2*v - f_1*f_2*g_2*h_2*j*p_4*s_2*x - e*f_1*f_2*h_1*h_2*s_2*v*x - f_2*g_2*h_1*h_2*j*p_4*s_2*x - e*f_2*g_1*h_2*p_3*p_4*s_2*v - f_1*f_2*g_2*h_1*h_2*s_2*v*x + e*f_1*f_2*g_2*p_3*p_4*v*x - f_1*f_2*g_2*h_2*p_3*p_4*s_2*x - e*g_1*h_2*j*p_3*p_4*s_2*v - f_2*g_2*h_1*h_2*p_3*p_4*s_2*x - e*f_1*f_2*h_2*p_4*s_2*v*x - e*f_1*h_1*h_2*p_3*s_2*v*x - f_1*f_2*g_2*h_2*p_4*s_2*v*x - f_2*g_2*h_1*h_2*p_4*s_2*v*x - e*f_2*h_1*p_3*p_4*s_1*v*x - e*f_1*h_2*p_3*p_4*s_2*v*x - e*h_1*j*p_3*p_4*s_1*v*x + e*f_1*f_2*g_2*h_1*h_2*s_2*v*x + e*f_1*f_2*g_2*h_2*p_4*s_2*v*x + e*f_2*g_2*h_1*p_3*p_4*s_1*v*x - e*f_2*h_1*h_2*p_4*s_1*s_2*v*x - e*h_1*h_2*p_3*p_4*s_1*s_2*v*x + e*f_2*g_2*h_1^2*h_2*s_1*s_2*v*x + e*f_2*g_2*h_1*h_2*p_4*s_1*s_2*v*x))/(p_2*p_3*(p_3 + h_2*s_2)*(a + p_1)*(f_1 + p_4)*(h_1 + p_4)*(f_2 + j + p_3)*(f_2 + j + p_3 + v)) })}


# Función para generar un gráfico individual con título y nombres de ejes personalizables
generate_individual_plot <- function(param_name, title, xlab, ylab) {
  changes <- seq(-10, 10, 1)
  R_values <- sapply(changes, function(change) {
    updated_values <- original_values
    updated_values[[param_name]] <- original_values[[param_name]] * (1 + change / 100)
    calculate_R_value(updated_values)
  })
  
  data_frame <- data.frame(PercentageChange = changes, R_Value = R_values)
  plot <- ggplot(data_frame, aes(x = PercentageChange, y = R_Value)) +
    geom_line() +
    geom_point(data = subset(data_frame, PercentageChange == 0), color = "black", size = 1) +
    labs(title = title, x = xlab, y = ylab) +
    theme_minimal() +
    theme(panel.border = element_rect(colour = "black", fill=NA, size=1),
          axis.title.x = element_text(size = 8),
          axis.title.y = element_text(size = 8),
          plot.title = element_text(size = 9)) +
    ylim(0.55, 0.8)
  
  return(plot)
}


delta_plot <- generate_individual_plot("d", "R0 estimation vs δ", "% change (δ)", "R0 estimation")
g_1_plot <- generate_individual_plot("g_1", "R0 estimation vs ɣ1", "% change (ɣ1)", "R0 estimation")
x_plot <- generate_individual_plot("x", "R0 estimation vs x", "% change (x)", "R0 estimation")
epsilon_plot <- generate_individual_plot("e", "R0 estimation vs ε", "% change (ε)", "R0 estimation")
sigma_1_plot <- generate_individual_plot("s_1", "R0 estimation vs σ1", "% change (σ1)", "R0 estimation")
v_plot <- generate_individual_plot("v", "R0 estimation vs ν", "% change (ν)", "R0 estimation")
f_1_plot <- generate_individual_plot("f_1", "R0 estimation vs f1", "% change (f1)", "R0 estimation")
h_1_plot <- generate_individual_plot("h_1", "R0 estimation vs h1", "% change (h1)", "R0 estimation")
psi_1_plot <- generate_individual_plot("p_1", "R0 estimation vs Ψ1", "% change (Ψ1)", "R0 estimation")
psi_2_plot <- generate_individual_plot("p_2", "R0 estimation vs Ψ2", "% change (Ψ2)", "R0 estimation")
psi_3_plot <- generate_individual_plot("p_3", "R0 estimation vs Ψ3", "% change (Ψ3)", "R0 estimation")
psi_4_plot <- generate_individual_plot("p_4", "R0 estimation vs Ψ4", "% change (Ψ4)", "R0 estimation")
lambda_plot <- generate_individual_plot("l", "R0 estimation vs λ", "% change (λ)", "R0 estimation")
alpha_plot <- generate_individual_plot("a", "R0 estimation vs α", "% change (α)", "R0 estimation")
z_plot <- generate_individual_plot("z", "R0 estimation vs z", "% change (z)", "R0 estimation")

grid.arrange(
  delta_plot, g_1_plot, x_plot, epsilon_plot,
  sigma_1_plot, v_plot, f_1_plot, h_1_plot,
  psi_1_plot, psi_2_plot, psi_3_plot, psi_4_plot,
  lambda_plot, alpha_plot, z_plot,
  ncol = 5 # Ajusta este valor según sea necesario para cambiar el número de columnas
)


#2.6 Bivariable Extended Sensitivity Analysis for Treatment (isolation of asymptomatic carriers).



install.packages("scales")
library(scales)

d <- 0.0004043499
g_1 <- 0.5
g_2 <- 0.5
x <- 0.7
e <- 0.13
s_1 <- 0.7
s_2 <- 0.7
v <- 1 / 4
j <- 0
f_1 <-0.90
f_2 <- 0
h_1<-1/5
h_2<-1/5
p_1 <- 1 / 6 
p_2 <- 1 / 6
p_3 <- 1 / 6
p_4 <- 1 / 12
l <- 76
a <- 0.32
z <- 0.22 


j_range <- seq(0, 1, by = 0.1)  # Adjusted to create a vector
sigma_2_range <- seq(0.5, 1, by = 0.1)  # Adjusted to create a vector

# Treatment of colonized people

Contour_1 <- outer (j_range, sigma_2_range, FUN = function(j, s_2) { (d*l*(a + p_1*z)*(e*f_1^2*p_3^3 + p_3^3*p_4^2*x + e*f_1*p_3^3*p_4 + e*h_1*p_3^3*v + f_1*h_1*p_3^3*x + e*p_3^3*p_4*v + f_1*p_3^3*p_4*x + h_1*p_3^3*p_4*x + e*f_1^2*f_2*p_3^2 + e*f_1^2*j*p_3^2 + 2*f_2*p_3^2*p_4^2*x + f_2^2*p_3*p_4^2*x + 2*j*p_3^2*p_4^2*x + j^2*p_3*p_4^2*x + p_3^2*p_4^2*v*x + e*f_1^2*h_2*p_3^2*s_2 - f_2*g_2*p_3^2*p_4^2*x - f_2^2*g_2*p_3*p_4^2*x + f_2^2*h_2*p_4^2*s_2*x + e*h_1^2*p_3^2*v*x - e*p_3^2*p_4^2*v*x + h_2*p_3^2*p_4^2*s_2*x + e*f_1*f_2*p_3^2*p_4 + e*f_1*j*p_3^2*p_4 + e*f_2*h_1*p_3^2*v - e*g_1*h_1*p_3^3*v + 2*f_1*f_2*h_1*p_3^2*x + f_1*f_2^2*h_1*p_3*x + e*h_1*j*p_3^2*v + 2*f_1*h_1*j*p_3^2*x + f_1*h_1*j^2*p_3*x + e*f_2*p_3^2*p_4*v - e*g_1*p_3^3*p_4*v + 2*f_1*f_2*p_3^2*p_4*x + f_1*f_2^2*p_3*p_4*x + e*j*p_3^2*p_4*v + 2*f_2*h_1*p_3^2*p_4*x + f_2^2*h_1*p_3*p_4*x + 2*f_1*j*p_3^2*p_4*x + f_1*j^2*p_3*p_4*x + 2*f_2*j*p_3*p_4^2*x + 2*h_1*j*p_3^2*p_4*x + h_1*j^2*p_3*p_4*x + f_1*h_1*p_3^2*v*x + f_1*p_3^2*p_4*v*x + f_2*p_3*p_4^2*v*x + h_1*p_3^2*p_4*v*x + j*p_3*p_4^2*v*x + h_1*j*p_3*p_4*v*x + e*f_1^2*f_2*h_2*p_3*s_2 - e*f_2*g_1*h_1*p_3^2*v + e*f_1^2*h_2*j*p_3*s_2 - f_1*f_2*g_2*h_1*p_3^2*x - f_1*f_2^2*g_2*h_1*p_3*x - e*g_1*h_1*j*p_3^2*v + e*f_1*h_2*p_3^2*p_4*s_2 + f_1*f_2^2*h_1*h_2*s_2*x - e*f_2*g_1*p_3^2*p_4*v - f_1*f_2*g_2*p_3^2*p_4*x - f_1*f_2^2*g_2*p_3*p_4*x - e*g_1*j*p_3^2*p_4*v - f_2*g_2*h_1*p_3^2*p_4*x - f_2^2*g_2*h_1*p_3*p_4*x + e*h_1*h_2*p_3^2*s_2*v - f_2*g_2*j*p_3*p_4^2*x + f_1*f_2^2*h_2*p_4*s_2*x - e*f_1*h_1*p_3^2*v*x + e*f_2*h_1^2*p_3*v*x + f_1*h_1*h_2*p_3^2*s_2*x + f_2^2*h_1*h_2*p_4*s_2*x + f_2*h_2*j*p_4^2*s_2*x + e*h_1^2*j*p_3*v*x + e*h_2*p_3^2*p_4*s_2*v - e*f_1*p_3^2*p_4*v*x - e*f_2*p_3*p_4^2*v*x + f_1*h_2*p_3^2*p_4*s_2*x + 2*f_2*h_2*p_3*p_4^2*s_2*x - f_2*g_2*p_3*p_4^2*v*x + h_1*h_2*p_3^2*p_4*s_2*x - e*j*p_3*p_4^2*v*x + h_2*j*p_3*p_4^2*s_2*x + f_2*h_2*p_4^2*s_2*v*x + h_2*p_3*p_4^2*s_2*v*x - f_2^2*g_2*h_2*p_4^2*s_2*x - e*h_1^2*p_3^2*s_1*v*x + 2*f_1*f_2*h_1*j*p_3*x + 2*f_1*f_2*j*p_3*p_4*x + 2*f_2*h_1*j*p_3*p_4*x + 
                                                                                         f_1*f_2*h_1*p_3*v*x + f_1*h_1*j*p_3*v*x + f_1*f_2*p_3*p_4*v*x + f_2*h_1*p_3*p_4*v*x + f_1*j*p_3*p_4*v*x + e*f_1*f_2*h_2*p_3*p_4*s_2 - f_1*f_2*g_2*h_1*j*p_3*x + e*f_1*h_2*j*p_3*p_4*s_2 + f_1*f_2*h_1*h_2*j*s_2*x + e*f_2*h_1*h_2*p_3*s_2*v - f_1*f_2*g_2*j*p_3*p_4*x - e*f_1*f_2*h_1*p_3*v*x - f_2*g_2*h_1*j*p_3*p_4*x + 2*f_1*f_2*h_1*h_2*p_3*s_2*x + e*h_1*h_2*j*p_3*s_2*v - f_1*f_2*g_2*h_1*p_3*v*x + f_1*f_2*h_2*j*p_4*s_2*x - e*f_1*h_1*j*p_3*v*x + f_1*h_1*h_2*j*p_3*s_2*x + f_2*h_1*h_2*j*p_4*s_2*x + e*f_2*h_2*p_3*p_4*s_2*v + f_1*f_2*h_1*h_2*s_2*v*x - e*f_1*f_2*p_3*p_4*v*x + 2*f_1*f_2*h_2*p_3*p_4*s_2*x + e*h_2*j*p_3*p_4*s_2*v - f_1*f_2*g_2*p_3*p_4*v*x + 2*f_2*h_1*h_2*p_3*p_4*s_2*x - e*f_1*j*p_3*p_4*v*x + f_1*h_2*j*p_3*p_4*s_2*x - f_2*g_2*h_1*p_3*p_4*v*x + f_1*f_2*h_2*p_4*s_2*v*x + h_1*h_2*j*p_3*p_4*s_2*x + f_1*h_1*h_2*p_3*s_2*v*x + f_2*h_1*h_2*p_4*s_2*v*x + f_1*h_2*p_3*p_4*s_2*v*x + h_1*h_2*p_3*p_4*s_2*v*x - f_1*f_2^2*g_2*h_1*h_2*s_2*x - e*g_1*h_1*h_2*p_3^2*s_2*v - f_1*f_2^2*g_2*h_2*p_4*s_2*x - e*f_2*g_2*h_1^2*p_3*v*x - f_2^2*g_2*h_1*h_2*p_4*s_2*x - f_2*g_2*h_2*j*p_4^2*s_2*x + e*f_2*h_1^2*h_2*s_2*v*x - e*g_1*h_2*p_3^2*p_4*s_2*v + e*f_2*g_2*p_3*p_4^2*v*x - f_2*g_2*h_2*p_3*p_4^2*s_2*x - e*f_2*h_1^2*p_3*s_1*v*x - e*f_2*h_2*p_4^2*s_2*v*x + e*h_1^2*h_2*p_3*s_2*v*x - f_2*g_2*h_2*p_4^2*s_2*v*x - e*h_1^2*j*p_3*s_1*v*x - e*h_1*p_3^2*p_4*s_1*v*x - e*h_2*p_3*p_4^2*s_2*v*x - e*f_2*g_2*h_1^2*h_2*s_2*v*x + e*f_2*g_2*h_1^2*p_3*s_1*v*x + e*f_2*g_2*h_2*p_4^2*s_2*v*x - e*f_2*h_1^2*h_2*s_1*s_2*v*x - e*h_1^2*h_2*p_3*s_1*s_2*v*x - f_1*f_2*g_2*h_1*h_2*j*s_2*x - e*f_2*g_1*h_1*h_2*p_3*s_2*v + e*f_1*f_2*g_2*h_1*p_3*v*x - f_1*f_2*g_2*h_1*h_2*p_3*s_2*x - e*g_1*h_1*h_2*j*p_3*s_2*v - f_1*f_2*g_2*h_2*j*p_4*s_2*x - e*f_1*f_2*h_1*h_2*s_2*v*x - f_2*g_2*h_1*h_2*j*p_4*s_2*x - e*f_2*g_1*h_2*p_3*p_4*s_2*v - f_1*f_2*g_2*h_1*h_2*s_2*v*x + e*f_1*f_2*g_2*p_3*p_4*v*x - f_1*f_2*g_2*h_2*p_3*p_4*s_2*x - e*g_1*h_2*j*p_3*p_4*s_2*v - f_2*g_2*h_1*h_2*p_3*p_4*s_2*x - e*f_1*f_2*h_2*p_4*s_2*v*x - e*f_1*h_1*h_2*p_3*s_2*v*x - f_1*f_2*g_2*h_2*p_4*s_2*v*x - f_2*g_2*h_1*h_2*p_4*s_2*v*x - e*f_2*h_1*p_3*p_4*s_1*v*x - e*f_1*h_2*p_3*p_4*s_2*v*x - e*h_1*j*p_3*p_4*s_1*v*x + e*f_1*f_2*g_2*h_1*h_2*s_2*v*x + e*f_1*f_2*g_2*h_2*p_4*s_2*v*x + e*f_2*g_2*h_1*p_3*p_4*s_1*v*x - e*f_2*h_1*h_2*p_4*s_1*s_2*v*x - e*h_1*h_2*p_3*p_4*s_1*s_2*v*x + e*f_2*g_2*h_1^2*h_2*s_1*s_2*v*x + e*f_2*g_2*h_1*h_2*p_4*s_1*s_2*v*x))/(p_2*p_3*(p_3 + h_2*s_2)*(a + p_1)*(f_1 + p_4)*(h_1 + p_4)*(f_2 + j + p_3)*(f_2 + j + p_3 + v)) })

#GRAFICO

num_levels_1 <- 3
custom_red_palette_1 <- colorRampPalette(c( "#f9ce01", "#f2ae03", "#e67816", "#e56714"))


par(cex.lab = 0.75,  # Tamaño para las etiquetas x e y
    cex.main = 0.75, # Tamaño para el título principal
    cex.axis = 0.75)  # Tamaño para el texto de los ejes

# Crear el gráfico de contorno lleno con los tamaños de etiqueta ajustados
filled.contour(j_range, sigma_2_range, Contour_1, color.palette = custom_red_palette_1,
               plot.title = title(main = "Treatment of Asymptomatic carriers and reproduction number", 
                                  xlab = "Treatment rate of asymptomatic carriers (j)", 
                                  ylab = "Fraction of cured patients after treatment (σ2)"),
               nlevels = num_levels_1)




#  Colonized isolation vs effectiveness

f_2_rango <- seq(0, 1, by = 0.1)  # Adjusted to create a vector
gamma_2_rango <- seq(0.5, 1, by = 0.1)  # Adjusted to create a vector

# Create the Rnumber matrix using outer
Contour_2 <- outer (f_2_rango, gamma_2_rango, FUN = function(f_2, g_2) { (d*l*(a + p_1*z)*(e*f_1^2*p_3^3 + p_3^3*p_4^2*x + e*f_1*p_3^3*p_4 + e*h_1*p_3^3*v + f_1*h_1*p_3^3*x + e*p_3^3*p_4*v + f_1*p_3^3*p_4*x + h_1*p_3^3*p_4*x + e*f_1^2*f_2*p_3^2 + e*f_1^2*j*p_3^2 + 2*f_2*p_3^2*p_4^2*x + f_2^2*p_3*p_4^2*x + 2*j*p_3^2*p_4^2*x + j^2*p_3*p_4^2*x + p_3^2*p_4^2*v*x + e*f_1^2*h_2*p_3^2*s_2 - f_2*g_2*p_3^2*p_4^2*x - f_2^2*g_2*p_3*p_4^2*x + f_2^2*h_2*p_4^2*s_2*x + e*h_1^2*p_3^2*v*x - e*p_3^2*p_4^2*v*x + h_2*p_3^2*p_4^2*s_2*x + e*f_1*f_2*p_3^2*p_4 + e*f_1*j*p_3^2*p_4 + e*f_2*h_1*p_3^2*v - e*g_1*h_1*p_3^3*v + 2*f_1*f_2*h_1*p_3^2*x + f_1*f_2^2*h_1*p_3*x + e*h_1*j*p_3^2*v + 2*f_1*h_1*j*p_3^2*x + f_1*h_1*j^2*p_3*x + e*f_2*p_3^2*p_4*v - e*g_1*p_3^3*p_4*v + 2*f_1*f_2*p_3^2*p_4*x + f_1*f_2^2*p_3*p_4*x + e*j*p_3^2*p_4*v + 2*f_2*h_1*p_3^2*p_4*x + f_2^2*h_1*p_3*p_4*x + 2*f_1*j*p_3^2*p_4*x + f_1*j^2*p_3*p_4*x + 2*f_2*j*p_3*p_4^2*x + 2*h_1*j*p_3^2*p_4*x + h_1*j^2*p_3*p_4*x + f_1*h_1*p_3^2*v*x + f_1*p_3^2*p_4*v*x + f_2*p_3*p_4^2*v*x + h_1*p_3^2*p_4*v*x + j*p_3*p_4^2*v*x + h_1*j*p_3*p_4*v*x + e*f_1^2*f_2*h_2*p_3*s_2 - e*f_2*g_1*h_1*p_3^2*v + e*f_1^2*h_2*j*p_3*s_2 - f_1*f_2*g_2*h_1*p_3^2*x - f_1*f_2^2*g_2*h_1*p_3*x - e*g_1*h_1*j*p_3^2*v + e*f_1*h_2*p_3^2*p_4*s_2 + f_1*f_2^2*h_1*h_2*s_2*x - e*f_2*g_1*p_3^2*p_4*v - f_1*f_2*g_2*p_3^2*p_4*x - f_1*f_2^2*g_2*p_3*p_4*x - e*g_1*j*p_3^2*p_4*v - f_2*g_2*h_1*p_3^2*p_4*x - f_2^2*g_2*h_1*p_3*p_4*x + e*h_1*h_2*p_3^2*s_2*v - f_2*g_2*j*p_3*p_4^2*x + f_1*f_2^2*h_2*p_4*s_2*x - e*f_1*h_1*p_3^2*v*x + e*f_2*h_1^2*p_3*v*x + f_1*h_1*h_2*p_3^2*s_2*x + f_2^2*h_1*h_2*p_4*s_2*x + f_2*h_2*j*p_4^2*s_2*x + e*h_1^2*j*p_3*v*x + e*h_2*p_3^2*p_4*s_2*v - e*f_1*p_3^2*p_4*v*x - e*f_2*p_3*p_4^2*v*x + f_1*h_2*p_3^2*p_4*s_2*x + 2*f_2*h_2*p_3*p_4^2*s_2*x - f_2*g_2*p_3*p_4^2*v*x + h_1*h_2*p_3^2*p_4*s_2*x - e*j*p_3*p_4^2*v*x + h_2*j*p_3*p_4^2*s_2*x + f_2*h_2*p_4^2*s_2*v*x + h_2*p_3*p_4^2*s_2*v*x - f_2^2*g_2*h_2*p_4^2*s_2*x - e*h_1^2*p_3^2*s_1*v*x + 2*f_1*f_2*h_1*j*p_3*x + 2*f_1*f_2*j*p_3*p_4*x + 2*f_2*h_1*j*p_3*p_4*x + 
                                                                                               f_1*f_2*h_1*p_3*v*x + f_1*h_1*j*p_3*v*x + f_1*f_2*p_3*p_4*v*x + f_2*h_1*p_3*p_4*v*x + f_1*j*p_3*p_4*v*x + e*f_1*f_2*h_2*p_3*p_4*s_2 - f_1*f_2*g_2*h_1*j*p_3*x + e*f_1*h_2*j*p_3*p_4*s_2 + f_1*f_2*h_1*h_2*j*s_2*x + e*f_2*h_1*h_2*p_3*s_2*v - f_1*f_2*g_2*j*p_3*p_4*x - e*f_1*f_2*h_1*p_3*v*x - f_2*g_2*h_1*j*p_3*p_4*x + 2*f_1*f_2*h_1*h_2*p_3*s_2*x + e*h_1*h_2*j*p_3*s_2*v - f_1*f_2*g_2*h_1*p_3*v*x + f_1*f_2*h_2*j*p_4*s_2*x - e*f_1*h_1*j*p_3*v*x + f_1*h_1*h_2*j*p_3*s_2*x + f_2*h_1*h_2*j*p_4*s_2*x + e*f_2*h_2*p_3*p_4*s_2*v + f_1*f_2*h_1*h_2*s_2*v*x - e*f_1*f_2*p_3*p_4*v*x + 2*f_1*f_2*h_2*p_3*p_4*s_2*x + e*h_2*j*p_3*p_4*s_2*v - f_1*f_2*g_2*p_3*p_4*v*x + 2*f_2*h_1*h_2*p_3*p_4*s_2*x - e*f_1*j*p_3*p_4*v*x + f_1*h_2*j*p_3*p_4*s_2*x - f_2*g_2*h_1*p_3*p_4*v*x + f_1*f_2*h_2*p_4*s_2*v*x + h_1*h_2*j*p_3*p_4*s_2*x + f_1*h_1*h_2*p_3*s_2*v*x + f_2*h_1*h_2*p_4*s_2*v*x + f_1*h_2*p_3*p_4*s_2*v*x + h_1*h_2*p_3*p_4*s_2*v*x - f_1*f_2^2*g_2*h_1*h_2*s_2*x - e*g_1*h_1*h_2*p_3^2*s_2*v - f_1*f_2^2*g_2*h_2*p_4*s_2*x - e*f_2*g_2*h_1^2*p_3*v*x - f_2^2*g_2*h_1*h_2*p_4*s_2*x - f_2*g_2*h_2*j*p_4^2*s_2*x + e*f_2*h_1^2*h_2*s_2*v*x - e*g_1*h_2*p_3^2*p_4*s_2*v + e*f_2*g_2*p_3*p_4^2*v*x - f_2*g_2*h_2*p_3*p_4^2*s_2*x - e*f_2*h_1^2*p_3*s_1*v*x - e*f_2*h_2*p_4^2*s_2*v*x + e*h_1^2*h_2*p_3*s_2*v*x - f_2*g_2*h_2*p_4^2*s_2*v*x - e*h_1^2*j*p_3*s_1*v*x - e*h_1*p_3^2*p_4*s_1*v*x - e*h_2*p_3*p_4^2*s_2*v*x - e*f_2*g_2*h_1^2*h_2*s_2*v*x + e*f_2*g_2*h_1^2*p_3*s_1*v*x + e*f_2*g_2*h_2*p_4^2*s_2*v*x - e*f_2*h_1^2*h_2*s_1*s_2*v*x - e*h_1^2*h_2*p_3*s_1*s_2*v*x - f_1*f_2*g_2*h_1*h_2*j*s_2*x - e*f_2*g_1*h_1*h_2*p_3*s_2*v + e*f_1*f_2*g_2*h_1*p_3*v*x - f_1*f_2*g_2*h_1*h_2*p_3*s_2*x - e*g_1*h_1*h_2*j*p_3*s_2*v - f_1*f_2*g_2*h_2*j*p_4*s_2*x - e*f_1*f_2*h_1*h_2*s_2*v*x - f_2*g_2*h_1*h_2*j*p_4*s_2*x - e*f_2*g_1*h_2*p_3*p_4*s_2*v - f_1*f_2*g_2*h_1*h_2*s_2*v*x + e*f_1*f_2*g_2*p_3*p_4*v*x - f_1*f_2*g_2*h_2*p_3*p_4*s_2*x - e*g_1*h_2*j*p_3*p_4*s_2*v - f_2*g_2*h_1*h_2*p_3*p_4*s_2*x - e*f_1*f_2*h_2*p_4*s_2*v*x - e*f_1*h_1*h_2*p_3*s_2*v*x - f_1*f_2*g_2*h_2*p_4*s_2*v*x - f_2*g_2*h_1*h_2*p_4*s_2*v*x - e*f_2*h_1*p_3*p_4*s_1*v*x - e*f_1*h_2*p_3*p_4*s_2*v*x - e*h_1*j*p_3*p_4*s_1*v*x + e*f_1*f_2*g_2*h_1*h_2*s_2*v*x + e*f_1*f_2*g_2*h_2*p_4*s_2*v*x + e*f_2*g_2*h_1*p_3*p_4*s_1*v*x - e*f_2*h_1*h_2*p_4*s_1*s_2*v*x - e*h_1*h_2*p_3*p_4*s_1*s_2*v*x + e*f_2*g_2*h_1^2*h_2*s_1*s_2*v*x + e*f_2*g_2*h_1*h_2*p_4*s_1*s_2*v*x))/(p_2*p_3*(p_3 + h_2*s_2)*(a + p_1)*(f_1 + p_4)*(h_1 + p_4)*(f_2 + j + p_3)*(f_2 + j + p_3 + v)) })


#GRAFICO
num_levels_2 <- 6  # Adjust the number of levels as needed
custom_blue_red_palette_2 <- colorRampPalette(c("#67b933", "#acd307", "#f9ce01", "#f2ae03", "#e67816", "#e56714"))

Figure_contour_2 = filled.contour(f_2_rango, gamma_2_rango, Contour_2,  color.palette =custom_blue_red_palette_2,
                            plot.title = title(main = "Isolation of asymptomatic carriers and reproduction number", xlab = "Isolation rate of asymptomatic carriers (f2)", ylab = "ɣ2: Effectivness of contact precautions"),
                            nlevels = num_levels_2)




